// https://developers.google.com/protocol-buffers/docs/proto3
// See: https://github.com/googleapis/gnostic/blob/48a0ecef/OpenAPIv3/OpenAPIv3.proto
// See: https://github.com/luckymarmot/API-Flow/blob/24cc71a/src/README.md

syntax = "proto3";
package main;

message UserCfg {
    uint32 version = 1;
    string auth_token = 2;
    bytes seed = 3;

    enum Kind {
        UNKNOWN = 0;
        OpenAPIv3 = 1;
    }
    Kind kind = 4;
    string file = 5;

    message Runtime {
        string host = 1;
        string port = 2;
        string final_host = 3;
        string final_port = 4;
    }
    Runtime runtime = 6;

    message Exec {
        repeated string start = 1;
        repeated string reset = 2;
        repeated string stop = 3;
    }
    Exec exec = 7;
}

message FuzzCfg {
    UserCfg cfg = 1;
    SpecIR spec = 2;
}

message SpecIR {
    Schemas schemas = 1;
    repeated Endpoint endpoints = 2;
}

message Schemas {
    // All schemas are here. Only mention SchemaPtr everywhere else.
    // Start at 1. 0 (zero) is reserved for bug finding.
    map<uint32,RefOrSchemaJSON> json = 1;
}

message RefOrSchemaJSON {
    oneof ptr_or_schema {
        // Probably most often from a $ref
        SchemaPtr ptr = 1;
        // Actual schema when not a $ref
        Schema.JSON schema = 2;
    }
}

message SchemaPtr {
    // Pointer to actual schema. i.e. key in Schemas message.
    uint32 UID = 1;
    // $ref if was ref'd, in canonical/absolute (#/...-like) format.
    string ref = 2;
}

message Endpoint {
    oneof endpoint {
        EndpointJSON json = 1;
    }
}

message EndpointJSON {
    Method method = 1;
    repeated PathPartial path_partials = 2;
    ParamsJSON inputs = 3;
    // The uint32 key replaces an enum of 1XX,...,201,204,...,5XX,XXX.
    map<uint32,SchemaPtr> outputs = 4;
}

message ParamsJSON {
    ParamJSON body = 1;
    map<string,ParamJSON> header = 2;
    map<string,ParamJSON> path = 3;
    map<string,ParamJSON> query = 4;
}

message ParamJSON {
    // Whether this param has to be present
    bool required = 1;
    // Pointer to Schemas message
    SchemaPtr ptr = 2;
    //TODO: repeated Example examples
}

enum Method {
    UNKNOWN = 0;
    GET = 1;
    HEAD = 2;
    POST = 3;
    PUT = 4;
    PATCH = 5;
    DELETE = 6;
    CONNECT = 7;
    OPTIONS = 8;
    TRACE = 9;
}

message PathPartial {
    oneof pp {
        string part = 1;
        string ptr = 2; //FIXME? uint32 ptr = 2;
    }
}

/// https://swagger.io/docs/specification/data-models/keywords/
/// https://tools.ietf.org/html/draft-wright-json-schema-validation-00
/// http://json-schema.org/draft-06/json-schema-release-notes.html
/// http://json-schema.org/draft-07/json-schema-release-notes.html
// https://github.com/mikunn/openapi-schema-to-json-schema
// https://github.com/kogosoftwarellc/openapi-jsonschema-parameters
// https://github.com/garethr/openapi2jsonschema

message Schema {
    message JSON {
        // (Some) things can be combined (: enum + type)
        //   so just lay things out flat...

        enum Type {
            UNKNOWN = 0;
            any = 1;
            null = 2;
            boolean = 3;
            integer = 4;
            number = 5;
            array = 6;
            string = 7;
            object = 8;
        }
        repeated Type type = 1; // default: []

        PlainJSON.Array enum = 2; // default: []

        // type: string
        string format = 3; // default: ""
        uint64 min_length = 4; // default: 0
        uint64 max_length = 5;
        bool has_max_length = 6;
        string pattern = 7; // default: ""

        // type: number | integer
        double minimum = 8;
        double maximum = 9;
        bool has_minimum = 10;
        bool has_maximum = 11;
        double translated_multiple_of = 12; // default: 0.0, add +1.0 when reading
        bool exclusive_minimum = 13; // default: false
        bool exclusive_maximum = 14; // default: false

        // type: array
        repeated SchemaPtr items = 15; // default: empty list
        bool unique_items = 16; // default: false
        uint64 min_items = 17; // default: 0
        uint64 max_items = 18;
        bool has_max_items = 19;
        //TODO: additionalItems :: bool | SchemaPtr

        // type: object
        map<string,SchemaPtr> properties = 20; // default {}
        repeated string required = 21; // default: []
        uint64 min_properties = 22; // default: 0
        uint64 max_properties = 23;
        bool has_max_properties = 24;
        ///FIXME true is equivalent to {}, false is equivalent to {"not": {}}
        message AdditionalProperties {
            oneof add_props {
                bool always_succeed = 1;
                SchemaPtr ref = 2;
            }
        }
        AdditionalProperties additional_properties = 25;
        bool has_additional_properties = 26;
        //TODO: patternProperties :: SchemaPtr

        repeated SchemaPtr all_of = 27; // default: []
        repeated SchemaPtr any_of = 28; // default: []
        repeated SchemaPtr one_of = 29; // default: []

        SchemaPtr not = 30;

        //TODO: default, examples
        //TODO: draft-04 but not part of OpenAPIv3.0.0
        //  $schema
        //  id, $id
        //  dependencies
        //TODO: http://json-schema.org/draft-06/json-schema-release-notes.html
        //  const
        //  contains
        //  propertyNames
        //  some formats
        //TODO: http://json-schema.org/draft-07/json-schema-release-notes.html
        //  if, then, else
        //  (readOnly, writeOnly, contentMediaType, contentEncoding)
        //  some formats
    }
}


message PlainJSON {
    message Object {
        map<string,Value> object = 1;
        bool is_object = 2;
    }

    message Array {
        repeated Value array = 1;
        bool is_array = 2;
    }

    message Text {
        string text = 1;
        bool is_text = 2;
    }

    message Number {
        double number = 1;
        bool is_number = 2;
    }

    message Boolean {
        bool boolean = 1;
        bool is_boolean = 2;
    }

    message Null {
        bool is_null = 1;
    }

    message Value {
        oneof value {
            Null z = 1;
            Boolean b = 2;
            Number n = 3;
            Text t = 4;
            Array a = 5;
            Object o = 6;
        }
    }
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/internal/fm/fuzzymonkey.proto

package fm // import "github.com/FuzzyMonkeyCo/monkey/pkg/internal/fm"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import bytes "bytes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Clt_Msg_Fuzz_ModelKind int32

const (
	Clt_Msg_Fuzz_UNKNOWN   Clt_Msg_Fuzz_ModelKind = 0
	Clt_Msg_Fuzz_OpenAPIv3 Clt_Msg_Fuzz_ModelKind = 1
)

var Clt_Msg_Fuzz_ModelKind_name = map[int32]string{
	0: "UNKNOWN",
	1: "OpenAPIv3",
}
var Clt_Msg_Fuzz_ModelKind_value = map[string]int32{
	"UNKNOWN":   0,
	"OpenAPIv3": 1,
}

func (x Clt_Msg_Fuzz_ModelKind) String() string {
	return proto.EnumName(Clt_Msg_Fuzz_ModelKind_name, int32(x))
}
func (Clt_Msg_Fuzz_ModelKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 0, 0}
}

type Clt_Msg_ResetProgress_Status int32

const (
	Clt_Msg_ResetProgress_NOOP    Clt_Msg_ResetProgress_Status = 0
	Clt_Msg_ResetProgress_started Clt_Msg_ResetProgress_Status = 1
	Clt_Msg_ResetProgress_ended   Clt_Msg_ResetProgress_Status = 2
	Clt_Msg_ResetProgress_failed  Clt_Msg_ResetProgress_Status = 3
)

var Clt_Msg_ResetProgress_Status_name = map[int32]string{
	0: "NOOP",
	1: "started",
	2: "ended",
	3: "failed",
}
var Clt_Msg_ResetProgress_Status_value = map[string]int32{
	"NOOP":    0,
	"started": 1,
	"ended":   2,
	"failed":  3,
}

func (x Clt_Msg_ResetProgress_Status) String() string {
	return proto.EnumName(Clt_Msg_ResetProgress_Status_name, int32(x))
}
func (Clt_Msg_ResetProgress_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 2, 0}
}

type Clt_Msg_CallVerifProgress_Status int32

const (
	Clt_Msg_CallVerifProgress_done    Clt_Msg_CallVerifProgress_Status = 0
	Clt_Msg_CallVerifProgress_data    Clt_Msg_CallVerifProgress_Status = 1
	Clt_Msg_CallVerifProgress_skipped Clt_Msg_CallVerifProgress_Status = 2
	Clt_Msg_CallVerifProgress_start   Clt_Msg_CallVerifProgress_Status = 3
	Clt_Msg_CallVerifProgress_success Clt_Msg_CallVerifProgress_Status = 4
	Clt_Msg_CallVerifProgress_failure Clt_Msg_CallVerifProgress_Status = 5
)

var Clt_Msg_CallVerifProgress_Status_name = map[int32]string{
	0: "done",
	1: "data",
	2: "skipped",
	3: "start",
	4: "success",
	5: "failure",
}
var Clt_Msg_CallVerifProgress_Status_value = map[string]int32{
	"done":    0,
	"data":    1,
	"skipped": 2,
	"start":   3,
	"success": 4,
	"failure": 5,
}

func (x Clt_Msg_CallVerifProgress_Status) String() string {
	return proto.EnumName(Clt_Msg_CallVerifProgress_Status_name, int32(x))
}
func (Clt_Msg_CallVerifProgress_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 5, 0}
}

type EndpointJSON_Method int32

const (
	EndpointJSON_UNKNOWN EndpointJSON_Method = 0
	EndpointJSON_GET     EndpointJSON_Method = 1
	EndpointJSON_HEAD    EndpointJSON_Method = 2
	EndpointJSON_POST    EndpointJSON_Method = 3
	EndpointJSON_PUT     EndpointJSON_Method = 4
	EndpointJSON_PATCH   EndpointJSON_Method = 5
	EndpointJSON_DELETE  EndpointJSON_Method = 6
	EndpointJSON_CONNECT EndpointJSON_Method = 7
	EndpointJSON_OPTIONS EndpointJSON_Method = 8
	EndpointJSON_TRACE   EndpointJSON_Method = 9
)

var EndpointJSON_Method_name = map[int32]string{
	0: "UNKNOWN",
	1: "GET",
	2: "HEAD",
	3: "POST",
	4: "PUT",
	5: "PATCH",
	6: "DELETE",
	7: "CONNECT",
	8: "OPTIONS",
	9: "TRACE",
}
var EndpointJSON_Method_value = map[string]int32{
	"UNKNOWN": 0,
	"GET":     1,
	"HEAD":    2,
	"POST":    3,
	"PUT":     4,
	"PATCH":   5,
	"DELETE":  6,
	"CONNECT": 7,
	"OPTIONS": 8,
	"TRACE":   9,
}

func (x EndpointJSON_Method) String() string {
	return proto.EnumName(EndpointJSON_Method_name, int32(x))
}
func (EndpointJSON_Method) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{7, 0}
}

type ParamJSON_Kind int32

const (
	ParamJSON_UNKNOWN ParamJSON_Kind = 0
	ParamJSON_body    ParamJSON_Kind = 1
	ParamJSON_path    ParamJSON_Kind = 2
	ParamJSON_query   ParamJSON_Kind = 3
	ParamJSON_header  ParamJSON_Kind = 4
	ParamJSON_cookie  ParamJSON_Kind = 5
)

var ParamJSON_Kind_name = map[int32]string{
	0: "UNKNOWN",
	1: "body",
	2: "path",
	3: "query",
	4: "header",
	5: "cookie",
}
var ParamJSON_Kind_value = map[string]int32{
	"UNKNOWN": 0,
	"body":    1,
	"path":    2,
	"query":   3,
	"header":  4,
	"cookie":  5,
}

func (x ParamJSON_Kind) String() string {
	return proto.EnumName(ParamJSON_Kind_name, int32(x))
}
func (ParamJSON_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{8, 0}
}

type Schema_JSON_Type int32

const (
	Schema_JSON_UNKNOWN Schema_JSON_Type = 0
	Schema_JSON_any     Schema_JSON_Type = 1
	Schema_JSON_null    Schema_JSON_Type = 2
	Schema_JSON_boolean Schema_JSON_Type = 3
	Schema_JSON_integer Schema_JSON_Type = 4
	Schema_JSON_number  Schema_JSON_Type = 5
	Schema_JSON_array   Schema_JSON_Type = 6
	Schema_JSON_string  Schema_JSON_Type = 7
	Schema_JSON_object  Schema_JSON_Type = 8
)

var Schema_JSON_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "any",
	2: "null",
	3: "boolean",
	4: "integer",
	5: "number",
	6: "array",
	7: "string",
	8: "object",
}
var Schema_JSON_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"any":     1,
	"null":    2,
	"boolean": 3,
	"integer": 4,
	"number":  5,
	"array":   6,
	"string":  7,
	"object":  8,
}

func (x Schema_JSON_Type) String() string {
	return proto.EnumName(Schema_JSON_Type_name, int32(x))
}
func (Schema_JSON_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{10, 0, 0}
}

// type: string
type Schema_JSON_Format int32

const (
	Schema_JSON_NONE      Schema_JSON_Format = 0
	Schema_JSON_date_time Schema_JSON_Format = 1
	Schema_JSON_date      Schema_JSON_Format = 2
	// time = 3;
	Schema_JSON_email Schema_JSON_Format = 4
	// idn-email = 5;
	Schema_JSON_hostname Schema_JSON_Format = 6
	// idn_hostname = 7;
	Schema_JSON_ipv4          Schema_JSON_Format = 8
	Schema_JSON_ipv6          Schema_JSON_Format = 9
	Schema_JSON_uri           Schema_JSON_Format = 10
	Schema_JSON_uri_reference Schema_JSON_Format = 11
	// iri = 12;
	// iri_reference = 13;
	// uri_template = 14;
	// json_pointer = 15;
	// relative_json_pointer = 16;
	Schema_JSON_regex    Schema_JSON_Format = 17
	Schema_JSON_int32    Schema_JSON_Format = 18
	Schema_JSON_int64    Schema_JSON_Format = 19
	Schema_JSON_float    Schema_JSON_Format = 20
	Schema_JSON_double   Schema_JSON_Format = 21
	Schema_JSON_byte     Schema_JSON_Format = 22
	Schema_JSON_binary   Schema_JSON_Format = 23
	Schema_JSON_password Schema_JSON_Format = 24
)

var Schema_JSON_Format_name = map[int32]string{
	0:  "NONE",
	1:  "date_time",
	2:  "date",
	4:  "email",
	6:  "hostname",
	8:  "ipv4",
	9:  "ipv6",
	10: "uri",
	11: "uri_reference",
	17: "regex",
	18: "int32",
	19: "int64",
	20: "float",
	21: "double",
	22: "byte",
	23: "binary",
	24: "password",
}
var Schema_JSON_Format_value = map[string]int32{
	"NONE":          0,
	"date_time":     1,
	"date":          2,
	"email":         4,
	"hostname":      6,
	"ipv4":          8,
	"ipv6":          9,
	"uri":           10,
	"uri_reference": 11,
	"regex":         17,
	"int32":         18,
	"int64":         19,
	"float":         20,
	"double":        21,
	"byte":          22,
	"binary":        23,
	"password":      24,
}

func (x Schema_JSON_Format) String() string {
	return proto.EnumName(Schema_JSON_Format_name, int32(x))
}
func (Schema_JSON_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{10, 0, 1}
}

type Clt struct {
	Msg                  *Clt_Msg `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt) Reset()         { *m = Clt{} }
func (m *Clt) String() string { return proto.CompactTextString(m) }
func (*Clt) ProtoMessage()    {}
func (*Clt) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0}
}
func (m *Clt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt.Merge(dst, src)
}
func (m *Clt) XXX_Size() int {
	return m.Size()
}
func (m *Clt) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt.DiscardUnknown(m)
}

var xxx_messageInfo_Clt proto.InternalMessageInfo

func (m *Clt) GetMsg() *Clt_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Clt_Msg struct {
	// Types that are valid to be assigned to Msg:
	//	*Clt_Msg_Fuzz_
	//	*Clt_Msg_Metrics_
	//	*Clt_Msg_ResetProgress_
	//	*Clt_Msg_CallRequestRaw_
	//	*Clt_Msg_CallResponseRaw_
	//	*Clt_Msg_CallVerifProgress_
	Msg                  isClt_Msg_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Clt_Msg) Reset()         { *m = Clt_Msg{} }
func (m *Clt_Msg) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg) ProtoMessage()    {}
func (*Clt_Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0}
}
func (m *Clt_Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg.Merge(dst, src)
}
func (m *Clt_Msg) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg proto.InternalMessageInfo

type isClt_Msg_Msg interface {
	isClt_Msg_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_Fuzz_ struct {
	Fuzz *Clt_Msg_Fuzz `protobuf:"bytes,1,opt,name=fuzz,oneof"`
}
type Clt_Msg_Metrics_ struct {
	Metrics *Clt_Msg_Metrics `protobuf:"bytes,2,opt,name=metrics,oneof"`
}
type Clt_Msg_ResetProgress_ struct {
	ResetProgress *Clt_Msg_ResetProgress `protobuf:"bytes,3,opt,name=reset_progress,json=resetProgress,oneof"`
}
type Clt_Msg_CallRequestRaw_ struct {
	CallRequestRaw *Clt_Msg_CallRequestRaw `protobuf:"bytes,4,opt,name=call_request_raw,json=callRequestRaw,oneof"`
}
type Clt_Msg_CallResponseRaw_ struct {
	CallResponseRaw *Clt_Msg_CallResponseRaw `protobuf:"bytes,5,opt,name=call_response_raw,json=callResponseRaw,oneof"`
}
type Clt_Msg_CallVerifProgress_ struct {
	CallVerifProgress *Clt_Msg_CallVerifProgress `protobuf:"bytes,6,opt,name=call_verif_progress,json=callVerifProgress,oneof"`
}

func (*Clt_Msg_Fuzz_) isClt_Msg_Msg()              {}
func (*Clt_Msg_Metrics_) isClt_Msg_Msg()           {}
func (*Clt_Msg_ResetProgress_) isClt_Msg_Msg()     {}
func (*Clt_Msg_CallRequestRaw_) isClt_Msg_Msg()    {}
func (*Clt_Msg_CallResponseRaw_) isClt_Msg_Msg()   {}
func (*Clt_Msg_CallVerifProgress_) isClt_Msg_Msg() {}

func (m *Clt_Msg) GetMsg() isClt_Msg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Clt_Msg) GetFuzz() *Clt_Msg_Fuzz {
	if x, ok := m.GetMsg().(*Clt_Msg_Fuzz_); ok {
		return x.Fuzz
	}
	return nil
}

func (m *Clt_Msg) GetMetrics() *Clt_Msg_Metrics {
	if x, ok := m.GetMsg().(*Clt_Msg_Metrics_); ok {
		return x.Metrics
	}
	return nil
}

func (m *Clt_Msg) GetResetProgress() *Clt_Msg_ResetProgress {
	if x, ok := m.GetMsg().(*Clt_Msg_ResetProgress_); ok {
		return x.ResetProgress
	}
	return nil
}

func (m *Clt_Msg) GetCallRequestRaw() *Clt_Msg_CallRequestRaw {
	if x, ok := m.GetMsg().(*Clt_Msg_CallRequestRaw_); ok {
		return x.CallRequestRaw
	}
	return nil
}

func (m *Clt_Msg) GetCallResponseRaw() *Clt_Msg_CallResponseRaw {
	if x, ok := m.GetMsg().(*Clt_Msg_CallResponseRaw_); ok {
		return x.CallResponseRaw
	}
	return nil
}

func (m *Clt_Msg) GetCallVerifProgress() *Clt_Msg_CallVerifProgress {
	if x, ok := m.GetMsg().(*Clt_Msg_CallVerifProgress_); ok {
		return x.CallVerifProgress
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_OneofMarshaler, _Clt_Msg_OneofUnmarshaler, _Clt_Msg_OneofSizer, []interface{}{
		(*Clt_Msg_Fuzz_)(nil),
		(*Clt_Msg_Metrics_)(nil),
		(*Clt_Msg_ResetProgress_)(nil),
		(*Clt_Msg_CallRequestRaw_)(nil),
		(*Clt_Msg_CallResponseRaw_)(nil),
		(*Clt_Msg_CallVerifProgress_)(nil),
	}
}

func _Clt_Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Clt_Msg_Fuzz_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fuzz); err != nil {
			return err
		}
	case *Clt_Msg_Metrics_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Metrics); err != nil {
			return err
		}
	case *Clt_Msg_ResetProgress_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetProgress); err != nil {
			return err
		}
	case *Clt_Msg_CallRequestRaw_:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallRequestRaw); err != nil {
			return err
		}
	case *Clt_Msg_CallResponseRaw_:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallResponseRaw); err != nil {
			return err
		}
	case *Clt_Msg_CallVerifProgress_:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallVerifProgress); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg.Msg has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg)
	switch tag {
	case 1: // msg.fuzz
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_Fuzz)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_Fuzz_{msg}
		return true, err
	case 2: // msg.metrics
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_Metrics)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_Metrics_{msg}
		return true, err
	case 3: // msg.reset_progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_ResetProgress)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_ResetProgress_{msg}
		return true, err
	case 4: // msg.call_request_raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallRequestRaw)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_CallRequestRaw_{msg}
		return true, err
	case 5: // msg.call_response_raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallResponseRaw)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_CallResponseRaw_{msg}
		return true, err
	case 6: // msg.call_verif_progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallVerifProgress)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_CallVerifProgress_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Clt_Msg_Fuzz_:
		s := proto.Size(x.Fuzz)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_Metrics_:
		s := proto.Size(x.Metrics)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_ResetProgress_:
		s := proto.Size(x.ResetProgress)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_CallRequestRaw_:
		s := proto.Size(x.CallRequestRaw)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_CallResponseRaw_:
		s := proto.Size(x.CallResponseRaw)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_CallVerifProgress_:
		s := proto.Size(x.CallVerifProgress)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_Fuzz struct {
	Resetter             *Clt_Msg_Fuzz_Resetter `protobuf:"bytes,1,opt,name=resetter" json:"resetter,omitempty"`
	ModelKind            Clt_Msg_Fuzz_ModelKind `protobuf:"varint,2,opt,name=model_kind,json=modelKind,proto3,enum=Clt_Msg_Fuzz_ModelKind" json:"model_kind,omitempty"`
	Model                *Clt_Msg_Fuzz_Model    `protobuf:"bytes,3,opt,name=model" json:"model,omitempty"`
	Usage                []string               `protobuf:"bytes,4,rep,name=usage" json:"usage,omitempty"`
	Seed                 []byte                 `protobuf:"bytes,5,opt,name=seed,proto3" json:"seed,omitempty"`
	Intensity            uint32                 `protobuf:"varint,6,opt,name=intensity,proto3" json:"intensity,omitempty"`
	EIDs                 []uint32               `protobuf:"varint,7,rep,packed,name=EIDs" json:"EIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Clt_Msg_Fuzz) Reset()         { *m = Clt_Msg_Fuzz{} }
func (m *Clt_Msg_Fuzz) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz) ProtoMessage()    {}
func (*Clt_Msg_Fuzz) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 0}
}
func (m *Clt_Msg_Fuzz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz proto.InternalMessageInfo

func (m *Clt_Msg_Fuzz) GetResetter() *Clt_Msg_Fuzz_Resetter {
	if m != nil {
		return m.Resetter
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetModelKind() Clt_Msg_Fuzz_ModelKind {
	if m != nil {
		return m.ModelKind
	}
	return Clt_Msg_Fuzz_UNKNOWN
}

func (m *Clt_Msg_Fuzz) GetModel() *Clt_Msg_Fuzz_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetUsage() []string {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetIntensity() uint32 {
	if m != nil {
		return m.Intensity
	}
	return 0
}

func (m *Clt_Msg_Fuzz) GetEIDs() []uint32 {
	if m != nil {
		return m.EIDs
	}
	return nil
}

type Clt_Msg_Fuzz_Resetter struct {
	// Types that are valid to be assigned to Resetter:
	//	*Clt_Msg_Fuzz_Resetter_Shell_
	Resetter             isClt_Msg_Fuzz_Resetter_Resetter `protobuf_oneof:"resetter"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *Clt_Msg_Fuzz_Resetter) Reset()         { *m = Clt_Msg_Fuzz_Resetter{} }
func (m *Clt_Msg_Fuzz_Resetter) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Resetter) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Resetter) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 0, 0}
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Resetter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Resetter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Resetter proto.InternalMessageInfo

type isClt_Msg_Fuzz_Resetter_Resetter interface {
	isClt_Msg_Fuzz_Resetter_Resetter()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_Fuzz_Resetter_Shell_ struct {
	Shell *Clt_Msg_Fuzz_Resetter_Shell `protobuf:"bytes,1,opt,name=shell,oneof"`
}

func (*Clt_Msg_Fuzz_Resetter_Shell_) isClt_Msg_Fuzz_Resetter_Resetter() {}

func (m *Clt_Msg_Fuzz_Resetter) GetResetter() isClt_Msg_Fuzz_Resetter_Resetter {
	if m != nil {
		return m.Resetter
	}
	return nil
}

func (m *Clt_Msg_Fuzz_Resetter) GetShell() *Clt_Msg_Fuzz_Resetter_Shell {
	if x, ok := m.GetResetter().(*Clt_Msg_Fuzz_Resetter_Shell_); ok {
		return x.Shell
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg_Fuzz_Resetter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_Fuzz_Resetter_OneofMarshaler, _Clt_Msg_Fuzz_Resetter_OneofUnmarshaler, _Clt_Msg_Fuzz_Resetter_OneofSizer, []interface{}{
		(*Clt_Msg_Fuzz_Resetter_Shell_)(nil),
	}
}

func _Clt_Msg_Fuzz_Resetter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg_Fuzz_Resetter)
	// resetter
	switch x := m.Resetter.(type) {
	case *Clt_Msg_Fuzz_Resetter_Shell_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Shell); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg_Fuzz_Resetter.Resetter has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_Fuzz_Resetter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg_Fuzz_Resetter)
	switch tag {
	case 1: // resetter.shell
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_Fuzz_Resetter_Shell)
		err := b.DecodeMessage(msg)
		m.Resetter = &Clt_Msg_Fuzz_Resetter_Shell_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_Fuzz_Resetter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg_Fuzz_Resetter)
	// resetter
	switch x := m.Resetter.(type) {
	case *Clt_Msg_Fuzz_Resetter_Shell_:
		s := proto.Size(x.Shell)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_Fuzz_Resetter_Shell struct {
	Start                string   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Rst                  string   `protobuf:"bytes,2,opt,name=rst,proto3" json:"rst,omitempty"`
	Stop                 string   `protobuf:"bytes,3,opt,name=stop,proto3" json:"stop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_Fuzz_Resetter_Shell) Reset()         { *m = Clt_Msg_Fuzz_Resetter_Shell{} }
func (m *Clt_Msg_Fuzz_Resetter_Shell) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Resetter_Shell) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Resetter_Shell) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 0, 0, 0}
}
func (m *Clt_Msg_Fuzz_Resetter_Shell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Resetter_Shell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Resetter_Shell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Resetter_Shell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter_Shell.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Resetter_Shell) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Resetter_Shell) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter_Shell.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Resetter_Shell proto.InternalMessageInfo

func (m *Clt_Msg_Fuzz_Resetter_Shell) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Resetter_Shell) GetRst() string {
	if m != nil {
		return m.Rst
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Resetter_Shell) GetStop() string {
	if m != nil {
		return m.Stop
	}
	return ""
}

type Clt_Msg_Fuzz_Model struct {
	// Types that are valid to be assigned to Model:
	//	*Clt_Msg_Fuzz_Model_Openapiv3
	Model                isClt_Msg_Fuzz_Model_Model `protobuf_oneof:"model"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Clt_Msg_Fuzz_Model) Reset()         { *m = Clt_Msg_Fuzz_Model{} }
func (m *Clt_Msg_Fuzz_Model) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Model) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Model) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 0, 1}
}
func (m *Clt_Msg_Fuzz_Model) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Model) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Model.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Model) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Model.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Model) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Model) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Model.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Model proto.InternalMessageInfo

type isClt_Msg_Fuzz_Model_Model interface {
	isClt_Msg_Fuzz_Model_Model()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_Fuzz_Model_Openapiv3 struct {
	Openapiv3 *Clt_Msg_Fuzz_Model_OpenAPIv3 `protobuf:"bytes,1,opt,name=openapiv3,oneof"`
}

func (*Clt_Msg_Fuzz_Model_Openapiv3) isClt_Msg_Fuzz_Model_Model() {}

func (m *Clt_Msg_Fuzz_Model) GetModel() isClt_Msg_Fuzz_Model_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Clt_Msg_Fuzz_Model) GetOpenapiv3() *Clt_Msg_Fuzz_Model_OpenAPIv3 {
	if x, ok := m.GetModel().(*Clt_Msg_Fuzz_Model_Openapiv3); ok {
		return x.Openapiv3
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg_Fuzz_Model) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_Fuzz_Model_OneofMarshaler, _Clt_Msg_Fuzz_Model_OneofUnmarshaler, _Clt_Msg_Fuzz_Model_OneofSizer, []interface{}{
		(*Clt_Msg_Fuzz_Model_Openapiv3)(nil),
	}
}

func _Clt_Msg_Fuzz_Model_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg_Fuzz_Model)
	// model
	switch x := m.Model.(type) {
	case *Clt_Msg_Fuzz_Model_Openapiv3:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Openapiv3); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg_Fuzz_Model.Model has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_Fuzz_Model_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg_Fuzz_Model)
	switch tag {
	case 1: // model.openapiv3
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_Fuzz_Model_OpenAPIv3)
		err := b.DecodeMessage(msg)
		m.Model = &Clt_Msg_Fuzz_Model_Openapiv3{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_Fuzz_Model_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg_Fuzz_Model)
	// model
	switch x := m.Model.(type) {
	case *Clt_Msg_Fuzz_Model_Openapiv3:
		s := proto.Size(x.Openapiv3)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_Fuzz_Model_OpenAPIv3 struct {
	// File is a path within current directory pointing to a YAML spec
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// Host superseeds the spec's base URL
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// HeaderAuthorization if non-empty is added to requests as bearer token
	HeaderAuthorization  string   `protobuf:"bytes,3,opt,name=header_authorization,json=headerAuthorization,proto3" json:"header_authorization,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Reset()         { *m = Clt_Msg_Fuzz_Model_OpenAPIv3{} }
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Model_OpenAPIv3) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Model_OpenAPIv3) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 0, 1, 0}
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3 proto.InternalMessageInfo

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) GetHeaderAuthorization() string {
	if m != nil {
		return m.HeaderAuthorization
	}
	return ""
}

type Clt_Msg_Metrics struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_Metrics) Reset()         { *m = Clt_Msg_Metrics{} }
func (m *Clt_Msg_Metrics) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Metrics) ProtoMessage()    {}
func (*Clt_Msg_Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 1}
}
func (m *Clt_Msg_Metrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Metrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Metrics.Merge(dst, src)
}
func (m *Clt_Msg_Metrics) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Metrics proto.InternalMessageInfo

type Clt_Msg_ResetProgress struct {
	Status               Clt_Msg_ResetProgress_Status `protobuf:"varint,1,opt,name=status,proto3,enum=Clt_Msg_ResetProgress_Status" json:"status,omitempty"`
	TsDiff               uint64                       `protobuf:"varint,2,opt,name=ts_diff,json=tsDiff,proto3" json:"ts_diff,omitempty"`
	Reason               []string                     `protobuf:"bytes,3,rep,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Clt_Msg_ResetProgress) Reset()         { *m = Clt_Msg_ResetProgress{} }
func (m *Clt_Msg_ResetProgress) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_ResetProgress) ProtoMessage()    {}
func (*Clt_Msg_ResetProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 2}
}
func (m *Clt_Msg_ResetProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_ResetProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_ResetProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_ResetProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_ResetProgress.Merge(dst, src)
}
func (m *Clt_Msg_ResetProgress) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_ResetProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_ResetProgress.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_ResetProgress proto.InternalMessageInfo

func (m *Clt_Msg_ResetProgress) GetStatus() Clt_Msg_ResetProgress_Status {
	if m != nil {
		return m.Status
	}
	return Clt_Msg_ResetProgress_NOOP
}

func (m *Clt_Msg_ResetProgress) GetTsDiff() uint64 {
	if m != nil {
		return m.TsDiff
	}
	return 0
}

func (m *Clt_Msg_ResetProgress) GetReason() []string {
	if m != nil {
		return m.Reason
	}
	return nil
}

type Clt_Msg_CallRequestRaw struct {
	Input                *Clt_Msg_CallRequestRaw_Input `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Clt_Msg_CallRequestRaw) Reset()         { *m = Clt_Msg_CallRequestRaw{} }
func (m *Clt_Msg_CallRequestRaw) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallRequestRaw) ProtoMessage()    {}
func (*Clt_Msg_CallRequestRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 3}
}
func (m *Clt_Msg_CallRequestRaw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallRequestRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallRequestRaw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallRequestRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallRequestRaw.Merge(dst, src)
}
func (m *Clt_Msg_CallRequestRaw) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallRequestRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallRequestRaw.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallRequestRaw proto.InternalMessageInfo

func (m *Clt_Msg_CallRequestRaw) GetInput() *Clt_Msg_CallRequestRaw_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

type Clt_Msg_CallRequestRaw_Input struct {
	// Types that are valid to be assigned to Input:
	//	*Clt_Msg_CallRequestRaw_Input_HttpRequest_
	Input                isClt_Msg_CallRequestRaw_Input_Input `protobuf_oneof:"input"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *Clt_Msg_CallRequestRaw_Input) Reset()         { *m = Clt_Msg_CallRequestRaw_Input{} }
func (m *Clt_Msg_CallRequestRaw_Input) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallRequestRaw_Input) ProtoMessage()    {}
func (*Clt_Msg_CallRequestRaw_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 3, 0}
}
func (m *Clt_Msg_CallRequestRaw_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallRequestRaw_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallRequestRaw_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallRequestRaw_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallRequestRaw_Input.Merge(dst, src)
}
func (m *Clt_Msg_CallRequestRaw_Input) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallRequestRaw_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallRequestRaw_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallRequestRaw_Input proto.InternalMessageInfo

type isClt_Msg_CallRequestRaw_Input_Input interface {
	isClt_Msg_CallRequestRaw_Input_Input()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_CallRequestRaw_Input_HttpRequest_ struct {
	HttpRequest *Clt_Msg_CallRequestRaw_Input_HttpRequest `protobuf:"bytes,1,opt,name=http_request,json=httpRequest,oneof"`
}

func (*Clt_Msg_CallRequestRaw_Input_HttpRequest_) isClt_Msg_CallRequestRaw_Input_Input() {}

func (m *Clt_Msg_CallRequestRaw_Input) GetInput() isClt_Msg_CallRequestRaw_Input_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Clt_Msg_CallRequestRaw_Input) GetHttpRequest() *Clt_Msg_CallRequestRaw_Input_HttpRequest {
	if x, ok := m.GetInput().(*Clt_Msg_CallRequestRaw_Input_HttpRequest_); ok {
		return x.HttpRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg_CallRequestRaw_Input) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_CallRequestRaw_Input_OneofMarshaler, _Clt_Msg_CallRequestRaw_Input_OneofUnmarshaler, _Clt_Msg_CallRequestRaw_Input_OneofSizer, []interface{}{
		(*Clt_Msg_CallRequestRaw_Input_HttpRequest_)(nil),
	}
}

func _Clt_Msg_CallRequestRaw_Input_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg_CallRequestRaw_Input)
	// input
	switch x := m.Input.(type) {
	case *Clt_Msg_CallRequestRaw_Input_HttpRequest_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg_CallRequestRaw_Input.Input has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_CallRequestRaw_Input_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg_CallRequestRaw_Input)
	switch tag {
	case 1: // input.http_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallRequestRaw_Input_HttpRequest)
		err := b.DecodeMessage(msg)
		m.Input = &Clt_Msg_CallRequestRaw_Input_HttpRequest_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_CallRequestRaw_Input_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg_CallRequestRaw_Input)
	// input
	switch x := m.Input.(type) {
	case *Clt_Msg_CallRequestRaw_Input_HttpRequest_:
		s := proto.Size(x.HttpRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_CallRequestRaw_Input_HttpRequest struct {
	Method               string                                                            `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Url                  string                                                            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Headers              map[string]*Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Body                 []byte                                                            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                          `json:"-"`
	XXX_unrecognized     []byte                                                            `json:"-"`
	XXX_sizecache        int32                                                             `json:"-"`
}

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) Reset() {
	*m = Clt_Msg_CallRequestRaw_Input_HttpRequest{}
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallRequestRaw_Input_HttpRequest) ProtoMessage()    {}
func (*Clt_Msg_CallRequestRaw_Input_HttpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 3, 0, 0}
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallRequestRaw_Input_HttpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallRequestRaw_Input_HttpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallRequestRaw_Input_HttpRequest.Merge(dst, src)
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallRequestRaw_Input_HttpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallRequestRaw_Input_HttpRequest proto.InternalMessageInfo

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) GetHeaders() map[string]*Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues struct {
	Values               []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) Reset() {
	*m = Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues{}
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) String() string {
	return proto.CompactTextString(m)
}
func (*Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) ProtoMessage() {}
func (*Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 3, 0, 0, 0}
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues.Merge(dst, src)
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues proto.InternalMessageInfo

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Clt_Msg_CallResponseRaw struct {
	Output               *Clt_Msg_CallResponseRaw_Output `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *Clt_Msg_CallResponseRaw) Reset()         { *m = Clt_Msg_CallResponseRaw{} }
func (m *Clt_Msg_CallResponseRaw) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallResponseRaw) ProtoMessage()    {}
func (*Clt_Msg_CallResponseRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 4}
}
func (m *Clt_Msg_CallResponseRaw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallResponseRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallResponseRaw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallResponseRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallResponseRaw.Merge(dst, src)
}
func (m *Clt_Msg_CallResponseRaw) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallResponseRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallResponseRaw.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallResponseRaw proto.InternalMessageInfo

func (m *Clt_Msg_CallResponseRaw) GetOutput() *Clt_Msg_CallResponseRaw_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

type Clt_Msg_CallResponseRaw_Output struct {
	// Types that are valid to be assigned to Output:
	//	*Clt_Msg_CallResponseRaw_Output_HttpResponse_
	Output               isClt_Msg_CallResponseRaw_Output_Output `protobuf_oneof:"output"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *Clt_Msg_CallResponseRaw_Output) Reset()         { *m = Clt_Msg_CallResponseRaw_Output{} }
func (m *Clt_Msg_CallResponseRaw_Output) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallResponseRaw_Output) ProtoMessage()    {}
func (*Clt_Msg_CallResponseRaw_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 4, 0}
}
func (m *Clt_Msg_CallResponseRaw_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallResponseRaw_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallResponseRaw_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallResponseRaw_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallResponseRaw_Output.Merge(dst, src)
}
func (m *Clt_Msg_CallResponseRaw_Output) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallResponseRaw_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallResponseRaw_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallResponseRaw_Output proto.InternalMessageInfo

type isClt_Msg_CallResponseRaw_Output_Output interface {
	isClt_Msg_CallResponseRaw_Output_Output()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_CallResponseRaw_Output_HttpResponse_ struct {
	HttpResponse *Clt_Msg_CallResponseRaw_Output_HttpResponse `protobuf:"bytes,1,opt,name=http_response,json=httpResponse,oneof"`
}

func (*Clt_Msg_CallResponseRaw_Output_HttpResponse_) isClt_Msg_CallResponseRaw_Output_Output() {}

func (m *Clt_Msg_CallResponseRaw_Output) GetOutput() isClt_Msg_CallResponseRaw_Output_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Clt_Msg_CallResponseRaw_Output) GetHttpResponse() *Clt_Msg_CallResponseRaw_Output_HttpResponse {
	if x, ok := m.GetOutput().(*Clt_Msg_CallResponseRaw_Output_HttpResponse_); ok {
		return x.HttpResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg_CallResponseRaw_Output) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_CallResponseRaw_Output_OneofMarshaler, _Clt_Msg_CallResponseRaw_Output_OneofUnmarshaler, _Clt_Msg_CallResponseRaw_Output_OneofSizer, []interface{}{
		(*Clt_Msg_CallResponseRaw_Output_HttpResponse_)(nil),
	}
}

func _Clt_Msg_CallResponseRaw_Output_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg_CallResponseRaw_Output)
	// output
	switch x := m.Output.(type) {
	case *Clt_Msg_CallResponseRaw_Output_HttpResponse_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg_CallResponseRaw_Output.Output has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_CallResponseRaw_Output_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg_CallResponseRaw_Output)
	switch tag {
	case 1: // output.http_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallResponseRaw_Output_HttpResponse)
		err := b.DecodeMessage(msg)
		m.Output = &Clt_Msg_CallResponseRaw_Output_HttpResponse_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_CallResponseRaw_Output_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg_CallResponseRaw_Output)
	// output
	switch x := m.Output.(type) {
	case *Clt_Msg_CallResponseRaw_Output_HttpResponse_:
		s := proto.Size(x.HttpResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_CallResponseRaw_Output_HttpResponse struct {
	Error                string                                                               `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	StatusCode           uint32                                                               `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Reason               string                                                               `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Headers              map[string]*Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues `protobuf:"bytes,4,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Body                 []byte                                                               `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Elapsed              uint32                                                               `protobuf:"varint,6,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                             `json:"-"`
	XXX_unrecognized     []byte                                                               `json:"-"`
	XXX_sizecache        int32                                                                `json:"-"`
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) Reset() {
	*m = Clt_Msg_CallResponseRaw_Output_HttpResponse{}
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) String() string {
	return proto.CompactTextString(m)
}
func (*Clt_Msg_CallResponseRaw_Output_HttpResponse) ProtoMessage() {}
func (*Clt_Msg_CallResponseRaw_Output_HttpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 4, 0, 0}
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallResponseRaw_Output_HttpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallResponseRaw_Output_HttpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallResponseRaw_Output_HttpResponse.Merge(dst, src)
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallResponseRaw_Output_HttpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallResponseRaw_Output_HttpResponse proto.InternalMessageInfo

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) GetHeaders() map[string]*Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) GetElapsed() uint32 {
	if m != nil {
		return m.Elapsed
	}
	return 0
}

type Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues struct {
	Values               []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) Reset() {
	*m = Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues{}
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) String() string {
	return proto.CompactTextString(m)
}
func (*Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) ProtoMessage() {}
func (*Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 4, 0, 0, 0}
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues.Merge(dst, src)
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues proto.InternalMessageInfo

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Clt_Msg_CallVerifProgress struct {
	Status               Clt_Msg_CallVerifProgress_Status `protobuf:"varint,1,opt,name=status,proto3,enum=Clt_Msg_CallVerifProgress_Status" json:"status,omitempty"`
	Name                 string                           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Reason               []string                         `protobuf:"bytes,3,rep,name=reason" json:"reason,omitempty"`
	Response             *types.Struct                    `protobuf:"bytes,4,opt,name=response" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *Clt_Msg_CallVerifProgress) Reset()         { *m = Clt_Msg_CallVerifProgress{} }
func (m *Clt_Msg_CallVerifProgress) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallVerifProgress) ProtoMessage()    {}
func (*Clt_Msg_CallVerifProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{0, 0, 5}
}
func (m *Clt_Msg_CallVerifProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallVerifProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallVerifProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallVerifProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallVerifProgress.Merge(dst, src)
}
func (m *Clt_Msg_CallVerifProgress) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallVerifProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallVerifProgress.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallVerifProgress proto.InternalMessageInfo

func (m *Clt_Msg_CallVerifProgress) GetStatus() Clt_Msg_CallVerifProgress_Status {
	if m != nil {
		return m.Status
	}
	return Clt_Msg_CallVerifProgress_done
}

func (m *Clt_Msg_CallVerifProgress) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Clt_Msg_CallVerifProgress) GetReason() []string {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (m *Clt_Msg_CallVerifProgress) GetResponse() *types.Struct {
	if m != nil {
		return m.Response
	}
	return nil
}

type Srv struct {
	Msg                  *Srv_Msg `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Srv) Reset()         { *m = Srv{} }
func (m *Srv) String() string { return proto.CompactTextString(m) }
func (*Srv) ProtoMessage()    {}
func (*Srv) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{1}
}
func (m *Srv) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv.Merge(dst, src)
}
func (m *Srv) XXX_Size() int {
	return m.Size()
}
func (m *Srv) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv.DiscardUnknown(m)
}

var xxx_messageInfo_Srv proto.InternalMessageInfo

func (m *Srv) GetMsg() *Srv_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Srv_Msg struct {
	// Types that are valid to be assigned to Msg:
	//	*Srv_Msg_Call_
	//	*Srv_Msg_FuzzProgress_
	//	*Srv_Msg_Reset_
	Msg                  isSrv_Msg_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Srv_Msg) Reset()         { *m = Srv_Msg{} }
func (m *Srv_Msg) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg) ProtoMessage()    {}
func (*Srv_Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{1, 0}
}
func (m *Srv_Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg.Merge(dst, src)
}
func (m *Srv_Msg) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg proto.InternalMessageInfo

type isSrv_Msg_Msg interface {
	isSrv_Msg_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Srv_Msg_Call_ struct {
	Call *Srv_Msg_Call `protobuf:"bytes,1,opt,name=call,oneof"`
}
type Srv_Msg_FuzzProgress_ struct {
	FuzzProgress *Srv_Msg_FuzzProgress `protobuf:"bytes,2,opt,name=fuzz_progress,json=fuzzProgress,oneof"`
}
type Srv_Msg_Reset_ struct {
	Reset_ *Srv_Msg_Reset `protobuf:"bytes,3,opt,name=reset,oneof"`
}

func (*Srv_Msg_Call_) isSrv_Msg_Msg()         {}
func (*Srv_Msg_FuzzProgress_) isSrv_Msg_Msg() {}
func (*Srv_Msg_Reset_) isSrv_Msg_Msg()        {}

func (m *Srv_Msg) GetMsg() isSrv_Msg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Srv_Msg) GetCall() *Srv_Msg_Call {
	if x, ok := m.GetMsg().(*Srv_Msg_Call_); ok {
		return x.Call
	}
	return nil
}

func (m *Srv_Msg) GetFuzzProgress() *Srv_Msg_FuzzProgress {
	if x, ok := m.GetMsg().(*Srv_Msg_FuzzProgress_); ok {
		return x.FuzzProgress
	}
	return nil
}

func (m *Srv_Msg) GetReset_() *Srv_Msg_Reset {
	if x, ok := m.GetMsg().(*Srv_Msg_Reset_); ok {
		return x.Reset_
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Srv_Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Srv_Msg_OneofMarshaler, _Srv_Msg_OneofUnmarshaler, _Srv_Msg_OneofSizer, []interface{}{
		(*Srv_Msg_Call_)(nil),
		(*Srv_Msg_FuzzProgress_)(nil),
		(*Srv_Msg_Reset_)(nil),
	}
}

func _Srv_Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Srv_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Srv_Msg_Call_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Call); err != nil {
			return err
		}
	case *Srv_Msg_FuzzProgress_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FuzzProgress); err != nil {
			return err
		}
	case *Srv_Msg_Reset_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reset_); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Srv_Msg.Msg has unexpected type %T", x)
	}
	return nil
}

func _Srv_Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Srv_Msg)
	switch tag {
	case 1: // msg.call
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Srv_Msg_Call)
		err := b.DecodeMessage(msg)
		m.Msg = &Srv_Msg_Call_{msg}
		return true, err
	case 2: // msg.fuzz_progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Srv_Msg_FuzzProgress)
		err := b.DecodeMessage(msg)
		m.Msg = &Srv_Msg_FuzzProgress_{msg}
		return true, err
	case 3: // msg.reset
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Srv_Msg_Reset)
		err := b.DecodeMessage(msg)
		m.Msg = &Srv_Msg_Reset_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Srv_Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Srv_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Srv_Msg_Call_:
		s := proto.Size(x.Call)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Srv_Msg_FuzzProgress_:
		s := proto.Size(x.FuzzProgress)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Srv_Msg_Reset_:
		s := proto.Size(x.Reset_)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Srv_Msg_Call struct {
	Input                *Srv_Msg_Call_Input `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
	EId                  uint32              `protobuf:"varint,2,opt,name=eId,proto3" json:"eId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Srv_Msg_Call) Reset()         { *m = Srv_Msg_Call{} }
func (m *Srv_Msg_Call) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg_Call) ProtoMessage()    {}
func (*Srv_Msg_Call) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{1, 0, 0}
}
func (m *Srv_Msg_Call) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Call) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Call.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Call) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Call.Merge(dst, src)
}
func (m *Srv_Msg_Call) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Call) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Call.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Call proto.InternalMessageInfo

func (m *Srv_Msg_Call) GetInput() *Srv_Msg_Call_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Srv_Msg_Call) GetEId() uint32 {
	if m != nil {
		return m.EId
	}
	return 0
}

type Srv_Msg_Call_Input struct {
	// Types that are valid to be assigned to Input:
	//	*Srv_Msg_Call_Input_HttpRequest_
	Input                isSrv_Msg_Call_Input_Input `protobuf_oneof:"input"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Srv_Msg_Call_Input) Reset()         { *m = Srv_Msg_Call_Input{} }
func (m *Srv_Msg_Call_Input) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg_Call_Input) ProtoMessage()    {}
func (*Srv_Msg_Call_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{1, 0, 0, 0}
}
func (m *Srv_Msg_Call_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Call_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Call_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Call_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Call_Input.Merge(dst, src)
}
func (m *Srv_Msg_Call_Input) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Call_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Call_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Call_Input proto.InternalMessageInfo

type isSrv_Msg_Call_Input_Input interface {
	isSrv_Msg_Call_Input_Input()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Srv_Msg_Call_Input_HttpRequest_ struct {
	HttpRequest *Srv_Msg_Call_Input_HttpRequest `protobuf:"bytes,1,opt,name=http_request,json=httpRequest,oneof"`
}

func (*Srv_Msg_Call_Input_HttpRequest_) isSrv_Msg_Call_Input_Input() {}

func (m *Srv_Msg_Call_Input) GetInput() isSrv_Msg_Call_Input_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Srv_Msg_Call_Input) GetHttpRequest() *Srv_Msg_Call_Input_HttpRequest {
	if x, ok := m.GetInput().(*Srv_Msg_Call_Input_HttpRequest_); ok {
		return x.HttpRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Srv_Msg_Call_Input) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Srv_Msg_Call_Input_OneofMarshaler, _Srv_Msg_Call_Input_OneofUnmarshaler, _Srv_Msg_Call_Input_OneofSizer, []interface{}{
		(*Srv_Msg_Call_Input_HttpRequest_)(nil),
	}
}

func _Srv_Msg_Call_Input_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Srv_Msg_Call_Input)
	// input
	switch x := m.Input.(type) {
	case *Srv_Msg_Call_Input_HttpRequest_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Srv_Msg_Call_Input.Input has unexpected type %T", x)
	}
	return nil
}

func _Srv_Msg_Call_Input_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Srv_Msg_Call_Input)
	switch tag {
	case 1: // input.http_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Srv_Msg_Call_Input_HttpRequest)
		err := b.DecodeMessage(msg)
		m.Input = &Srv_Msg_Call_Input_HttpRequest_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Srv_Msg_Call_Input_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Srv_Msg_Call_Input)
	// input
	switch x := m.Input.(type) {
	case *Srv_Msg_Call_Input_HttpRequest_:
		s := proto.Size(x.HttpRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Srv_Msg_Call_Input_HttpRequest struct {
	Method               string                                                  `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Url                  string                                                  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Headers              map[string]*Srv_Msg_Call_Input_HttpRequest_HeaderValues `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Body                 []byte                                                  `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *Srv_Msg_Call_Input_HttpRequest) Reset()         { *m = Srv_Msg_Call_Input_HttpRequest{} }
func (m *Srv_Msg_Call_Input_HttpRequest) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg_Call_Input_HttpRequest) ProtoMessage()    {}
func (*Srv_Msg_Call_Input_HttpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{1, 0, 0, 0, 0}
}
func (m *Srv_Msg_Call_Input_HttpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Call_Input_HttpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Call_Input_HttpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest.Merge(dst, src)
}
func (m *Srv_Msg_Call_Input_HttpRequest) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Call_Input_HttpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest proto.InternalMessageInfo

func (m *Srv_Msg_Call_Input_HttpRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Srv_Msg_Call_Input_HttpRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Srv_Msg_Call_Input_HttpRequest) GetHeaders() map[string]*Srv_Msg_Call_Input_HttpRequest_HeaderValues {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Srv_Msg_Call_Input_HttpRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Srv_Msg_Call_Input_HttpRequest_HeaderValues struct {
	Values               []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) Reset() {
	*m = Srv_Msg_Call_Input_HttpRequest_HeaderValues{}
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) String() string {
	return proto.CompactTextString(m)
}
func (*Srv_Msg_Call_Input_HttpRequest_HeaderValues) ProtoMessage() {}
func (*Srv_Msg_Call_Input_HttpRequest_HeaderValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{1, 0, 0, 0, 0, 0}
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest_HeaderValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Call_Input_HttpRequest_HeaderValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest_HeaderValues.Merge(dst, src)
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest_HeaderValues.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest_HeaderValues proto.InternalMessageInfo

func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Srv_Msg_Reset struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Srv_Msg_Reset) Reset()         { *m = Srv_Msg_Reset{} }
func (m *Srv_Msg_Reset) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg_Reset) ProtoMessage()    {}
func (*Srv_Msg_Reset) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{1, 0, 1}
}
func (m *Srv_Msg_Reset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Reset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Reset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Reset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Reset.Merge(dst, src)
}
func (m *Srv_Msg_Reset) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Reset) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Reset.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Reset proto.InternalMessageInfo

type Srv_Msg_FuzzProgress struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Srv_Msg_FuzzProgress) Reset()         { *m = Srv_Msg_FuzzProgress{} }
func (m *Srv_Msg_FuzzProgress) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg_FuzzProgress) ProtoMessage()    {}
func (*Srv_Msg_FuzzProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{1, 0, 2}
}
func (m *Srv_Msg_FuzzProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_FuzzProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_FuzzProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_FuzzProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_FuzzProgress.Merge(dst, src)
}
func (m *Srv_Msg_FuzzProgress) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_FuzzProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_FuzzProgress.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_FuzzProgress proto.InternalMessageInfo

type SpecIR struct {
	Schemas *Schemas `protobuf:"bytes,1,opt,name=schemas" json:"schemas,omitempty"`
	// All endpoints are here.
	// Start at 1 then increases monotonously. 0 (zero) is reserved for bug finding.
	Endpoints            map[uint32]*Endpoint `protobuf:"bytes,2,rep,name=endpoints" json:"endpoints,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SpecIR) Reset()         { *m = SpecIR{} }
func (m *SpecIR) String() string { return proto.CompactTextString(m) }
func (*SpecIR) ProtoMessage()    {}
func (*SpecIR) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{2}
}
func (m *SpecIR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecIR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecIR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SpecIR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecIR.Merge(dst, src)
}
func (m *SpecIR) XXX_Size() int {
	return m.Size()
}
func (m *SpecIR) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecIR.DiscardUnknown(m)
}

var xxx_messageInfo_SpecIR proto.InternalMessageInfo

func (m *SpecIR) GetSchemas() *Schemas {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *SpecIR) GetEndpoints() map[uint32]*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type Schemas struct {
	// All schemas are here.
	// Start at 1. 0 (zero) is reserved for bug finding.
	Json                 map[uint32]*RefOrSchemaJSON `protobuf:"bytes,1,rep,name=json" json:"json,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Schemas) Reset()         { *m = Schemas{} }
func (m *Schemas) String() string { return proto.CompactTextString(m) }
func (*Schemas) ProtoMessage()    {}
func (*Schemas) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{3}
}
func (m *Schemas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Schemas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Schemas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Schemas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schemas.Merge(dst, src)
}
func (m *Schemas) XXX_Size() int {
	return m.Size()
}
func (m *Schemas) XXX_DiscardUnknown() {
	xxx_messageInfo_Schemas.DiscardUnknown(m)
}

var xxx_messageInfo_Schemas proto.InternalMessageInfo

func (m *Schemas) GetJson() map[uint32]*RefOrSchemaJSON {
	if m != nil {
		return m.Json
	}
	return nil
}

type RefOrSchemaJSON struct {
	// Types that are valid to be assigned to PtrOrSchema:
	//	*RefOrSchemaJSON_Ptr
	//	*RefOrSchemaJSON_Schema
	PtrOrSchema          isRefOrSchemaJSON_PtrOrSchema `protobuf_oneof:"ptr_or_schema"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *RefOrSchemaJSON) Reset()         { *m = RefOrSchemaJSON{} }
func (m *RefOrSchemaJSON) String() string { return proto.CompactTextString(m) }
func (*RefOrSchemaJSON) ProtoMessage()    {}
func (*RefOrSchemaJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{4}
}
func (m *RefOrSchemaJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefOrSchemaJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefOrSchemaJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RefOrSchemaJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefOrSchemaJSON.Merge(dst, src)
}
func (m *RefOrSchemaJSON) XXX_Size() int {
	return m.Size()
}
func (m *RefOrSchemaJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_RefOrSchemaJSON.DiscardUnknown(m)
}

var xxx_messageInfo_RefOrSchemaJSON proto.InternalMessageInfo

type isRefOrSchemaJSON_PtrOrSchema interface {
	isRefOrSchemaJSON_PtrOrSchema()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RefOrSchemaJSON_Ptr struct {
	Ptr *SchemaPtr `protobuf:"bytes,1,opt,name=ptr,oneof"`
}
type RefOrSchemaJSON_Schema struct {
	Schema *Schema_JSON `protobuf:"bytes,2,opt,name=schema,oneof"`
}

func (*RefOrSchemaJSON_Ptr) isRefOrSchemaJSON_PtrOrSchema()    {}
func (*RefOrSchemaJSON_Schema) isRefOrSchemaJSON_PtrOrSchema() {}

func (m *RefOrSchemaJSON) GetPtrOrSchema() isRefOrSchemaJSON_PtrOrSchema {
	if m != nil {
		return m.PtrOrSchema
	}
	return nil
}

func (m *RefOrSchemaJSON) GetPtr() *SchemaPtr {
	if x, ok := m.GetPtrOrSchema().(*RefOrSchemaJSON_Ptr); ok {
		return x.Ptr
	}
	return nil
}

func (m *RefOrSchemaJSON) GetSchema() *Schema_JSON {
	if x, ok := m.GetPtrOrSchema().(*RefOrSchemaJSON_Schema); ok {
		return x.Schema
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RefOrSchemaJSON) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RefOrSchemaJSON_OneofMarshaler, _RefOrSchemaJSON_OneofUnmarshaler, _RefOrSchemaJSON_OneofSizer, []interface{}{
		(*RefOrSchemaJSON_Ptr)(nil),
		(*RefOrSchemaJSON_Schema)(nil),
	}
}

func _RefOrSchemaJSON_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RefOrSchemaJSON)
	// ptr_or_schema
	switch x := m.PtrOrSchema.(type) {
	case *RefOrSchemaJSON_Ptr:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ptr); err != nil {
			return err
		}
	case *RefOrSchemaJSON_Schema:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Schema); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RefOrSchemaJSON.PtrOrSchema has unexpected type %T", x)
	}
	return nil
}

func _RefOrSchemaJSON_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RefOrSchemaJSON)
	switch tag {
	case 1: // ptr_or_schema.ptr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SchemaPtr)
		err := b.DecodeMessage(msg)
		m.PtrOrSchema = &RefOrSchemaJSON_Ptr{msg}
		return true, err
	case 2: // ptr_or_schema.schema
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Schema_JSON)
		err := b.DecodeMessage(msg)
		m.PtrOrSchema = &RefOrSchemaJSON_Schema{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RefOrSchemaJSON_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RefOrSchemaJSON)
	// ptr_or_schema
	switch x := m.PtrOrSchema.(type) {
	case *RefOrSchemaJSON_Ptr:
		s := proto.Size(x.Ptr)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RefOrSchemaJSON_Schema:
		s := proto.Size(x.Schema)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SchemaPtr struct {
	// Pointer to actual schema. i.e. key in Schemas message.
	SID uint32 `protobuf:"varint,1,opt,name=SID,proto3" json:"SID,omitempty"`
	// $ref if was ref'd, in canonical/absolute (#/...-like) format.
	Ref                  string   `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaPtr) Reset()         { *m = SchemaPtr{} }
func (m *SchemaPtr) String() string { return proto.CompactTextString(m) }
func (*SchemaPtr) ProtoMessage()    {}
func (*SchemaPtr) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{5}
}
func (m *SchemaPtr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaPtr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaPtr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SchemaPtr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaPtr.Merge(dst, src)
}
func (m *SchemaPtr) XXX_Size() int {
	return m.Size()
}
func (m *SchemaPtr) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaPtr.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaPtr proto.InternalMessageInfo

func (m *SchemaPtr) GetSID() uint32 {
	if m != nil {
		return m.SID
	}
	return 0
}

func (m *SchemaPtr) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

type Endpoint struct {
	// Types that are valid to be assigned to Endpoint:
	//	*Endpoint_Json
	Endpoint             isEndpoint_Endpoint `protobuf_oneof:"endpoint"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Endpoint) Reset()         { *m = Endpoint{} }
func (m *Endpoint) String() string { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()    {}
func (*Endpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{6}
}
func (m *Endpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Endpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Endpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Endpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Endpoint.Merge(dst, src)
}
func (m *Endpoint) XXX_Size() int {
	return m.Size()
}
func (m *Endpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Endpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Endpoint proto.InternalMessageInfo

type isEndpoint_Endpoint interface {
	isEndpoint_Endpoint()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Endpoint_Json struct {
	Json *EndpointJSON `protobuf:"bytes,1,opt,name=json,oneof"`
}

func (*Endpoint_Json) isEndpoint_Endpoint() {}

func (m *Endpoint) GetEndpoint() isEndpoint_Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *Endpoint) GetJson() *EndpointJSON {
	if x, ok := m.GetEndpoint().(*Endpoint_Json); ok {
		return x.Json
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Endpoint) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Endpoint_OneofMarshaler, _Endpoint_OneofUnmarshaler, _Endpoint_OneofSizer, []interface{}{
		(*Endpoint_Json)(nil),
	}
}

func _Endpoint_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Endpoint)
	// endpoint
	switch x := m.Endpoint.(type) {
	case *Endpoint_Json:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Json); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Endpoint.Endpoint has unexpected type %T", x)
	}
	return nil
}

func _Endpoint_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Endpoint)
	switch tag {
	case 1: // endpoint.json
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EndpointJSON)
		err := b.DecodeMessage(msg)
		m.Endpoint = &Endpoint_Json{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Endpoint_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Endpoint)
	// endpoint
	switch x := m.Endpoint.(type) {
	case *Endpoint_Json:
		s := proto.Size(x.Json)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EndpointJSON struct {
	Method       EndpointJSON_Method `protobuf:"varint,1,opt,name=method,proto3,enum=EndpointJSON_Method" json:"method,omitempty"`
	PathPartials []*PathPartial      `protobuf:"bytes,2,rep,name=path_partials,json=pathPartials" json:"path_partials,omitempty"`
	Inputs       []*ParamJSON        `protobuf:"bytes,3,rep,name=inputs" json:"inputs,omitempty"`
	// The uint32 key replaces an enum of 1XX,...,201,204,...,5XX,XXX.
	// The uint32 values are SID
	Outputs              map[uint32]uint32 `protobuf:"bytes,4,rep,name=outputs" json:"outputs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EndpointJSON) Reset()         { *m = EndpointJSON{} }
func (m *EndpointJSON) String() string { return proto.CompactTextString(m) }
func (*EndpointJSON) ProtoMessage()    {}
func (*EndpointJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{7}
}
func (m *EndpointJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndpointJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EndpointJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointJSON.Merge(dst, src)
}
func (m *EndpointJSON) XXX_Size() int {
	return m.Size()
}
func (m *EndpointJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointJSON.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointJSON proto.InternalMessageInfo

func (m *EndpointJSON) GetMethod() EndpointJSON_Method {
	if m != nil {
		return m.Method
	}
	return EndpointJSON_UNKNOWN
}

func (m *EndpointJSON) GetPathPartials() []*PathPartial {
	if m != nil {
		return m.PathPartials
	}
	return nil
}

func (m *EndpointJSON) GetInputs() []*ParamJSON {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *EndpointJSON) GetOutputs() map[uint32]uint32 {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type ParamJSON struct {
	IsRequired bool   `protobuf:"varint,1,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	SID        uint32 `protobuf:"varint,2,opt,name=SID,proto3" json:"SID,omitempty"`
	// Note: bodies have an empty name
	Name                 string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 ParamJSON_Kind `protobuf:"varint,4,opt,name=kind,proto3,enum=ParamJSON_Kind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ParamJSON) Reset()         { *m = ParamJSON{} }
func (m *ParamJSON) String() string { return proto.CompactTextString(m) }
func (*ParamJSON) ProtoMessage()    {}
func (*ParamJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{8}
}
func (m *ParamJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ParamJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamJSON.Merge(dst, src)
}
func (m *ParamJSON) XXX_Size() int {
	return m.Size()
}
func (m *ParamJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamJSON.DiscardUnknown(m)
}

var xxx_messageInfo_ParamJSON proto.InternalMessageInfo

func (m *ParamJSON) GetIsRequired() bool {
	if m != nil {
		return m.IsRequired
	}
	return false
}

func (m *ParamJSON) GetSID() uint32 {
	if m != nil {
		return m.SID
	}
	return 0
}

func (m *ParamJSON) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParamJSON) GetKind() ParamJSON_Kind {
	if m != nil {
		return m.Kind
	}
	return ParamJSON_UNKNOWN
}

type PathPartial struct {
	// Types that are valid to be assigned to Pp:
	//	*PathPartial_Part
	//	*PathPartial_Ptr
	Pp                   isPathPartial_Pp `protobuf_oneof:"pp"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PathPartial) Reset()         { *m = PathPartial{} }
func (m *PathPartial) String() string { return proto.CompactTextString(m) }
func (*PathPartial) ProtoMessage()    {}
func (*PathPartial) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{9}
}
func (m *PathPartial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PathPartial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PathPartial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PathPartial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathPartial.Merge(dst, src)
}
func (m *PathPartial) XXX_Size() int {
	return m.Size()
}
func (m *PathPartial) XXX_DiscardUnknown() {
	xxx_messageInfo_PathPartial.DiscardUnknown(m)
}

var xxx_messageInfo_PathPartial proto.InternalMessageInfo

type isPathPartial_Pp interface {
	isPathPartial_Pp()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PathPartial_Part struct {
	Part string `protobuf:"bytes,1,opt,name=part,proto3,oneof"`
}
type PathPartial_Ptr struct {
	Ptr string `protobuf:"bytes,2,opt,name=ptr,proto3,oneof"`
}

func (*PathPartial_Part) isPathPartial_Pp() {}
func (*PathPartial_Ptr) isPathPartial_Pp()  {}

func (m *PathPartial) GetPp() isPathPartial_Pp {
	if m != nil {
		return m.Pp
	}
	return nil
}

func (m *PathPartial) GetPart() string {
	if x, ok := m.GetPp().(*PathPartial_Part); ok {
		return x.Part
	}
	return ""
}

func (m *PathPartial) GetPtr() string {
	if x, ok := m.GetPp().(*PathPartial_Ptr); ok {
		return x.Ptr
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PathPartial) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PathPartial_OneofMarshaler, _PathPartial_OneofUnmarshaler, _PathPartial_OneofSizer, []interface{}{
		(*PathPartial_Part)(nil),
		(*PathPartial_Ptr)(nil),
	}
}

func _PathPartial_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PathPartial)
	// pp
	switch x := m.Pp.(type) {
	case *PathPartial_Part:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Part)
	case *PathPartial_Ptr:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Ptr)
	case nil:
	default:
		return fmt.Errorf("PathPartial.Pp has unexpected type %T", x)
	}
	return nil
}

func _PathPartial_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PathPartial)
	switch tag {
	case 1: // pp.part
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pp = &PathPartial_Part{x}
		return true, err
	case 2: // pp.ptr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pp = &PathPartial_Ptr{x}
		return true, err
	default:
		return false, nil
	}
}

func _PathPartial_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PathPartial)
	// pp
	switch x := m.Pp.(type) {
	case *PathPartial_Part:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Part)))
		n += len(x.Part)
	case *PathPartial_Ptr:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Ptr)))
		n += len(x.Ptr)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Schema struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Schema) Reset()         { *m = Schema{} }
func (m *Schema) String() string { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()    {}
func (*Schema) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{10}
}
func (m *Schema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Schema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Schema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Schema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema.Merge(dst, src)
}
func (m *Schema) XXX_Size() int {
	return m.Size()
}
func (m *Schema) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema.DiscardUnknown(m)
}

var xxx_messageInfo_Schema proto.InternalMessageInfo

type Schema_JSON struct {
	Types        []Schema_JSON_Type `protobuf:"varint,1,rep,packed,name=types,enum=Schema_JSON_Type" json:"types,omitempty"`
	Enum         []*types.Value     `protobuf:"bytes,2,rep,name=enum" json:"enum,omitempty"`
	Format       Schema_JSON_Format `protobuf:"varint,3,opt,name=format,proto3,enum=Schema_JSON_Format" json:"format,omitempty"`
	MinLength    uint64             `protobuf:"varint,4,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	MaxLength    uint64             `protobuf:"varint,5,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	HasMaxLength bool               `protobuf:"varint,6,opt,name=has_max_length,json=hasMaxLength,proto3" json:"has_max_length,omitempty"`
	Pattern      string             `protobuf:"bytes,7,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// type: number | integer
	Minimum              float64 `protobuf:"fixed64,8,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum              float64 `protobuf:"fixed64,9,opt,name=maximum,proto3" json:"maximum,omitempty"`
	HasMinimum           bool    `protobuf:"varint,10,opt,name=has_minimum,json=hasMinimum,proto3" json:"has_minimum,omitempty"`
	HasMaximum           bool    `protobuf:"varint,11,opt,name=has_maximum,json=hasMaximum,proto3" json:"has_maximum,omitempty"`
	TranslatedMultipleOf float64 `protobuf:"fixed64,12,opt,name=translated_multiple_of,json=translatedMultipleOf,proto3" json:"translated_multiple_of,omitempty"`
	ExclusiveMinimum     bool    `protobuf:"varint,13,opt,name=exclusive_minimum,json=exclusiveMinimum,proto3" json:"exclusive_minimum,omitempty"`
	ExclusiveMaximum     bool    `protobuf:"varint,14,opt,name=exclusive_maximum,json=exclusiveMaximum,proto3" json:"exclusive_maximum,omitempty"`
	// type: array
	Items       []uint32 `protobuf:"varint,15,rep,packed,name=items" json:"items,omitempty"`
	UniqueItems bool     `protobuf:"varint,16,opt,name=unique_items,json=uniqueItems,proto3" json:"unique_items,omitempty"`
	MinItems    uint64   `protobuf:"varint,17,opt,name=min_items,json=minItems,proto3" json:"min_items,omitempty"`
	MaxItems    uint64   `protobuf:"varint,18,opt,name=max_items,json=maxItems,proto3" json:"max_items,omitempty"`
	HasMaxItems bool     `protobuf:"varint,19,opt,name=has_max_items,json=hasMaxItems,proto3" json:"has_max_items,omitempty"`
	// type: object
	Properties              map[string]uint32                 `protobuf:"bytes,20,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Required                []string                          `protobuf:"bytes,21,rep,name=required" json:"required,omitempty"`
	MinProperties           uint64                            `protobuf:"varint,22,opt,name=min_properties,json=minProperties,proto3" json:"min_properties,omitempty"`
	MaxProperties           uint64                            `protobuf:"varint,23,opt,name=max_properties,json=maxProperties,proto3" json:"max_properties,omitempty"`
	HasMaxProperties        bool                              `protobuf:"varint,24,opt,name=has_max_properties,json=hasMaxProperties,proto3" json:"has_max_properties,omitempty"`
	AdditionalProperties    *Schema_JSON_AdditionalProperties `protobuf:"bytes,25,opt,name=additional_properties,json=additionalProperties" json:"additional_properties,omitempty"`
	HasAdditionalProperties bool                              `protobuf:"varint,26,opt,name=has_additional_properties,json=hasAdditionalProperties,proto3" json:"has_additional_properties,omitempty"`
	AllOf                   []uint32                          `protobuf:"varint,27,rep,packed,name=all_of,json=allOf" json:"all_of,omitempty"`
	AnyOf                   []uint32                          `protobuf:"varint,28,rep,packed,name=any_of,json=anyOf" json:"any_of,omitempty"`
	OneOf                   []uint32                          `protobuf:"varint,29,rep,packed,name=one_of,json=oneOf" json:"one_of,omitempty"`
	Not                     uint32                            `protobuf:"varint,30,opt,name=not,proto3" json:"not,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                          `json:"-"`
	XXX_unrecognized        []byte                            `json:"-"`
	XXX_sizecache           int32                             `json:"-"`
}

func (m *Schema_JSON) Reset()         { *m = Schema_JSON{} }
func (m *Schema_JSON) String() string { return proto.CompactTextString(m) }
func (*Schema_JSON) ProtoMessage()    {}
func (*Schema_JSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{10, 0}
}
func (m *Schema_JSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Schema_JSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Schema_JSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Schema_JSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema_JSON.Merge(dst, src)
}
func (m *Schema_JSON) XXX_Size() int {
	return m.Size()
}
func (m *Schema_JSON) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema_JSON.DiscardUnknown(m)
}

var xxx_messageInfo_Schema_JSON proto.InternalMessageInfo

func (m *Schema_JSON) GetTypes() []Schema_JSON_Type {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *Schema_JSON) GetEnum() []*types.Value {
	if m != nil {
		return m.Enum
	}
	return nil
}

func (m *Schema_JSON) GetFormat() Schema_JSON_Format {
	if m != nil {
		return m.Format
	}
	return Schema_JSON_NONE
}

func (m *Schema_JSON) GetMinLength() uint64 {
	if m != nil {
		return m.MinLength
	}
	return 0
}

func (m *Schema_JSON) GetMaxLength() uint64 {
	if m != nil {
		return m.MaxLength
	}
	return 0
}

func (m *Schema_JSON) GetHasMaxLength() bool {
	if m != nil {
		return m.HasMaxLength
	}
	return false
}

func (m *Schema_JSON) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *Schema_JSON) GetMinimum() float64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *Schema_JSON) GetMaximum() float64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *Schema_JSON) GetHasMinimum() bool {
	if m != nil {
		return m.HasMinimum
	}
	return false
}

func (m *Schema_JSON) GetHasMaximum() bool {
	if m != nil {
		return m.HasMaximum
	}
	return false
}

func (m *Schema_JSON) GetTranslatedMultipleOf() float64 {
	if m != nil {
		return m.TranslatedMultipleOf
	}
	return 0
}

func (m *Schema_JSON) GetExclusiveMinimum() bool {
	if m != nil {
		return m.ExclusiveMinimum
	}
	return false
}

func (m *Schema_JSON) GetExclusiveMaximum() bool {
	if m != nil {
		return m.ExclusiveMaximum
	}
	return false
}

func (m *Schema_JSON) GetItems() []uint32 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Schema_JSON) GetUniqueItems() bool {
	if m != nil {
		return m.UniqueItems
	}
	return false
}

func (m *Schema_JSON) GetMinItems() uint64 {
	if m != nil {
		return m.MinItems
	}
	return 0
}

func (m *Schema_JSON) GetMaxItems() uint64 {
	if m != nil {
		return m.MaxItems
	}
	return 0
}

func (m *Schema_JSON) GetHasMaxItems() bool {
	if m != nil {
		return m.HasMaxItems
	}
	return false
}

func (m *Schema_JSON) GetProperties() map[string]uint32 {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Schema_JSON) GetRequired() []string {
	if m != nil {
		return m.Required
	}
	return nil
}

func (m *Schema_JSON) GetMinProperties() uint64 {
	if m != nil {
		return m.MinProperties
	}
	return 0
}

func (m *Schema_JSON) GetMaxProperties() uint64 {
	if m != nil {
		return m.MaxProperties
	}
	return 0
}

func (m *Schema_JSON) GetHasMaxProperties() bool {
	if m != nil {
		return m.HasMaxProperties
	}
	return false
}

func (m *Schema_JSON) GetAdditionalProperties() *Schema_JSON_AdditionalProperties {
	if m != nil {
		return m.AdditionalProperties
	}
	return nil
}

func (m *Schema_JSON) GetHasAdditionalProperties() bool {
	if m != nil {
		return m.HasAdditionalProperties
	}
	return false
}

func (m *Schema_JSON) GetAllOf() []uint32 {
	if m != nil {
		return m.AllOf
	}
	return nil
}

func (m *Schema_JSON) GetAnyOf() []uint32 {
	if m != nil {
		return m.AnyOf
	}
	return nil
}

func (m *Schema_JSON) GetOneOf() []uint32 {
	if m != nil {
		return m.OneOf
	}
	return nil
}

func (m *Schema_JSON) GetNot() uint32 {
	if m != nil {
		return m.Not
	}
	return 0
}

// / FIXME true is equivalent to {}, false is equivalent to {"not": {}}
type Schema_JSON_AdditionalProperties struct {
	// Types that are valid to be assigned to AddProps:
	//	*Schema_JSON_AdditionalProperties_AlwaysSucceed
	//	*Schema_JSON_AdditionalProperties_SID
	AddProps             isSchema_JSON_AdditionalProperties_AddProps `protobuf_oneof:"add_props"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *Schema_JSON_AdditionalProperties) Reset()         { *m = Schema_JSON_AdditionalProperties{} }
func (m *Schema_JSON_AdditionalProperties) String() string { return proto.CompactTextString(m) }
func (*Schema_JSON_AdditionalProperties) ProtoMessage()    {}
func (*Schema_JSON_AdditionalProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6, []int{10, 0, 1}
}
func (m *Schema_JSON_AdditionalProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Schema_JSON_AdditionalProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Schema_JSON_AdditionalProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Schema_JSON_AdditionalProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema_JSON_AdditionalProperties.Merge(dst, src)
}
func (m *Schema_JSON_AdditionalProperties) XXX_Size() int {
	return m.Size()
}
func (m *Schema_JSON_AdditionalProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema_JSON_AdditionalProperties.DiscardUnknown(m)
}

var xxx_messageInfo_Schema_JSON_AdditionalProperties proto.InternalMessageInfo

type isSchema_JSON_AdditionalProperties_AddProps interface {
	isSchema_JSON_AdditionalProperties_AddProps()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Schema_JSON_AdditionalProperties_AlwaysSucceed struct {
	AlwaysSucceed bool `protobuf:"varint,1,opt,name=always_succeed,json=alwaysSucceed,proto3,oneof"`
}
type Schema_JSON_AdditionalProperties_SID struct {
	SID uint32 `protobuf:"varint,2,opt,name=SID,proto3,oneof"`
}

func (*Schema_JSON_AdditionalProperties_AlwaysSucceed) isSchema_JSON_AdditionalProperties_AddProps() {}
func (*Schema_JSON_AdditionalProperties_SID) isSchema_JSON_AdditionalProperties_AddProps()           {}

func (m *Schema_JSON_AdditionalProperties) GetAddProps() isSchema_JSON_AdditionalProperties_AddProps {
	if m != nil {
		return m.AddProps
	}
	return nil
}

func (m *Schema_JSON_AdditionalProperties) GetAlwaysSucceed() bool {
	if x, ok := m.GetAddProps().(*Schema_JSON_AdditionalProperties_AlwaysSucceed); ok {
		return x.AlwaysSucceed
	}
	return false
}

func (m *Schema_JSON_AdditionalProperties) GetSID() uint32 {
	if x, ok := m.GetAddProps().(*Schema_JSON_AdditionalProperties_SID); ok {
		return x.SID
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Schema_JSON_AdditionalProperties) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Schema_JSON_AdditionalProperties_OneofMarshaler, _Schema_JSON_AdditionalProperties_OneofUnmarshaler, _Schema_JSON_AdditionalProperties_OneofSizer, []interface{}{
		(*Schema_JSON_AdditionalProperties_AlwaysSucceed)(nil),
		(*Schema_JSON_AdditionalProperties_SID)(nil),
	}
}

func _Schema_JSON_AdditionalProperties_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Schema_JSON_AdditionalProperties)
	// add_props
	switch x := m.AddProps.(type) {
	case *Schema_JSON_AdditionalProperties_AlwaysSucceed:
		t := uint64(0)
		if x.AlwaysSucceed {
			t = 1
		}
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Schema_JSON_AdditionalProperties_SID:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.SID))
	case nil:
	default:
		return fmt.Errorf("Schema_JSON_AdditionalProperties.AddProps has unexpected type %T", x)
	}
	return nil
}

func _Schema_JSON_AdditionalProperties_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Schema_JSON_AdditionalProperties)
	switch tag {
	case 1: // add_props.always_succeed
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.AddProps = &Schema_JSON_AdditionalProperties_AlwaysSucceed{x != 0}
		return true, err
	case 2: // add_props.SID
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.AddProps = &Schema_JSON_AdditionalProperties_SID{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Schema_JSON_AdditionalProperties_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Schema_JSON_AdditionalProperties)
	// add_props
	switch x := m.AddProps.(type) {
	case *Schema_JSON_AdditionalProperties_AlwaysSucceed:
		n += 1 // tag and wire
		n += 1
	case *Schema_JSON_AdditionalProperties_SID:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.SID))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Clt)(nil), "Clt")
	proto.RegisterType((*Clt_Msg)(nil), "Clt.Msg")
	proto.RegisterType((*Clt_Msg_Fuzz)(nil), "Clt.Msg.Fuzz")
	proto.RegisterType((*Clt_Msg_Fuzz_Resetter)(nil), "Clt.Msg.Fuzz.Resetter")
	proto.RegisterType((*Clt_Msg_Fuzz_Resetter_Shell)(nil), "Clt.Msg.Fuzz.Resetter.Shell")
	proto.RegisterType((*Clt_Msg_Fuzz_Model)(nil), "Clt.Msg.Fuzz.Model")
	proto.RegisterType((*Clt_Msg_Fuzz_Model_OpenAPIv3)(nil), "Clt.Msg.Fuzz.Model.OpenAPIv3")
	proto.RegisterType((*Clt_Msg_Metrics)(nil), "Clt.Msg.Metrics")
	proto.RegisterType((*Clt_Msg_ResetProgress)(nil), "Clt.Msg.ResetProgress")
	proto.RegisterType((*Clt_Msg_CallRequestRaw)(nil), "Clt.Msg.CallRequestRaw")
	proto.RegisterType((*Clt_Msg_CallRequestRaw_Input)(nil), "Clt.Msg.CallRequestRaw.Input")
	proto.RegisterType((*Clt_Msg_CallRequestRaw_Input_HttpRequest)(nil), "Clt.Msg.CallRequestRaw.Input.HttpRequest")
	proto.RegisterMapType((map[string]*Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues)(nil), "Clt.Msg.CallRequestRaw.Input.HttpRequest.HeadersEntry")
	proto.RegisterType((*Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues)(nil), "Clt.Msg.CallRequestRaw.Input.HttpRequest.HeaderValues")
	proto.RegisterType((*Clt_Msg_CallResponseRaw)(nil), "Clt.Msg.CallResponseRaw")
	proto.RegisterType((*Clt_Msg_CallResponseRaw_Output)(nil), "Clt.Msg.CallResponseRaw.Output")
	proto.RegisterType((*Clt_Msg_CallResponseRaw_Output_HttpResponse)(nil), "Clt.Msg.CallResponseRaw.Output.HttpResponse")
	proto.RegisterMapType((map[string]*Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues)(nil), "Clt.Msg.CallResponseRaw.Output.HttpResponse.HeadersEntry")
	proto.RegisterType((*Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues)(nil), "Clt.Msg.CallResponseRaw.Output.HttpResponse.HeaderValues")
	proto.RegisterType((*Clt_Msg_CallVerifProgress)(nil), "Clt.Msg.CallVerifProgress")
	proto.RegisterType((*Srv)(nil), "Srv")
	proto.RegisterType((*Srv_Msg)(nil), "Srv.Msg")
	proto.RegisterType((*Srv_Msg_Call)(nil), "Srv.Msg.Call")
	proto.RegisterType((*Srv_Msg_Call_Input)(nil), "Srv.Msg.Call.Input")
	proto.RegisterType((*Srv_Msg_Call_Input_HttpRequest)(nil), "Srv.Msg.Call.Input.HttpRequest")
	proto.RegisterMapType((map[string]*Srv_Msg_Call_Input_HttpRequest_HeaderValues)(nil), "Srv.Msg.Call.Input.HttpRequest.HeadersEntry")
	proto.RegisterType((*Srv_Msg_Call_Input_HttpRequest_HeaderValues)(nil), "Srv.Msg.Call.Input.HttpRequest.HeaderValues")
	proto.RegisterType((*Srv_Msg_Reset)(nil), "Srv.Msg.Reset")
	proto.RegisterType((*Srv_Msg_FuzzProgress)(nil), "Srv.Msg.FuzzProgress")
	proto.RegisterType((*SpecIR)(nil), "SpecIR")
	proto.RegisterMapType((map[uint32]*Endpoint)(nil), "SpecIR.EndpointsEntry")
	proto.RegisterType((*Schemas)(nil), "Schemas")
	proto.RegisterMapType((map[uint32]*RefOrSchemaJSON)(nil), "Schemas.JsonEntry")
	proto.RegisterType((*RefOrSchemaJSON)(nil), "RefOrSchemaJSON")
	proto.RegisterType((*SchemaPtr)(nil), "SchemaPtr")
	proto.RegisterType((*Endpoint)(nil), "Endpoint")
	proto.RegisterType((*EndpointJSON)(nil), "EndpointJSON")
	proto.RegisterMapType((map[uint32]uint32)(nil), "EndpointJSON.OutputsEntry")
	proto.RegisterType((*ParamJSON)(nil), "ParamJSON")
	proto.RegisterType((*PathPartial)(nil), "PathPartial")
	proto.RegisterType((*Schema)(nil), "Schema")
	proto.RegisterType((*Schema_JSON)(nil), "Schema.JSON")
	proto.RegisterMapType((map[string]uint32)(nil), "Schema.JSON.PropertiesEntry")
	proto.RegisterType((*Schema_JSON_AdditionalProperties)(nil), "Schema.JSON.AdditionalProperties")
	proto.RegisterEnum("Clt_Msg_Fuzz_ModelKind", Clt_Msg_Fuzz_ModelKind_name, Clt_Msg_Fuzz_ModelKind_value)
	proto.RegisterEnum("Clt_Msg_ResetProgress_Status", Clt_Msg_ResetProgress_Status_name, Clt_Msg_ResetProgress_Status_value)
	proto.RegisterEnum("Clt_Msg_CallVerifProgress_Status", Clt_Msg_CallVerifProgress_Status_name, Clt_Msg_CallVerifProgress_Status_value)
	proto.RegisterEnum("EndpointJSON_Method", EndpointJSON_Method_name, EndpointJSON_Method_value)
	proto.RegisterEnum("ParamJSON_Kind", ParamJSON_Kind_name, ParamJSON_Kind_value)
	proto.RegisterEnum("Schema_JSON_Type", Schema_JSON_Type_name, Schema_JSON_Type_value)
	proto.RegisterEnum("Schema_JSON_Format", Schema_JSON_Format_name, Schema_JSON_Format_value)
}
func (this *Clt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt)
	if !ok {
		that2, ok := that.(Clt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg)
	if !ok {
		that2, ok := that.(Clt_Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fuzz.Equal(that1.Fuzz) {
		return false
	}
	return true
}
func (this *Clt_Msg_Metrics_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Metrics_)
	if !ok {
		that2, ok := that.(Clt_Msg_Metrics_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metrics.Equal(that1.Metrics) {
		return false
	}
	return true
}
func (this *Clt_Msg_ResetProgress_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_ResetProgress_)
	if !ok {
		that2, ok := that.(Clt_Msg_ResetProgress_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResetProgress.Equal(that1.ResetProgress) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallRequestRaw_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallRequestRaw_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallRequestRaw_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallRequestRaw.Equal(that1.CallRequestRaw) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallResponseRaw.Equal(that1.CallResponseRaw) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallVerifProgress_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallVerifProgress_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallVerifProgress_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallVerifProgress.Equal(that1.CallVerifProgress) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Resetter.Equal(that1.Resetter) {
		return false
	}
	if this.ModelKind != that1.ModelKind {
		return false
	}
	if !this.Model.Equal(that1.Model) {
		return false
	}
	if len(this.Usage) != len(that1.Usage) {
		return false
	}
	for i := range this.Usage {
		if this.Usage[i] != that1.Usage[i] {
			return false
		}
	}
	if !bytes.Equal(this.Seed, that1.Seed) {
		return false
	}
	if this.Intensity != that1.Intensity {
		return false
	}
	if len(this.EIDs) != len(that1.EIDs) {
		return false
	}
	for i := range this.EIDs {
		if this.EIDs[i] != that1.EIDs[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Resetter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Resetter)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Resetter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Resetter == nil {
		if this.Resetter != nil {
			return false
		}
	} else if this.Resetter == nil {
		return false
	} else if !this.Resetter.Equal(that1.Resetter) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Resetter_Shell_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Resetter_Shell_)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Resetter_Shell_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Shell.Equal(that1.Shell) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Resetter_Shell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Resetter_Shell)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Resetter_Shell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.Rst != that1.Rst {
		return false
	}
	if this.Stop != that1.Stop {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Model) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Model)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Model)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Model == nil {
		if this.Model != nil {
			return false
		}
	} else if this.Model == nil {
		return false
	} else if !this.Model.Equal(that1.Model) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Model_Openapiv3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Model_Openapiv3)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Model_Openapiv3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Openapiv3.Equal(that1.Openapiv3) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Model_OpenAPIv3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Model_OpenAPIv3)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Model_OpenAPIv3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.File != that1.File {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.HeaderAuthorization != that1.HeaderAuthorization {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Metrics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Metrics)
	if !ok {
		that2, ok := that.(Clt_Msg_Metrics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_ResetProgress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_ResetProgress)
	if !ok {
		that2, ok := that.(Clt_Msg_ResetProgress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.TsDiff != that1.TsDiff {
		return false
	}
	if len(this.Reason) != len(that1.Reason) {
		return false
	}
	for i := range this.Reason {
		if this.Reason[i] != that1.Reason[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallRequestRaw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallRequestRaw)
	if !ok {
		that2, ok := that.(Clt_Msg_CallRequestRaw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallRequestRaw_Input) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallRequestRaw_Input)
	if !ok {
		that2, ok := that.(Clt_Msg_CallRequestRaw_Input)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Input == nil {
		if this.Input != nil {
			return false
		}
	} else if this.Input == nil {
		return false
	} else if !this.Input.Equal(that1.Input) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallRequestRaw_Input_HttpRequest_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallRequestRaw_Input_HttpRequest_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallRequestRaw_Input_HttpRequest_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpRequest.Equal(that1.HttpRequest) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallRequestRaw_Input_HttpRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallRequestRaw_Input_HttpRequest)
	if !ok {
		that2, ok := that.(Clt_Msg_CallRequestRaw_Input_HttpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues)
	if !ok {
		that2, ok := that.(Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw_Output) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw_Output)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw_Output)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Output == nil {
		if this.Output != nil {
			return false
		}
	} else if this.Output == nil {
		return false
	} else if !this.Output.Equal(that1.Output) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw_Output_HttpResponse_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw_Output_HttpResponse_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw_Output_HttpResponse_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpResponse.Equal(that1.HttpResponse) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw_Output_HttpResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw_Output_HttpResponse)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw_Output_HttpResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.StatusCode != that1.StatusCode {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	if this.Elapsed != that1.Elapsed {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallVerifProgress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallVerifProgress)
	if !ok {
		that2, ok := that.(Clt_Msg_CallVerifProgress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Reason) != len(that1.Reason) {
		return false
	}
	for i := range this.Reason {
		if this.Reason[i] != that1.Reason[i] {
			return false
		}
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv)
	if !ok {
		that2, ok := that.(Srv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg)
	if !ok {
		that2, ok := that.(Srv_Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call_)
	if !ok {
		that2, ok := that.(Srv_Msg_Call_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Call.Equal(that1.Call) {
		return false
	}
	return true
}
func (this *Srv_Msg_FuzzProgress_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_FuzzProgress_)
	if !ok {
		that2, ok := that.(Srv_Msg_FuzzProgress_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FuzzProgress.Equal(that1.FuzzProgress) {
		return false
	}
	return true
}
func (this *Srv_Msg_Reset_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Reset_)
	if !ok {
		that2, ok := that.(Srv_Msg_Reset_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reset_.Equal(that1.Reset_) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call)
	if !ok {
		that2, ok := that.(Srv_Msg_Call)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.EId != that1.EId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call_Input) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call_Input)
	if !ok {
		that2, ok := that.(Srv_Msg_Call_Input)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Input == nil {
		if this.Input != nil {
			return false
		}
	} else if this.Input == nil {
		return false
	} else if !this.Input.Equal(that1.Input) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call_Input_HttpRequest_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call_Input_HttpRequest_)
	if !ok {
		that2, ok := that.(Srv_Msg_Call_Input_HttpRequest_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpRequest.Equal(that1.HttpRequest) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call_Input_HttpRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call_Input_HttpRequest)
	if !ok {
		that2, ok := that.(Srv_Msg_Call_Input_HttpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call_Input_HttpRequest_HeaderValues) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call_Input_HttpRequest_HeaderValues)
	if !ok {
		that2, ok := that.(Srv_Msg_Call_Input_HttpRequest_HeaderValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Reset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Reset)
	if !ok {
		that2, ok := that.(Srv_Msg_Reset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_FuzzProgress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_FuzzProgress)
	if !ok {
		that2, ok := that.(Srv_Msg_FuzzProgress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SpecIR) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpecIR)
	if !ok {
		that2, ok := that.(SpecIR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Schemas.Equal(that1.Schemas) {
		return false
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return false
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Schemas) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Schemas)
	if !ok {
		that2, ok := that.(Schemas)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Json) != len(that1.Json) {
		return false
	}
	for i := range this.Json {
		if !this.Json[i].Equal(that1.Json[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RefOrSchemaJSON) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefOrSchemaJSON)
	if !ok {
		that2, ok := that.(RefOrSchemaJSON)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PtrOrSchema == nil {
		if this.PtrOrSchema != nil {
			return false
		}
	} else if this.PtrOrSchema == nil {
		return false
	} else if !this.PtrOrSchema.Equal(that1.PtrOrSchema) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RefOrSchemaJSON_Ptr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefOrSchemaJSON_Ptr)
	if !ok {
		that2, ok := that.(RefOrSchemaJSON_Ptr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ptr.Equal(that1.Ptr) {
		return false
	}
	return true
}
func (this *RefOrSchemaJSON_Schema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefOrSchemaJSON_Schema)
	if !ok {
		that2, ok := that.(RefOrSchemaJSON_Schema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Schema.Equal(that1.Schema) {
		return false
	}
	return true
}
func (this *SchemaPtr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaPtr)
	if !ok {
		that2, ok := that.(SchemaPtr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SID != that1.SID {
		return false
	}
	if this.Ref != that1.Ref {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Endpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Endpoint)
	if !ok {
		that2, ok := that.(Endpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Endpoint == nil {
		if this.Endpoint != nil {
			return false
		}
	} else if this.Endpoint == nil {
		return false
	} else if !this.Endpoint.Equal(that1.Endpoint) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Endpoint_Json) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Endpoint_Json)
	if !ok {
		that2, ok := that.(Endpoint_Json)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Json.Equal(that1.Json) {
		return false
	}
	return true
}
func (this *EndpointJSON) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointJSON)
	if !ok {
		that2, ok := that.(EndpointJSON)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if len(this.PathPartials) != len(that1.PathPartials) {
		return false
	}
	for i := range this.PathPartials {
		if !this.PathPartials[i].Equal(that1.PathPartials[i]) {
			return false
		}
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return false
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return false
		}
	}
	if len(this.Outputs) != len(that1.Outputs) {
		return false
	}
	for i := range this.Outputs {
		if this.Outputs[i] != that1.Outputs[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ParamJSON) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParamJSON)
	if !ok {
		that2, ok := that.(ParamJSON)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsRequired != that1.IsRequired {
		return false
	}
	if this.SID != that1.SID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PathPartial) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PathPartial)
	if !ok {
		that2, ok := that.(PathPartial)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Pp == nil {
		if this.Pp != nil {
			return false
		}
	} else if this.Pp == nil {
		return false
	} else if !this.Pp.Equal(that1.Pp) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PathPartial_Part) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PathPartial_Part)
	if !ok {
		that2, ok := that.(PathPartial_Part)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Part != that1.Part {
		return false
	}
	return true
}
func (this *PathPartial_Ptr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PathPartial_Ptr)
	if !ok {
		that2, ok := that.(PathPartial_Ptr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ptr != that1.Ptr {
		return false
	}
	return true
}
func (this *Schema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Schema)
	if !ok {
		that2, ok := that.(Schema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Schema_JSON) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Schema_JSON)
	if !ok {
		that2, ok := that.(Schema_JSON)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Types) != len(that1.Types) {
		return false
	}
	for i := range this.Types {
		if this.Types[i] != that1.Types[i] {
			return false
		}
	}
	if len(this.Enum) != len(that1.Enum) {
		return false
	}
	for i := range this.Enum {
		if !this.Enum[i].Equal(that1.Enum[i]) {
			return false
		}
	}
	if this.Format != that1.Format {
		return false
	}
	if this.MinLength != that1.MinLength {
		return false
	}
	if this.MaxLength != that1.MaxLength {
		return false
	}
	if this.HasMaxLength != that1.HasMaxLength {
		return false
	}
	if this.Pattern != that1.Pattern {
		return false
	}
	if this.Minimum != that1.Minimum {
		return false
	}
	if this.Maximum != that1.Maximum {
		return false
	}
	if this.HasMinimum != that1.HasMinimum {
		return false
	}
	if this.HasMaximum != that1.HasMaximum {
		return false
	}
	if this.TranslatedMultipleOf != that1.TranslatedMultipleOf {
		return false
	}
	if this.ExclusiveMinimum != that1.ExclusiveMinimum {
		return false
	}
	if this.ExclusiveMaximum != that1.ExclusiveMaximum {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	if this.UniqueItems != that1.UniqueItems {
		return false
	}
	if this.MinItems != that1.MinItems {
		return false
	}
	if this.MaxItems != that1.MaxItems {
		return false
	}
	if this.HasMaxItems != that1.HasMaxItems {
		return false
	}
	if len(this.Properties) != len(that1.Properties) {
		return false
	}
	for i := range this.Properties {
		if this.Properties[i] != that1.Properties[i] {
			return false
		}
	}
	if len(this.Required) != len(that1.Required) {
		return false
	}
	for i := range this.Required {
		if this.Required[i] != that1.Required[i] {
			return false
		}
	}
	if this.MinProperties != that1.MinProperties {
		return false
	}
	if this.MaxProperties != that1.MaxProperties {
		return false
	}
	if this.HasMaxProperties != that1.HasMaxProperties {
		return false
	}
	if !this.AdditionalProperties.Equal(that1.AdditionalProperties) {
		return false
	}
	if this.HasAdditionalProperties != that1.HasAdditionalProperties {
		return false
	}
	if len(this.AllOf) != len(that1.AllOf) {
		return false
	}
	for i := range this.AllOf {
		if this.AllOf[i] != that1.AllOf[i] {
			return false
		}
	}
	if len(this.AnyOf) != len(that1.AnyOf) {
		return false
	}
	for i := range this.AnyOf {
		if this.AnyOf[i] != that1.AnyOf[i] {
			return false
		}
	}
	if len(this.OneOf) != len(that1.OneOf) {
		return false
	}
	for i := range this.OneOf {
		if this.OneOf[i] != that1.OneOf[i] {
			return false
		}
	}
	if this.Not != that1.Not {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Schema_JSON_AdditionalProperties) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Schema_JSON_AdditionalProperties)
	if !ok {
		that2, ok := that.(Schema_JSON_AdditionalProperties)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AddProps == nil {
		if this.AddProps != nil {
			return false
		}
	} else if this.AddProps == nil {
		return false
	} else if !this.AddProps.Equal(that1.AddProps) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Schema_JSON_AdditionalProperties_AlwaysSucceed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Schema_JSON_AdditionalProperties_AlwaysSucceed)
	if !ok {
		that2, ok := that.(Schema_JSON_AdditionalProperties_AlwaysSucceed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AlwaysSucceed != that1.AlwaysSucceed {
		return false
	}
	return true
}
func (this *Schema_JSON_AdditionalProperties_SID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Schema_JSON_AdditionalProperties_SID)
	if !ok {
		that2, ok := that.(Schema_JSON_AdditionalProperties_SID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SID != that1.SID {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FuzzyMonkeyClient is the client API for FuzzyMonkey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FuzzyMonkeyClient interface {
	Do(ctx context.Context, opts ...grpc.CallOption) (FuzzyMonkey_DoClient, error)
}

type fuzzyMonkeyClient struct {
	cc *grpc.ClientConn
}

func NewFuzzyMonkeyClient(cc *grpc.ClientConn) FuzzyMonkeyClient {
	return &fuzzyMonkeyClient{cc}
}

func (c *fuzzyMonkeyClient) Do(ctx context.Context, opts ...grpc.CallOption) (FuzzyMonkey_DoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FuzzyMonkey_serviceDesc.Streams[0], "/FuzzyMonkey/Do", opts...)
	if err != nil {
		return nil, err
	}
	x := &fuzzyMonkeyDoClient{stream}
	return x, nil
}

type FuzzyMonkey_DoClient interface {
	Send(*Clt) error
	Recv() (*Srv, error)
	grpc.ClientStream
}

type fuzzyMonkeyDoClient struct {
	grpc.ClientStream
}

func (x *fuzzyMonkeyDoClient) Send(m *Clt) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fuzzyMonkeyDoClient) Recv() (*Srv, error) {
	m := new(Srv)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FuzzyMonkeyServer is the server API for FuzzyMonkey service.
type FuzzyMonkeyServer interface {
	Do(FuzzyMonkey_DoServer) error
}

func RegisterFuzzyMonkeyServer(s *grpc.Server, srv FuzzyMonkeyServer) {
	s.RegisterService(&_FuzzyMonkey_serviceDesc, srv)
}

func _FuzzyMonkey_Do_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FuzzyMonkeyServer).Do(&fuzzyMonkeyDoServer{stream})
}

type FuzzyMonkey_DoServer interface {
	Send(*Srv) error
	Recv() (*Clt, error)
	grpc.ServerStream
}

type fuzzyMonkeyDoServer struct {
	grpc.ServerStream
}

func (x *fuzzyMonkeyDoServer) Send(m *Srv) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fuzzyMonkeyDoServer) Recv() (*Clt, error) {
	m := new(Clt)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FuzzyMonkey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FuzzyMonkey",
	HandlerType: (*FuzzyMonkeyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Do",
			Handler:       _FuzzyMonkey_Do_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/internal/fm/fuzzymonkey.proto",
}

func (m *Clt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Msg.Size()))
		n1, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn2, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Fuzz != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Fuzz.Size()))
		n3, err := m.Fuzz.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Clt_Msg_Metrics_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Metrics != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Metrics.Size()))
		n4, err := m.Metrics.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Clt_Msg_ResetProgress_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetProgress != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.ResetProgress.Size()))
		n5, err := m.ResetProgress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Clt_Msg_CallRequestRaw_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CallRequestRaw != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.CallRequestRaw.Size()))
		n6, err := m.CallRequestRaw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Clt_Msg_CallResponseRaw_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CallResponseRaw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.CallResponseRaw.Size()))
		n7, err := m.CallResponseRaw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Clt_Msg_CallVerifProgress_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CallVerifProgress != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.CallVerifProgress.Size()))
		n8, err := m.CallVerifProgress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Clt_Msg_Fuzz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resetter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Resetter.Size()))
		n9, err := m.Resetter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.ModelKind != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.ModelKind))
	}
	if m.Model != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Model.Size()))
		n10, err := m.Model.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Usage) > 0 {
		for _, s := range m.Usage {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Seed) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Seed)))
		i += copy(dAtA[i:], m.Seed)
	}
	if m.Intensity != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Intensity))
	}
	if len(m.EIDs) > 0 {
		dAtA12 := make([]byte, len(m.EIDs)*10)
		var j11 int
		for _, num := range m.EIDs {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Resetter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Resetter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resetter != nil {
		nn13, err := m.Resetter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Resetter_Shell_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Shell != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Shell.Size()))
		n14, err := m.Shell.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Clt_Msg_Fuzz_Resetter_Shell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Resetter_Shell) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Start) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if len(m.Rst) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Rst)))
		i += copy(dAtA[i:], m.Rst)
	}
	if len(m.Stop) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Stop)))
		i += copy(dAtA[i:], m.Stop)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Model != nil {
		nn15, err := m.Model.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Model_Openapiv3) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Openapiv3 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Openapiv3.Size()))
		n16, err := m.Openapiv3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.File) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.HeaderAuthorization) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.HeaderAuthorization)))
		i += copy(dAtA[i:], m.HeaderAuthorization)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Metrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Metrics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_ResetProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_ResetProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Status))
	}
	if m.TsDiff != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.TsDiff))
	}
	if len(m.Reason) > 0 {
		for _, s := range m.Reason {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallRequestRaw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallRequestRaw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Input.Size()))
		n17, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallRequestRaw_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallRequestRaw_Input) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		nn18, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpRequest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.HttpRequest.Size()))
		n19, err := m.HttpRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Headers) > 0 {
		for k, _ := range m.Headers {
			dAtA[i] = 0x1a
			i++
			v := m.Headers[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFuzzymonkey(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + msgSize
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFuzzymonkey(dAtA, i, uint64(v.Size()))
				n20, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n20
			}
		}
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallResponseRaw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallResponseRaw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Output.Size()))
		n21, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallResponseRaw_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallResponseRaw_Output) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		nn22, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.HttpResponse.Size()))
		n23, err := m.HttpResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.StatusCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.Headers) > 0 {
		for k, _ := range m.Headers {
			dAtA[i] = 0x22
			i++
			v := m.Headers[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFuzzymonkey(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + msgSize
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFuzzymonkey(dAtA, i, uint64(v.Size()))
				n24, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n24
			}
		}
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.Elapsed != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Elapsed))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallVerifProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallVerifProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Status))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Reason) > 0 {
		for _, s := range m.Reason {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Response != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Response.Size()))
		n25, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Msg.Size()))
		n26, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn27, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn27
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Call_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Call != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Call.Size()))
		n28, err := m.Call.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *Srv_Msg_FuzzProgress_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FuzzProgress != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.FuzzProgress.Size()))
		n29, err := m.FuzzProgress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *Srv_Msg_Reset_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Reset_ != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Reset_.Size()))
		n30, err := m.Reset_.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *Srv_Msg_Call) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Call) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Input.Size()))
		n31, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.EId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.EId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Call_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Call_Input) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		nn32, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn32
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Call_Input_HttpRequest_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpRequest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.HttpRequest.Size()))
		n33, err := m.HttpRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *Srv_Msg_Call_Input_HttpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Call_Input_HttpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Headers) > 0 {
		for k, _ := range m.Headers {
			dAtA[i] = 0x1a
			i++
			v := m.Headers[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFuzzymonkey(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + msgSize
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFuzzymonkey(dAtA, i, uint64(v.Size()))
				n34, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n34
			}
		}
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Reset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Reset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_FuzzProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_FuzzProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SpecIR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecIR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Schemas != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Schemas.Size()))
		n35, err := m.Schemas.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if len(m.Endpoints) > 0 {
		for k, _ := range m.Endpoints {
			dAtA[i] = 0x12
			i++
			v := m.Endpoints[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFuzzymonkey(uint64(msgSize))
			}
			mapSize := 1 + sovFuzzymonkey(uint64(k)) + msgSize
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFuzzymonkey(dAtA, i, uint64(v.Size()))
				n36, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n36
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Schemas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Schemas) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Json) > 0 {
		for k, _ := range m.Json {
			dAtA[i] = 0xa
			i++
			v := m.Json[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFuzzymonkey(uint64(msgSize))
			}
			mapSize := 1 + sovFuzzymonkey(uint64(k)) + msgSize
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFuzzymonkey(dAtA, i, uint64(v.Size()))
				n37, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n37
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RefOrSchemaJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefOrSchemaJSON) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PtrOrSchema != nil {
		nn38, err := m.PtrOrSchema.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn38
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RefOrSchemaJSON_Ptr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ptr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Ptr.Size()))
		n39, err := m.Ptr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *RefOrSchemaJSON_Schema) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Schema != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Schema.Size()))
		n40, err := m.Schema.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *SchemaPtr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaPtr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.SID))
	}
	if len(m.Ref) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Ref)))
		i += copy(dAtA[i:], m.Ref)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Endpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Endpoint != nil {
		nn41, err := m.Endpoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn41
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Endpoint_Json) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Json != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Json.Size()))
		n42, err := m.Json.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *EndpointJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointJSON) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Method != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Method))
	}
	if len(m.PathPartials) > 0 {
		for _, msg := range m.PathPartials {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Outputs) > 0 {
		for k, _ := range m.Outputs {
			dAtA[i] = 0x22
			i++
			v := m.Outputs[k]
			mapSize := 1 + sovFuzzymonkey(uint64(k)) + 1 + sovFuzzymonkey(uint64(v))
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(v))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ParamJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamJSON) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsRequired {
		dAtA[i] = 0x8
		i++
		if m.IsRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.SID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Kind != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Kind))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PathPartial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PathPartial) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pp != nil {
		nn43, err := m.Pp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn43
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PathPartial_Part) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Part)))
	i += copy(dAtA[i:], m.Part)
	return i, nil
}
func (m *PathPartial_Ptr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Ptr)))
	i += copy(dAtA[i:], m.Ptr)
	return i, nil
}
func (m *Schema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Schema) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Schema_JSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Schema_JSON) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		dAtA45 := make([]byte, len(m.Types)*10)
		var j44 int
		for _, num := range m.Types {
			for num >= 1<<7 {
				dAtA45[j44] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j44++
			}
			dAtA45[j44] = uint8(num)
			j44++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(j44))
		i += copy(dAtA[i:], dAtA45[:j44])
	}
	if len(m.Enum) > 0 {
		for _, msg := range m.Enum {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Format != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Format))
	}
	if m.MinLength != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.MinLength))
	}
	if m.MaxLength != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.MaxLength))
	}
	if m.HasMaxLength {
		dAtA[i] = 0x30
		i++
		if m.HasMaxLength {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Pattern) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Pattern)))
		i += copy(dAtA[i:], m.Pattern)
	}
	if m.Minimum != 0 {
		dAtA[i] = 0x41
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Minimum))))
		i += 8
	}
	if m.Maximum != 0 {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Maximum))))
		i += 8
	}
	if m.HasMinimum {
		dAtA[i] = 0x50
		i++
		if m.HasMinimum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasMaximum {
		dAtA[i] = 0x58
		i++
		if m.HasMaximum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TranslatedMultipleOf != 0 {
		dAtA[i] = 0x61
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TranslatedMultipleOf))))
		i += 8
	}
	if m.ExclusiveMinimum {
		dAtA[i] = 0x68
		i++
		if m.ExclusiveMinimum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ExclusiveMaximum {
		dAtA[i] = 0x70
		i++
		if m.ExclusiveMaximum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Items) > 0 {
		dAtA47 := make([]byte, len(m.Items)*10)
		var j46 int
		for _, num := range m.Items {
			for num >= 1<<7 {
				dAtA47[j46] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j46++
			}
			dAtA47[j46] = uint8(num)
			j46++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(j46))
		i += copy(dAtA[i:], dAtA47[:j46])
	}
	if m.UniqueItems {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.UniqueItems {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MinItems != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.MinItems))
	}
	if m.MaxItems != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.MaxItems))
	}
	if m.HasMaxItems {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.HasMaxItems {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Properties) > 0 {
		for k, _ := range m.Properties {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x1
			i++
			v := m.Properties[k]
			mapSize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + 1 + sovFuzzymonkey(uint64(v))
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(v))
		}
	}
	if len(m.Required) > 0 {
		for _, s := range m.Required {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.MinProperties != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.MinProperties))
	}
	if m.MaxProperties != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.MaxProperties))
	}
	if m.HasMaxProperties {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.HasMaxProperties {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AdditionalProperties != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.AdditionalProperties.Size()))
		n48, err := m.AdditionalProperties.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.HasAdditionalProperties {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if m.HasAdditionalProperties {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AllOf) > 0 {
		dAtA50 := make([]byte, len(m.AllOf)*10)
		var j49 int
		for _, num := range m.AllOf {
			for num >= 1<<7 {
				dAtA50[j49] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j49++
			}
			dAtA50[j49] = uint8(num)
			j49++
		}
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(j49))
		i += copy(dAtA[i:], dAtA50[:j49])
	}
	if len(m.AnyOf) > 0 {
		dAtA52 := make([]byte, len(m.AnyOf)*10)
		var j51 int
		for _, num := range m.AnyOf {
			for num >= 1<<7 {
				dAtA52[j51] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j51++
			}
			dAtA52[j51] = uint8(num)
			j51++
		}
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(j51))
		i += copy(dAtA[i:], dAtA52[:j51])
	}
	if len(m.OneOf) > 0 {
		dAtA54 := make([]byte, len(m.OneOf)*10)
		var j53 int
		for _, num := range m.OneOf {
			for num >= 1<<7 {
				dAtA54[j53] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j53++
			}
			dAtA54[j53] = uint8(num)
			j53++
		}
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(j53))
		i += copy(dAtA[i:], dAtA54[:j53])
	}
	if m.Not != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Not))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Schema_JSON_AdditionalProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Schema_JSON_AdditionalProperties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddProps != nil {
		nn55, err := m.AddProps.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn55
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Schema_JSON_AdditionalProperties_AlwaysSucceed) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	if m.AlwaysSucceed {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Schema_JSON_AdditionalProperties_SID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.SID))
	return i, nil
}
func encodeVarintFuzzymonkey(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Clt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fuzz != nil {
		l = m.Fuzz.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Metrics_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_ResetProgress_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetProgress != nil {
		l = m.ResetProgress.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallRequestRaw_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallRequestRaw != nil {
		l = m.CallRequestRaw.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallResponseRaw_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallResponseRaw != nil {
		l = m.CallResponseRaw.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallVerifProgress_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallVerifProgress != nil {
		l = m.CallVerifProgress.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Fuzz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resetter != nil {
		l = m.Resetter.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.ModelKind != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.ModelKind))
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if len(m.Usage) > 0 {
		for _, s := range m.Usage {
			l = len(s)
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	l = len(m.Seed)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.Intensity != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.Intensity))
	}
	if len(m.EIDs) > 0 {
		l = 0
		for _, e := range m.EIDs {
			l += sovFuzzymonkey(uint64(e))
		}
		n += 1 + sovFuzzymonkey(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Resetter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resetter != nil {
		n += m.Resetter.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Resetter_Shell_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shell != nil {
		l = m.Shell.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Fuzz_Resetter_Shell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Rst)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Stop)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Model) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Model != nil {
		n += m.Model.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Model_Openapiv3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Openapiv3 != nil {
		l = m.Openapiv3.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.HeaderAuthorization)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Metrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_ResetProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.Status))
	}
	if m.TsDiff != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.TsDiff))
	}
	if len(m.Reason) > 0 {
		for _, s := range m.Reason {
			l = len(s)
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallRequestRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallRequestRaw_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		n += m.Input.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpRequest != nil {
		l = m.HttpRequest.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFuzzymonkey(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFuzzymonkey(uint64(mapEntrySize))
		}
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallResponseRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallResponseRaw_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		n += m.Output.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpResponse != nil {
		l = m.HttpResponse.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.StatusCode != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.StatusCode))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFuzzymonkey(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFuzzymonkey(uint64(mapEntrySize))
		}
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.Elapsed != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.Elapsed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallVerifProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.Status))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if len(m.Reason) > 0 {
		for _, s := range m.Reason {
			l = len(s)
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Call_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Call != nil {
		l = m.Call.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Srv_Msg_FuzzProgress_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FuzzProgress != nil {
		l = m.FuzzProgress.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Srv_Msg_Reset_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reset_ != nil {
		l = m.Reset_.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Srv_Msg_Call) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.EId != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.EId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Call_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		n += m.Input.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Call_Input_HttpRequest_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpRequest != nil {
		l = m.HttpRequest.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Srv_Msg_Call_Input_HttpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFuzzymonkey(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFuzzymonkey(uint64(mapEntrySize))
		}
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Reset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_FuzzProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecIR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schemas != nil {
		l = m.Schemas.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if len(m.Endpoints) > 0 {
		for k, v := range m.Endpoints {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFuzzymonkey(uint64(l))
			}
			mapEntrySize := 1 + sovFuzzymonkey(uint64(k)) + l
			n += mapEntrySize + 1 + sovFuzzymonkey(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Schemas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Json) > 0 {
		for k, v := range m.Json {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFuzzymonkey(uint64(l))
			}
			mapEntrySize := 1 + sovFuzzymonkey(uint64(k)) + l
			n += mapEntrySize + 1 + sovFuzzymonkey(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefOrSchemaJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PtrOrSchema != nil {
		n += m.PtrOrSchema.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefOrSchemaJSON_Ptr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ptr != nil {
		l = m.Ptr.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *RefOrSchemaJSON_Schema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *SchemaPtr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SID != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.SID))
	}
	l = len(m.Ref)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Endpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Endpoint != nil {
		n += m.Endpoint.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Endpoint_Json) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Json != nil {
		l = m.Json.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *EndpointJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.Method))
	}
	if len(m.PathPartials) > 0 {
		for _, e := range m.PathPartials {
			l = e.Size()
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for k, v := range m.Outputs {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFuzzymonkey(uint64(k)) + 1 + sovFuzzymonkey(uint64(v))
			n += mapEntrySize + 1 + sovFuzzymonkey(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParamJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRequired {
		n += 2
	}
	if m.SID != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.SID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.Kind))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PathPartial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pp != nil {
		n += m.Pp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PathPartial_Part) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Part)
	n += 1 + l + sovFuzzymonkey(uint64(l))
	return n
}
func (m *PathPartial_Ptr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ptr)
	n += 1 + l + sovFuzzymonkey(uint64(l))
	return n
}
func (m *Schema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Schema_JSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		l = 0
		for _, e := range m.Types {
			l += sovFuzzymonkey(uint64(e))
		}
		n += 1 + sovFuzzymonkey(uint64(l)) + l
	}
	if len(m.Enum) > 0 {
		for _, e := range m.Enum {
			l = e.Size()
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if m.Format != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.Format))
	}
	if m.MinLength != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.MinLength))
	}
	if m.MaxLength != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.MaxLength))
	}
	if m.HasMaxLength {
		n += 2
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.Minimum != 0 {
		n += 9
	}
	if m.Maximum != 0 {
		n += 9
	}
	if m.HasMinimum {
		n += 2
	}
	if m.HasMaximum {
		n += 2
	}
	if m.TranslatedMultipleOf != 0 {
		n += 9
	}
	if m.ExclusiveMinimum {
		n += 2
	}
	if m.ExclusiveMaximum {
		n += 2
	}
	if len(m.Items) > 0 {
		l = 0
		for _, e := range m.Items {
			l += sovFuzzymonkey(uint64(e))
		}
		n += 1 + sovFuzzymonkey(uint64(l)) + l
	}
	if m.UniqueItems {
		n += 3
	}
	if m.MinItems != 0 {
		n += 2 + sovFuzzymonkey(uint64(m.MinItems))
	}
	if m.MaxItems != 0 {
		n += 2 + sovFuzzymonkey(uint64(m.MaxItems))
	}
	if m.HasMaxItems {
		n += 3
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + 1 + sovFuzzymonkey(uint64(v))
			n += mapEntrySize + 2 + sovFuzzymonkey(uint64(mapEntrySize))
		}
	}
	if len(m.Required) > 0 {
		for _, s := range m.Required {
			l = len(s)
			n += 2 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if m.MinProperties != 0 {
		n += 2 + sovFuzzymonkey(uint64(m.MinProperties))
	}
	if m.MaxProperties != 0 {
		n += 2 + sovFuzzymonkey(uint64(m.MaxProperties))
	}
	if m.HasMaxProperties {
		n += 3
	}
	if m.AdditionalProperties != nil {
		l = m.AdditionalProperties.Size()
		n += 2 + l + sovFuzzymonkey(uint64(l))
	}
	if m.HasAdditionalProperties {
		n += 3
	}
	if len(m.AllOf) > 0 {
		l = 0
		for _, e := range m.AllOf {
			l += sovFuzzymonkey(uint64(e))
		}
		n += 2 + sovFuzzymonkey(uint64(l)) + l
	}
	if len(m.AnyOf) > 0 {
		l = 0
		for _, e := range m.AnyOf {
			l += sovFuzzymonkey(uint64(e))
		}
		n += 2 + sovFuzzymonkey(uint64(l)) + l
	}
	if len(m.OneOf) > 0 {
		l = 0
		for _, e := range m.OneOf {
			l += sovFuzzymonkey(uint64(e))
		}
		n += 2 + sovFuzzymonkey(uint64(l)) + l
	}
	if m.Not != 0 {
		n += 2 + sovFuzzymonkey(uint64(m.Not))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Schema_JSON_AdditionalProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddProps != nil {
		n += m.AddProps.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Schema_JSON_AdditionalProperties_AlwaysSucceed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Schema_JSON_AdditionalProperties_SID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFuzzymonkey(uint64(m.SID))
	return n
}

func sovFuzzymonkey(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFuzzymonkey(x uint64) (n int) {
	return sovFuzzymonkey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Clt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Clt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Clt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &Clt_Msg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fuzz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_Fuzz{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_Fuzz_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_Metrics{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_Metrics_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_ResetProgress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_ResetProgress_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallRequestRaw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallRequestRaw{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_CallRequestRaw_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallResponseRaw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallResponseRaw{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_CallResponseRaw_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallVerifProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallVerifProgress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_CallVerifProgress_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fuzz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fuzz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resetter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resetter == nil {
				m.Resetter = &Clt_Msg_Fuzz_Resetter{}
			}
			if err := m.Resetter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelKind", wireType)
			}
			m.ModelKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModelKind |= (Clt_Msg_Fuzz_ModelKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &Clt_Msg_Fuzz_Model{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usage = append(m.Usage, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seed = append(m.Seed[:0], dAtA[iNdEx:postIndex]...)
			if m.Seed == nil {
				m.Seed = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intensity", wireType)
			}
			m.Intensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Intensity |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EIDs = append(m.EIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFuzzymonkey
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EIDs) == 0 {
					m.EIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EIDs = append(m.EIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Resetter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resetter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resetter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_Fuzz_Resetter_Shell{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resetter = &Clt_Msg_Fuzz_Resetter_Shell_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Resetter_Shell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rst = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openapiv3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_Fuzz_Model_OpenAPIv3{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Model = &Clt_Msg_Fuzz_Model_Openapiv3{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenAPIv3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenAPIv3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderAuthorization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderAuthorization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Metrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_ResetProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Clt_Msg_ResetProgress_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsDiff", wireType)
			}
			m.TsDiff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsDiff |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = append(m.Reason, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallRequestRaw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallRequestRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallRequestRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &Clt_Msg_CallRequestRaw_Input{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallRequestRaw_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallRequestRaw_Input_HttpRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &Clt_Msg_CallRequestRaw_Input_HttpRequest_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]*Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues)
			}
			var mapkey string
			var mapvalue *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallRequestRaw_Input_HttpRequest_HeaderValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallResponseRaw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallResponseRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallResponseRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &Clt_Msg_CallResponseRaw_Output{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallResponseRaw_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallResponseRaw_Output_HttpResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Output = &Clt_Msg_CallResponseRaw_Output_HttpResponse_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]*Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues)
			}
			var mapkey string
			var mapvalue *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elapsed", wireType)
			}
			m.Elapsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Elapsed |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallResponseRaw_Output_HttpResponse_HeaderValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallVerifProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallVerifProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallVerifProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Clt_Msg_CallVerifProgress_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = append(m.Reason, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.Struct{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Srv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Srv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &Srv_Msg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Srv_Msg_Call{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Srv_Msg_Call_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuzzProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Srv_Msg_FuzzProgress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Srv_Msg_FuzzProgress_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Srv_Msg_Reset{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Srv_Msg_Reset_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Call) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Call: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Call: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &Srv_Msg_Call_Input{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EId", wireType)
			}
			m.EId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Call_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Srv_Msg_Call_Input_HttpRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &Srv_Msg_Call_Input_HttpRequest_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Call_Input_HttpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]*Srv_Msg_Call_Input_HttpRequest_HeaderValues)
			}
			var mapkey string
			var mapvalue *Srv_Msg_Call_Input_HttpRequest_HeaderValues
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Srv_Msg_Call_Input_HttpRequest_HeaderValues{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Reset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_FuzzProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FuzzProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FuzzProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecIR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecIR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecIR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schemas == nil {
				m.Schemas = &Schemas{}
			}
			if err := m.Schemas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endpoints == nil {
				m.Endpoints = make(map[uint32]*Endpoint)
			}
			var mapkey uint32
			var mapvalue *Endpoint
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Endpoint{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Endpoints[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Schemas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Schemas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Schemas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Json", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Json == nil {
				m.Json = make(map[uint32]*RefOrSchemaJSON)
			}
			var mapkey uint32
			var mapvalue *RefOrSchemaJSON
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RefOrSchemaJSON{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Json[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefOrSchemaJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefOrSchemaJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefOrSchemaJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SchemaPtr{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PtrOrSchema = &RefOrSchemaJSON_Ptr{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Schema_JSON{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PtrOrSchema = &RefOrSchemaJSON_Schema{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaPtr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaPtr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaPtr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			m.SID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Json", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EndpointJSON{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Endpoint = &Endpoint_Json{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= (EndpointJSON_Method(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathPartials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathPartials = append(m.PathPartials, &PathPartial{})
			if err := m.PathPartials[len(m.PathPartials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &ParamJSON{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outputs == nil {
				m.Outputs = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Outputs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRequired = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			m.SID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (ParamJSON_Kind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PathPartial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PathPartial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PathPartial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pp = &PathPartial_Part{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pp = &PathPartial_Ptr{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Schema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Schema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Schema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Schema_JSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Schema_JSON_Type
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Schema_JSON_Type(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFuzzymonkey
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Types) == 0 {
					m.Types = make([]Schema_JSON_Type, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Schema_JSON_Type
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Schema_JSON_Type(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enum = append(m.Enum, &types.Value{})
			if err := m.Enum[len(m.Enum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			m.Format = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Format |= (Schema_JSON_Format(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLength", wireType)
			}
			m.MinLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLength |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLength", wireType)
			}
			m.MaxLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLength |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMaxLength", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMaxLength = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Minimum = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Maximum = float64(math.Float64frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMinimum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMinimum = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMaximum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMaximum = bool(v != 0)
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranslatedMultipleOf", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TranslatedMultipleOf = float64(math.Float64frombits(v))
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExclusiveMinimum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExclusiveMinimum = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExclusiveMaximum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExclusiveMaximum = bool(v != 0)
		case 15:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Items = append(m.Items, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFuzzymonkey
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Items) == 0 {
					m.Items = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Items = append(m.Items, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueItems", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueItems = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinItems", wireType)
			}
			m.MinItems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinItems |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxItems", wireType)
			}
			m.MaxItems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxItems |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMaxItems", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMaxItems = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Required = append(m.Required, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProperties", wireType)
			}
			m.MinProperties = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinProperties |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProperties", wireType)
			}
			m.MaxProperties = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProperties |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMaxProperties", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMaxProperties = bool(v != 0)
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdditionalProperties == nil {
				m.AdditionalProperties = &Schema_JSON_AdditionalProperties{}
			}
			if err := m.AdditionalProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAdditionalProperties", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasAdditionalProperties = bool(v != 0)
		case 27:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllOf = append(m.AllOf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFuzzymonkey
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AllOf) == 0 {
					m.AllOf = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllOf = append(m.AllOf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllOf", wireType)
			}
		case 28:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AnyOf = append(m.AnyOf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFuzzymonkey
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AnyOf) == 0 {
					m.AnyOf = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AnyOf = append(m.AnyOf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyOf", wireType)
			}
		case 29:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OneOf = append(m.OneOf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFuzzymonkey
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OneOf) == 0 {
					m.OneOf = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OneOf = append(m.OneOf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOf", wireType)
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Not", wireType)
			}
			m.Not = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Not |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Schema_JSON_AdditionalProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdditionalProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdditionalProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysSucceed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AddProps = &Schema_JSON_AdditionalProperties_AlwaysSucceed{b}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddProps = &Schema_JSON_AdditionalProperties_SID{v}
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFuzzymonkey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFuzzymonkey
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFuzzymonkey(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFuzzymonkey = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFuzzymonkey   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("pkg/internal/fm/fuzzymonkey.proto", fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6)
}

var fileDescriptor_fuzzymonkey_ca11aeb46e8fc4f6 = []byte{
	// 2583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcd, 0x73, 0x1b, 0xc7,
	0xb1, 0xc7, 0x02, 0x8b, 0xaf, 0x26, 0x00, 0x0e, 0x87, 0x14, 0x05, 0xaf, 0x65, 0x7d, 0xc0, 0xcf,
	0xb2, 0xfc, 0xac, 0x07, 0x3e, 0x53, 0x7a, 0x7a, 0xb1, 0x63, 0x57, 0x8a, 0x5f, 0x32, 0x68, 0x8b,
	0x04, 0x6a, 0x41, 0x3b, 0x55, 0xb9, 0x20, 0x43, 0xec, 0x00, 0x58, 0x6b, 0xbf, 0x3c, 0x3b, 0x4b,
	0x11, 0xaa, 0xfc, 0x13, 0x39, 0x27, 0xd7, 0x54, 0xa5, 0x2a, 0x87, 0xdc, 0x92, 0xca, 0x39, 0x39,
	0x24, 0x87, 0x54, 0xf9, 0x90, 0x3f, 0x20, 0xa5, 0xca, 0x25, 0xb7, 0xe4, 0x94, 0x9b, 0x9d, 0x9a,
	0x8f, 0x5d, 0x2c, 0x28, 0xca, 0xb2, 0x5d, 0x95, 0xdb, 0x74, 0xf7, 0x6f, 0x7a, 0x7a, 0xba, 0x7b,
	0xba, 0x7b, 0x01, 0xb8, 0x15, 0x3d, 0x9e, 0x6e, 0xb9, 0x01, 0xa7, 0x2c, 0x20, 0xde, 0xd6, 0xc4,
	0xdf, 0x9a, 0x24, 0x4f, 0x9f, 0xce, 0xfd, 0x30, 0x78, 0x4c, 0xe7, 0xdd, 0x88, 0x85, 0x3c, 0xb4,
	0xae, 0x4d, 0xc3, 0x70, 0xea, 0xd1, 0x2d, 0x49, 0x9d, 0x26, 0x93, 0xad, 0x98, 0xb3, 0x64, 0xcc,
	0xb5, 0xf4, 0x7f, 0xa6, 0x2e, 0x9f, 0x25, 0xa7, 0xdd, 0x71, 0xe8, 0x6f, 0x4d, 0xc3, 0x69, 0xb8,
	0x80, 0x09, 0x4a, 0x12, 0x72, 0xa5, 0xe0, 0x9d, 0x7f, 0xae, 0x43, 0x69, 0xcf, 0xe3, 0xd8, 0x82,
	0x92, 0x1f, 0x4f, 0xdb, 0xc6, 0x4d, 0xe3, 0xce, 0xca, 0x76, 0xad, 0xbb, 0xe7, 0xf1, 0xee, 0x51,
	0x3c, 0xb5, 0x05, 0xd3, 0xfa, 0xf3, 0x3a, 0x94, 0x8e, 0xe2, 0x29, 0x7e, 0x1d, 0x4c, 0x61, 0x8d,
	0x06, 0x35, 0x53, 0x50, 0xf7, 0x61, 0xf2, 0xf4, 0x69, 0xaf, 0x60, 0x4b, 0x21, 0xbe, 0x0b, 0x55,
	0x9f, 0x72, 0xe6, 0x8e, 0xe3, 0x76, 0x51, 0xe2, 0x50, 0x86, 0x3b, 0x52, 0xfc, 0x5e, 0xc1, 0x4e,
	0x21, 0xf8, 0x07, 0xd0, 0x62, 0x34, 0xa6, 0x7c, 0x14, 0xb1, 0x70, 0xca, 0x68, 0x1c, 0xb7, 0x4b,
	0x72, 0xd3, 0x66, 0xb6, 0xc9, 0x16, 0xe2, 0x81, 0x96, 0xf6, 0x0a, 0x76, 0x93, 0xe5, 0x19, 0x78,
	0x0f, 0xd0, 0x98, 0x78, 0xde, 0x88, 0xd1, 0xcf, 0x13, 0x1a, 0xf3, 0x11, 0x23, 0x4f, 0xda, 0xa6,
	0x54, 0x71, 0x35, 0x53, 0xb1, 0x47, 0x3c, 0xcf, 0x56, 0x72, 0x9b, 0x3c, 0xe9, 0x15, 0xec, 0xd6,
	0x78, 0x89, 0x83, 0x1f, 0xc2, 0x9a, 0x56, 0x12, 0x47, 0x61, 0x10, 0x53, 0xa9, 0xa5, 0x2c, 0xb5,
	0xb4, 0x2f, 0x68, 0x51, 0x00, 0xa5, 0x66, 0x75, 0xbc, 0xcc, 0xc2, 0x8f, 0x60, 0x5d, 0xea, 0x39,
	0xa3, 0xcc, 0x9d, 0x2c, 0xae, 0x54, 0x91, 0x9a, 0xac, 0x25, 0x4d, 0x9f, 0x0a, 0x48, 0xee, 0x5a,
	0xd2, 0x80, 0x25, 0xa6, 0xf5, 0x0f, 0x13, 0x4c, 0xe1, 0x5a, 0xbc, 0x0d, 0x35, 0x79, 0x69, 0x4e,
	0x99, 0xf6, 0xfd, 0xe6, 0x92, 0xef, 0x95, 0x8f, 0x38, 0x65, 0x76, 0x86, 0xc3, 0x0f, 0x00, 0xfc,
	0xd0, 0xa1, 0xde, 0xe8, 0xb1, 0x1b, 0x38, 0x32, 0x12, 0xad, 0x9c, 0x47, 0xe4, 0xae, 0x23, 0x21,
	0xff, 0xd8, 0x0d, 0x1c, 0xbb, 0xee, 0xa7, 0x4b, 0xfc, 0x16, 0x94, 0x25, 0xa1, 0xe3, 0xb0, 0x7e,
	0xc9, 0x16, 0x5b, 0x21, 0xf0, 0x06, 0x94, 0x93, 0x98, 0x4c, 0x69, 0xdb, 0xbc, 0x59, 0xba, 0x53,
	0xb7, 0x15, 0x81, 0x31, 0x98, 0x31, 0xa5, 0x8e, 0x74, 0x5f, 0xc3, 0x96, 0x6b, 0x7c, 0x0d, 0xea,
	0x22, 0xa5, 0x83, 0xd8, 0xe5, 0x73, 0xe9, 0x8d, 0xa6, 0xbd, 0x60, 0x88, 0x1d, 0x07, 0x87, 0xfb,
	0x71, 0xbb, 0x7a, 0xb3, 0x74, 0xa7, 0x69, 0xcb, 0xb5, 0xf5, 0x53, 0x03, 0x6a, 0xe9, 0xad, 0xf0,
	0x7d, 0x28, 0xc7, 0x33, 0xea, 0x79, 0xfa, 0xf2, 0xd7, 0x2e, 0xbf, 0x7c, 0x77, 0x28, 0x30, 0xbd,
	0x82, 0xad, 0xc0, 0xd6, 0x1e, 0x94, 0x25, 0x47, 0xd8, 0x19, 0x73, 0xc2, 0xb8, 0xdc, 0x5e, 0xb7,
	0x15, 0x81, 0x11, 0x94, 0x58, 0xcc, 0xa5, 0x67, 0xea, 0xb6, 0x58, 0x4a, 0xcb, 0x79, 0x18, 0xc9,
	0x9b, 0xd7, 0x6d, 0xb9, 0xde, 0x85, 0x85, 0xeb, 0xad, 0xdf, 0x1a, 0x50, 0x96, 0x0e, 0xc0, 0x1f,
	0x40, 0x3d, 0x8c, 0x68, 0x40, 0x22, 0xf7, 0xec, 0x9e, 0x36, 0xea, 0xb5, 0x4b, 0x1c, 0xd5, 0xed,
	0x47, 0x34, 0xd8, 0x19, 0x1c, 0x9e, 0xdd, 0xeb, 0x15, 0xec, 0xc5, 0x0e, 0x6b, 0x02, 0xf5, 0x4c,
	0x22, 0x4e, 0x9d, 0xb8, 0x1e, 0xd5, 0xc6, 0xc9, 0xb5, 0xe0, 0xcd, 0xc2, 0xcc, 0x38, 0xb9, 0xc6,
	0xef, 0xc0, 0xc6, 0x8c, 0x12, 0x87, 0xb2, 0x11, 0x49, 0xf8, 0x2c, 0x64, 0xee, 0x53, 0xc2, 0xdd,
	0x30, 0xd0, 0xd6, 0xae, 0x2b, 0xd9, 0x4e, 0x5e, 0xb4, 0x5b, 0xd5, 0xb1, 0xec, 0xbc, 0x09, 0xf5,
	0x2c, 0xd8, 0x78, 0x05, 0xaa, 0x9f, 0x1c, 0x7f, 0x7c, 0xdc, 0xff, 0xe1, 0x31, 0x2a, 0xe0, 0x66,
	0xce, 0x14, 0x64, 0x58, 0x75, 0xa8, 0xea, 0x47, 0x6a, 0xfd, 0xda, 0x80, 0xe6, 0xd2, 0xdb, 0xc3,
	0xff, 0x07, 0x95, 0x98, 0x13, 0x9e, 0xc4, 0xd2, 0xd6, 0x56, 0xee, 0xca, 0x4b, 0xb8, 0xee, 0x50,
	0x82, 0x6c, 0x0d, 0xc6, 0x57, 0xa1, 0xca, 0xe3, 0x91, 0xe3, 0x4e, 0x26, 0xf2, 0x3e, 0xa6, 0x5d,
	0xe1, 0xf1, 0xbe, 0x3b, 0x99, 0xe0, 0x4d, 0xa8, 0x30, 0x4a, 0x62, 0x79, 0x07, 0x91, 0x40, 0x9a,
	0xea, 0x3c, 0x80, 0x8a, 0x52, 0x81, 0x6b, 0x60, 0x1e, 0xf7, 0xfb, 0x03, 0x54, 0x10, 0x46, 0xcb,
	0xb0, 0x51, 0x07, 0x19, 0xb8, 0x0e, 0x65, 0x1a, 0x38, 0xd4, 0x41, 0x45, 0x0c, 0x50, 0x99, 0x10,
	0xd7, 0xa3, 0x0e, 0x2a, 0x59, 0x7f, 0x2b, 0x41, 0x6b, 0xf9, 0xa9, 0xe3, 0x7b, 0x50, 0x76, 0x83,
	0x28, 0xe1, 0xcf, 0x05, 0x69, 0x19, 0xd7, 0x3d, 0x14, 0x20, 0x5b, 0x61, 0xad, 0x9f, 0x97, 0xa0,
	0x2c, 0x19, 0xf8, 0x18, 0x1a, 0x33, 0xce, 0xa3, 0xb4, 0xb8, 0x68, 0x2d, 0x6f, 0x7d, 0xad, 0x96,
	0x6e, 0x8f, 0xf3, 0x48, 0x33, 0x7b, 0x05, 0x7b, 0x65, 0xb6, 0x20, 0xad, 0xdf, 0x15, 0x61, 0x25,
	0x27, 0x16, 0x1e, 0xf0, 0x29, 0x9f, 0x85, 0x8e, 0x8e, 0xbe, 0xa6, 0x44, 0x6e, 0x26, 0xcc, 0x4b,
	0x73, 0x33, 0x61, 0x1e, 0x1e, 0x40, 0x55, 0x45, 0x38, 0x96, 0xce, 0x5a, 0xd9, 0x7e, 0xf0, 0x8d,
	0x8d, 0xe8, 0xf6, 0xd4, 0xc6, 0x83, 0x80, 0xb3, 0xb9, 0x9d, 0xaa, 0x11, 0x39, 0x76, 0x1a, 0x3a,
	0x73, 0x59, 0x2c, 0x1b, 0xb6, 0x5c, 0x5b, 0xb7, 0xa1, 0xa1, 0xc0, 0x9f, 0x12, 0x2f, 0xa1, 0xb1,
	0xb0, 0xef, 0x4c, 0xae, 0xda, 0x86, 0x8a, 0x90, 0xa2, 0x2c, 0x96, 0xe2, 0x94, 0x52, 0x61, 0xef,
	0x63, 0x3a, 0xd7, 0x97, 0x10, 0x4b, 0xfc, 0x08, 0xca, 0x12, 0xab, 0x7b, 0xc0, 0xb7, 0xb6, 0x56,
	0x19, 0x60, 0x2b, 0x25, 0xef, 0x15, 0xbf, 0x67, 0x88, 0x64, 0x56, 0xe1, 0xf9, 0x8d, 0x09, 0xab,
	0x17, 0x6a, 0x31, 0xfe, 0x7f, 0xa8, 0x84, 0x09, 0x5f, 0x04, 0xfa, 0xc6, 0x8b, 0xaa, 0x76, 0xb7,
	0x2f, 0x61, 0xb6, 0x86, 0x5b, 0x7f, 0x2f, 0x41, 0x45, 0xb1, 0xf0, 0x10, 0x9a, 0x3a, 0xd8, 0x0a,
	0xad, 0x55, 0xdd, 0x7d, 0x89, 0x2a, 0x6d, 0xbc, 0x62, 0xf7, 0x0a, 0x76, 0x63, 0x96, 0xa3, 0xad,
	0xaf, 0x8a, 0xd0, 0xc8, 0x03, 0x44, 0x31, 0xa2, 0x8c, 0x85, 0x2c, 0x2d, 0x46, 0x92, 0xc0, 0x37,
	0x60, 0x45, 0xbd, 0x96, 0xd1, 0x38, 0x74, 0x94, 0xd3, 0x9a, 0x36, 0x28, 0xd6, 0x5e, 0xe8, 0xd0,
	0xa5, 0xb7, 0x62, 0x2c, 0xde, 0x0a, 0x1e, 0x2e, 0xf2, 0xc2, 0x94, 0x79, 0xf1, 0xee, 0xb7, 0x31,
	0xf7, 0x25, 0xa9, 0x51, 0x5e, 0xa4, 0x06, 0x6e, 0x43, 0x95, 0x7a, 0x24, 0x8a, 0xa9, 0xa3, 0x0b,
	0x78, 0x4a, 0x7e, 0xe3, 0xa4, 0x49, 0x5e, 0x9a, 0x34, 0xfd, 0xe5, 0xa4, 0xf9, 0x2e, 0x57, 0x79,
	0x3e, 0x6f, 0x6a, 0x69, 0x6a, 0x58, 0x5f, 0x19, 0xb0, 0xf6, 0x5c, 0xeb, 0xc5, 0xef, 0x5e, 0xa8,
	0x6a, 0xb7, 0x5e, 0xdc, 0xa6, 0x2f, 0x56, 0x36, 0x0c, 0x66, 0x40, 0x7c, 0x9a, 0x96, 0x69, 0xb1,
	0x7e, 0x51, 0x51, 0xc3, 0xf7, 0x64, 0x23, 0x51, 0x89, 0x95, 0xce, 0x27, 0x6a, 0x8e, 0xeb, 0xa6,
	0x03, 0x5a, 0x77, 0x28, 0xe7, 0x38, 0x3b, 0x03, 0x76, 0x8e, 0xf3, 0x95, 0xd0, 0x09, 0x03, 0x8a,
	0x0a, 0x72, 0x45, 0x38, 0x41, 0x86, 0xac, 0x89, 0x8f, 0xdd, 0x28, 0x92, 0x85, 0xb0, 0xae, 0x9b,
	0x1c, 0x2a, 0x49, 0x7e, 0x32, 0x1e, 0xd3, 0x38, 0x46, 0xa6, 0x20, 0x44, 0x81, 0x4c, 0x18, 0x45,
	0xe5, 0xdd, 0xb2, 0x1c, 0xf2, 0x3a, 0x3f, 0x2b, 0x43, 0x69, 0xc8, 0xce, 0x2e, 0xce, 0x7c, 0x43,
	0x76, 0xb6, 0x98, 0xf9, 0xfe, 0x65, 0x66, 0x33, 0x9f, 0x98, 0x4c, 0xb2, 0x99, 0x4f, 0x83, 0xa4,
	0x73, 0xc4, 0xcc, 0x27, 0x84, 0xf8, 0x7d, 0x68, 0x8a, 0xd9, 0x6f, 0x31, 0xf1, 0xa8, 0x00, 0x5e,
	0xc9, 0xd0, 0xa2, 0x27, 0xe6, 0x86, 0x9d, 0xc6, 0x24, 0x47, 0xe3, 0xdb, 0x50, 0x96, 0x3d, 0x56,
	0x8f, 0x1c, 0xad, 0x6c, 0x97, 0x6c, 0x2b, 0xa2, 0xa1, 0x4b, 0xb1, 0xf5, 0x87, 0x12, 0x98, 0xe2,
	0x58, 0x31, 0xa3, 0xe4, 0xab, 0xfa, 0xfa, 0x92, 0x51, 0x4b, 0xb5, 0x5c, 0x24, 0x19, 0x3d, 0x74,
	0xf4, 0x83, 0x12, 0x4b, 0xeb, 0xcb, 0x62, 0x5a, 0xdd, 0xf7, 0x2f, 0xad, 0xee, 0x37, 0x2e, 0xd1,
	0xf6, 0x75, 0x35, 0xfd, 0x17, 0xdf, 0xb9, 0xa6, 0x3f, 0xbc, 0x58, 0xd3, 0xef, 0xbe, 0xe4, 0xe8,
	0xff, 0x40, 0x25, 0x9f, 0xbd, 0xf4, 0x51, 0xee, 0x2e, 0x3f, 0xca, 0x6f, 0x68, 0xe3, 0xd7, 0xd4,
	0xef, 0x2a, 0x94, 0x65, 0x60, 0xad, 0x16, 0x34, 0xf2, 0x79, 0x91, 0x66, 0xe7, 0xaf, 0x0c, 0xa8,
	0x0c, 0x23, 0x3a, 0x3e, 0xb4, 0x71, 0x07, 0xaa, 0xf1, 0x78, 0x46, 0x7d, 0x12, 0x2f, 0x92, 0x54,
	0xd1, 0x76, 0x2a, 0xc0, 0xf7, 0xa1, 0x4e, 0x03, 0x27, 0x0a, 0xdd, 0x80, 0x8b, 0xbc, 0x2b, 0xc9,
	0xe9, 0x58, 0xed, 0xef, 0x1e, 0xa4, 0x02, 0xe5, 0xb1, 0x05, 0xd0, 0xfa, 0x10, 0x5a, 0xcb, 0xc2,
	0xfc, 0xcd, 0x9b, 0xea, 0xe6, 0x37, 0x96, 0x6f, 0x5e, 0xcf, 0xd4, 0xe5, 0xae, 0xd5, 0xf9, 0x09,
	0x54, 0xb5, 0x49, 0xf8, 0x36, 0x98, 0x9f, 0x89, 0x87, 0x6f, 0x48, 0x23, 0x70, 0x6a, 0x6a, 0xf7,
	0xa3, 0x38, 0x0c, 0x94, 0x01, 0x52, 0x6e, 0x1d, 0x42, 0x3d, 0x63, 0x5d, 0x72, 0xec, 0xed, 0xe5,
	0x63, 0x51, 0xd7, 0xa6, 0x93, 0x3e, 0x53, 0xca, 0x3e, 0x1a, 0xf6, 0x8f, 0xf3, 0xa7, 0x7f, 0x06,
	0xab, 0x17, 0xa4, 0xf8, 0x3a, 0x94, 0x22, 0x9e, 0x7e, 0x27, 0x80, 0x36, 0x62, 0xc0, 0x59, 0xaf,
	0x60, 0x0b, 0x01, 0xbe, 0x0d, 0x15, 0xe5, 0x3a, 0xad, 0xbf, 0xa1, 0x21, 0x5d, 0xb1, 0xbb, 0x57,
	0xb0, 0xb5, 0x74, 0x77, 0x15, 0x9a, 0x11, 0x67, 0xa3, 0x90, 0x8d, 0x14, 0xa3, 0xb3, 0x05, 0xf5,
	0x4c, 0x99, 0x30, 0x7b, 0x78, 0xb8, 0x9f, 0x9a, 0x3d, 0x3c, 0xdc, 0x97, 0xf3, 0x34, 0x9d, 0x64,
	0xf3, 0x34, 0x9d, 0x74, 0xbe, 0x0f, 0xb5, 0xd4, 0x63, 0xa2, 0x8c, 0x68, 0xdf, 0xa8, 0x32, 0x92,
	0x0a, 0xf4, 0xa1, 0x52, 0x28, 0x86, 0xed, 0x34, 0x42, 0x9d, 0x2f, 0x8b, 0xd0, 0xc8, 0x83, 0xf0,
	0xdd, 0xa5, 0x77, 0xd5, 0xda, 0xde, 0x58, 0xd2, 0x21, 0xbe, 0x2d, 0x67, 0xa1, 0x93, 0xbd, 0xb6,
	0x77, 0xa0, 0x19, 0x11, 0x3e, 0x1b, 0x45, 0x84, 0x71, 0x97, 0x78, 0x69, 0x66, 0x34, 0xba, 0x03,
	0xc2, 0x67, 0x03, 0xc5, 0xb4, 0x1b, 0xd1, 0x82, 0x88, 0x71, 0x07, 0x2a, 0x32, 0x41, 0xd3, 0xd7,
	0x08, 0xdd, 0x01, 0x61, 0xc4, 0x97, 0x2e, 0xd7, 0x12, 0x7c, 0x1f, 0xaa, 0xaa, 0x99, 0xa4, 0xed,
	0xd6, 0x5a, 0xb6, 0x42, 0x35, 0xa6, 0xf4, 0x81, 0x6a, 0xa8, 0xf5, 0x1e, 0x34, 0xf2, 0x82, 0x4b,
	0x62, 0xbe, 0x91, 0x8f, 0x79, 0x33, 0x1f, 0xe1, 0x27, 0x50, 0x51, 0x57, 0x5b, 0x9e, 0xdb, 0xab,
	0x50, 0xfa, 0xf0, 0xe0, 0x04, 0x19, 0xa2, 0x1d, 0xf4, 0x0e, 0x76, 0xf6, 0x51, 0x51, 0xac, 0x06,
	0xfd, 0xe1, 0x09, 0x2a, 0x09, 0xe1, 0xe0, 0x93, 0x13, 0x64, 0x8a, 0xa6, 0x30, 0xd8, 0x39, 0xd9,
	0xeb, 0xa1, 0xb2, 0x18, 0x94, 0xf7, 0x0f, 0x1e, 0x1d, 0x9c, 0x1c, 0xa0, 0x8a, 0xd0, 0xb4, 0xd7,
	0x3f, 0x3e, 0x3e, 0xd8, 0x3b, 0x41, 0x55, 0x41, 0xf4, 0x07, 0x27, 0x87, 0xfd, 0xe3, 0x21, 0xaa,
	0x89, 0x0d, 0x27, 0xf6, 0xce, 0xde, 0x01, 0xaa, 0x77, 0x7e, 0x6f, 0x40, 0x3d, 0x73, 0x80, 0x18,
	0x50, 0xdc, 0x58, 0x56, 0x4a, 0x97, 0x51, 0x15, 0x82, 0x9a, 0x0d, 0x6e, 0x6c, 0x6b, 0x4e, 0x9a,
	0x10, 0xc5, 0x45, 0x42, 0xa4, 0xdd, 0xb1, 0x94, 0xeb, 0x8e, 0xaf, 0x83, 0x29, 0xbf, 0x47, 0x4d,
	0x19, 0xc2, 0xd5, 0x85, 0x87, 0xbb, 0xf2, 0x3b, 0x54, 0x0a, 0x3b, 0x1f, 0x81, 0xf9, 0xfc, 0x87,
	0x4a, 0x4d, 0x15, 0x39, 0x75, 0x63, 0x11, 0x37, 0xd5, 0xf3, 0x3e, 0x4f, 0x28, 0x9b, 0xa3, 0x92,
	0xb8, 0x9e, 0x2a, 0x87, 0xc8, 0x14, 0xeb, 0x71, 0x18, 0x3e, 0x76, 0x29, 0x2a, 0x77, 0x3e, 0x80,
	0x95, 0x5c, 0xc4, 0xf1, 0x86, 0xd8, 0x9b, 0x7e, 0x09, 0x8a, 0xbc, 0x13, 0x14, 0xc6, 0xea, 0xc9,
	0x14, 0x35, 0x53, 0x10, 0xbb, 0x26, 0x14, 0xa3, 0xa8, 0xf3, 0x97, 0x06, 0x54, 0x54, 0xd2, 0x5b,
	0x7f, 0x6a, 0x80, 0x29, 0x5d, 0xf1, 0x26, 0x94, 0xf9, 0x3c, 0xd2, 0x95, 0xb4, 0xb5, 0xbd, 0x96,
	0x7f, 0x3f, 0xdd, 0x93, 0x79, 0x44, 0x6d, 0x25, 0xc7, 0xff, 0x0d, 0x26, 0x0d, 0x12, 0x3f, 0x2b,
	0x4a, 0x17, 0xdb, 0xbd, 0xac, 0x91, 0xb6, 0xc4, 0xe0, 0xb7, 0xa1, 0x32, 0x09, 0x99, 0x4f, 0x54,
	0x13, 0x6c, 0x89, 0x9e, 0x96, 0xd3, 0xfa, 0x50, 0x8a, 0x6c, 0x0d, 0xc1, 0xaf, 0x01, 0xf8, 0x6e,
	0x30, 0xf2, 0x68, 0x30, 0xe5, 0x33, 0xe9, 0x4b, 0xd3, 0xae, 0xfb, 0x6e, 0xf0, 0x48, 0x32, 0xa4,
	0x98, 0x9c, 0xa7, 0xe2, 0xb2, 0x16, 0x93, 0x73, 0x2d, 0xfe, 0x2f, 0x68, 0xcd, 0x48, 0x3c, 0xca,
	0x41, 0x2a, 0x32, 0x9a, 0x8d, 0x19, 0x89, 0x8f, 0x32, 0x54, 0x1b, 0xaa, 0x11, 0x11, 0x9f, 0xbd,
	0x41, 0xbb, 0x2a, 0x03, 0x98, 0x92, 0x42, 0xe2, 0xbb, 0x81, 0xeb, 0x27, 0x7e, 0xbb, 0x76, 0xd3,
	0xb8, 0x63, 0xd8, 0x29, 0x29, 0x25, 0xe4, 0x5c, 0x4a, 0xea, 0x5a, 0xa2, 0x48, 0x91, 0x3e, 0xf2,
	0x4c, 0xbd, 0x0f, 0x54, 0xfa, 0x88, 0x03, 0xf5, 0xd6, 0x14, 0xa0, 0xb7, 0xaf, 0x2c, 0x00, 0x5a,
	0xc3, 0x7d, 0xd8, 0xe4, 0x8c, 0x04, 0xb1, 0x47, 0x38, 0x75, 0x46, 0x7e, 0xe2, 0x71, 0x37, 0xf2,
	0xe8, 0x28, 0x9c, 0xb4, 0x1b, 0xf2, 0xa8, 0x8d, 0x85, 0xf4, 0x48, 0x0b, 0xfb, 0x13, 0xfc, 0x36,
	0xac, 0xd1, 0xf3, 0xb1, 0x97, 0xc4, 0xee, 0x19, 0xcd, 0x4e, 0x6f, 0x4a, 0xe5, 0x28, 0x13, 0xa4,
	0x36, 0x2c, 0x83, 0xb5, 0x25, 0xad, 0x8b, 0x60, 0x6d, 0xcf, 0x06, 0x94, 0x5d, 0x4e, 0xfd, 0xb8,
	0xbd, 0x2a, 0x7f, 0xb5, 0x50, 0x04, 0xbe, 0x05, 0x8d, 0x24, 0x70, 0x3f, 0x4f, 0xe8, 0x48, 0x09,
	0x91, 0xdc, 0xbd, 0xa2, 0x78, 0x87, 0x12, 0xf2, 0x2a, 0x88, 0x50, 0x69, 0xf9, 0x9a, 0x0c, 0x4e,
	0xcd, 0x77, 0x83, 0x85, 0x90, 0x9c, 0x6b, 0x21, 0xd6, 0x42, 0x72, 0xae, 0x84, 0x1d, 0x68, 0xa6,
	0x81, 0x53, 0x80, 0x75, 0xa5, 0x5d, 0x79, 0x49, 0x61, 0xde, 0x07, 0x88, 0x58, 0x18, 0x51, 0xc6,
	0x5d, 0x1a, 0xb7, 0x37, 0x64, 0xe6, 0x5d, 0x5b, 0xca, 0xa5, 0x41, 0x26, 0x56, 0x55, 0x2a, 0x87,
	0xc7, 0x96, 0x18, 0x52, 0xf5, 0x13, 0xbf, 0x22, 0xe7, 0x84, 0x8c, 0xc6, 0x6f, 0x40, 0x4b, 0xd8,
	0x9d, 0xd3, 0xbe, 0x29, 0xed, 0x6b, 0xfa, 0x6e, 0xb0, 0xd0, 0x29, 0x61, 0xe4, 0x3c, 0x0f, 0xbb,
	0xaa, 0x61, 0xe4, 0x3c, 0x07, 0xbb, 0x0b, 0x38, 0xbd, 0x4b, 0x0e, 0xda, 0x56, 0xce, 0x56, 0x17,
	0xca, 0xa1, 0x3f, 0x85, 0x2b, 0xc4, 0x71, 0x5c, 0xee, 0x86, 0x01, 0xf1, 0xf2, 0x1b, 0x5e, 0x91,
	0xed, 0xe4, 0xd6, 0xd2, 0x05, 0x77, 0x32, 0xe4, 0x42, 0x83, 0xbd, 0x41, 0x2e, 0xe1, 0xe2, 0xf7,
	0xe0, 0x15, 0x61, 0xc5, 0xe5, 0xba, 0x2d, 0x69, 0xcc, 0xd5, 0x19, 0x89, 0x2f, 0xd3, 0x88, 0xaf,
	0x40, 0x85, 0x78, 0x9e, 0x48, 0xc0, 0x57, 0x55, 0x06, 0x10, 0xcf, 0xeb, 0x4f, 0x24, 0x3b, 0x98,
	0x0b, 0xf6, 0x35, 0xcd, 0x0e, 0xe6, 0x8a, 0x1d, 0x06, 0x32, 0x5d, 0x5f, 0x53, 0xec, 0x30, 0x10,
	0xf9, 0x89, 0xa0, 0x14, 0x84, 0xbc, 0x7d, 0x5d, 0x55, 0xcd, 0x20, 0xe4, 0xd6, 0x07, 0xb0, 0x7a,
	0x21, 0x42, 0x97, 0xcc, 0x64, 0x2f, 0x6c, 0x17, 0xd6, 0x8f, 0x61, 0xe3, 0x52, 0x6b, 0xdf, 0x84,
	0x16, 0xf1, 0x9e, 0x90, 0x79, 0x3c, 0x92, 0x9f, 0x06, 0x69, 0x09, 0xef, 0x15, 0xec, 0xa6, 0xe2,
	0x0f, 0x15, 0x5b, 0xd4, 0xc2, 0xac, 0x8e, 0x8b, 0x5a, 0x38, 0x3c, 0xdc, 0xdf, 0x5d, 0x81, 0x3a,
	0x71, 0x1c, 0xe9, 0x9b, 0xb8, 0x13, 0x82, 0x29, 0x8a, 0xdc, 0x73, 0xed, 0x88, 0x04, 0xba, 0x38,
	0x07, 0x89, 0xe7, 0xa1, 0xa2, 0x90, 0x9f, 0x86, 0xa1, 0x47, 0x49, 0xa0, 0x3e, 0x49, 0xdc, 0x80,
	0xd3, 0x69, 0x5a, 0x9f, 0x83, 0xc4, 0x3f, 0xa5, 0x0c, 0x95, 0x45, 0x09, 0x27, 0x8c, 0x91, 0x39,
	0xaa, 0x08, 0x76, 0xcc, 0x99, 0x1b, 0x4c, 0x51, 0x55, 0xac, 0xc3, 0xd3, 0xcf, 0xe8, 0x98, 0xa3,
	0x5a, 0xe7, 0x0b, 0x03, 0x2a, 0xaa, 0x00, 0xaa, 0xdf, 0x83, 0x8e, 0x0f, 0xd4, 0xef, 0x56, 0x0e,
	0xe1, 0x74, 0xc4, 0x5d, 0x9f, 0xaa, 0x63, 0x05, 0xa9, 0x7a, 0x02, 0xf5, 0x89, 0xeb, 0x21, 0x13,
	0x37, 0xa0, 0x36, 0x0b, 0x63, 0x2e, 0x1a, 0x0f, 0xaa, 0x08, 0x88, 0x1b, 0x9d, 0xdd, 0x47, 0x35,
	0xbd, 0x7a, 0x80, 0xea, 0xc2, 0xec, 0x84, 0xb9, 0x08, 0xf0, 0x1a, 0x34, 0x13, 0xe6, 0x8e, 0x18,
	0x9d, 0x50, 0x46, 0x83, 0x31, 0x45, 0x2b, 0x42, 0x11, 0xa3, 0x53, 0x7a, 0x8e, 0xd6, 0xc4, 0xd2,
	0x0d, 0xf8, 0xbd, 0x6d, 0x84, 0xf5, 0xf2, 0xc1, 0x7d, 0xb4, 0x2e, 0x96, 0x13, 0x2f, 0x24, 0x1c,
	0x6d, 0x08, 0x73, 0x9d, 0x30, 0x39, 0xf5, 0x28, 0xba, 0x22, 0x1b, 0xd5, 0x9c, 0x53, 0xb4, 0x29,
	0xb8, 0xa7, 0x6e, 0x40, 0xd8, 0x1c, 0x5d, 0x15, 0xb6, 0x44, 0x24, 0x8e, 0x9f, 0x84, 0xcc, 0x41,
	0xed, 0xed, 0x37, 0x60, 0x45, 0x4c, 0xbe, 0xf3, 0x23, 0xf9, 0xb3, 0x3e, 0xde, 0x84, 0xe2, 0x7e,
	0x88, 0x4d, 0xf1, 0xe1, 0x69, 0x99, 0x62, 0xbe, 0xee, 0x14, 0xee, 0x18, 0xff, 0x6b, 0xec, 0xee,
	0xfc, 0xf2, 0xd9, 0x75, 0xe3, 0x8f, 0xcf, 0xae, 0x1b, 0x5f, 0x3c, 0xbb, 0x6e, 0xfc, 0xf5, 0xd9,
	0x75, 0xe3, 0x47, 0x5b, 0xb9, 0x1f, 0xf7, 0x73, 0x1a, 0xf6, 0xc2, 0x2d, 0xf5, 0x0f, 0xc1, 0xd6,
	0x85, 0x7f, 0x0f, 0x4e, 0x2b, 0xb2, 0xdb, 0xdc, 0xfb, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3,
	0x69, 0x8e, 0x9e, 0x57, 0x18, 0x00, 0x00,
}

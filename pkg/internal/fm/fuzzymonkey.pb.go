// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/internal/fm/fuzzymonkey.proto

package fm // import "github.com/FuzzyMonkeyCo/monkey/pkg/internal/fm"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Clt_Msg_Fuzz_ModelKind int32

const (
	Clt_Msg_Fuzz_UNKNOWN   Clt_Msg_Fuzz_ModelKind = 0
	Clt_Msg_Fuzz_OpenAPIv3 Clt_Msg_Fuzz_ModelKind = 1
)

var Clt_Msg_Fuzz_ModelKind_name = map[int32]string{
	0: "UNKNOWN",
	1: "OpenAPIv3",
}
var Clt_Msg_Fuzz_ModelKind_value = map[string]int32{
	"UNKNOWN":   0,
	"OpenAPIv3": 1,
}

func (x Clt_Msg_Fuzz_ModelKind) String() string {
	return proto.EnumName(Clt_Msg_Fuzz_ModelKind_name, int32(x))
}
func (Clt_Msg_Fuzz_ModelKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 0, 0}
}

type Clt_Msg_ResetProgress_Status int32

const (
	Clt_Msg_ResetProgress_NOOP    Clt_Msg_ResetProgress_Status = 0
	Clt_Msg_ResetProgress_started Clt_Msg_ResetProgress_Status = 1
	Clt_Msg_ResetProgress_ended   Clt_Msg_ResetProgress_Status = 2
	Clt_Msg_ResetProgress_failed  Clt_Msg_ResetProgress_Status = 3
)

var Clt_Msg_ResetProgress_Status_name = map[int32]string{
	0: "NOOP",
	1: "started",
	2: "ended",
	3: "failed",
}
var Clt_Msg_ResetProgress_Status_value = map[string]int32{
	"NOOP":    0,
	"started": 1,
	"ended":   2,
	"failed":  3,
}

func (x Clt_Msg_ResetProgress_Status) String() string {
	return proto.EnumName(Clt_Msg_ResetProgress_Status_name, int32(x))
}
func (Clt_Msg_ResetProgress_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 3, 0}
}

type Clt struct {
	Msg                  *Clt_Msg `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt) Reset()         { *m = Clt{} }
func (m *Clt) String() string { return proto.CompactTextString(m) }
func (*Clt) ProtoMessage()    {}
func (*Clt) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0}
}
func (m *Clt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt.Merge(dst, src)
}
func (m *Clt) XXX_Size() int {
	return m.Size()
}
func (m *Clt) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt.DiscardUnknown(m)
}

var xxx_messageInfo_Clt proto.InternalMessageInfo

func (m *Clt) GetMsg() *Clt_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Clt_Msg struct {
	// Types that are valid to be assigned to Msg:
	//	*Clt_Msg_Fuzz_
	//	*Clt_Msg_FuzzProgress_
	//	*Clt_Msg_Metrics_
	//	*Clt_Msg_ResetProgress_
	//	*Clt_Msg_CallResponseRaw_
	//	*Clt_Msg_CallVerifProgress_
	//	*Clt_Msg_CallResponse_
	Msg                  isClt_Msg_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Clt_Msg) Reset()         { *m = Clt_Msg{} }
func (m *Clt_Msg) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg) ProtoMessage()    {}
func (*Clt_Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0}
}
func (m *Clt_Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg.Merge(dst, src)
}
func (m *Clt_Msg) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg proto.InternalMessageInfo

type isClt_Msg_Msg interface {
	isClt_Msg_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_Fuzz_ struct {
	Fuzz *Clt_Msg_Fuzz `protobuf:"bytes,1,opt,name=fuzz,oneof"`
}
type Clt_Msg_FuzzProgress_ struct {
	FuzzProgress *Clt_Msg_FuzzProgress `protobuf:"bytes,2,opt,name=fuzz_progress,json=fuzzProgress,oneof"`
}
type Clt_Msg_Metrics_ struct {
	Metrics *Clt_Msg_Metrics `protobuf:"bytes,3,opt,name=metrics,oneof"`
}
type Clt_Msg_ResetProgress_ struct {
	ResetProgress *Clt_Msg_ResetProgress `protobuf:"bytes,4,opt,name=reset_progress,json=resetProgress,oneof"`
}
type Clt_Msg_CallResponseRaw_ struct {
	CallResponseRaw *Clt_Msg_CallResponseRaw `protobuf:"bytes,5,opt,name=call_response_raw,json=callResponseRaw,oneof"`
}
type Clt_Msg_CallVerifProgress_ struct {
	CallVerifProgress *Clt_Msg_CallVerifProgress `protobuf:"bytes,6,opt,name=call_verif_progress,json=callVerifProgress,oneof"`
}
type Clt_Msg_CallResponse_ struct {
	CallResponse *Clt_Msg_CallResponse `protobuf:"bytes,7,opt,name=call_response,json=callResponse,oneof"`
}

func (*Clt_Msg_Fuzz_) isClt_Msg_Msg()              {}
func (*Clt_Msg_FuzzProgress_) isClt_Msg_Msg()      {}
func (*Clt_Msg_Metrics_) isClt_Msg_Msg()           {}
func (*Clt_Msg_ResetProgress_) isClt_Msg_Msg()     {}
func (*Clt_Msg_CallResponseRaw_) isClt_Msg_Msg()   {}
func (*Clt_Msg_CallVerifProgress_) isClt_Msg_Msg() {}
func (*Clt_Msg_CallResponse_) isClt_Msg_Msg()      {}

func (m *Clt_Msg) GetMsg() isClt_Msg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Clt_Msg) GetFuzz() *Clt_Msg_Fuzz {
	if x, ok := m.GetMsg().(*Clt_Msg_Fuzz_); ok {
		return x.Fuzz
	}
	return nil
}

func (m *Clt_Msg) GetFuzzProgress() *Clt_Msg_FuzzProgress {
	if x, ok := m.GetMsg().(*Clt_Msg_FuzzProgress_); ok {
		return x.FuzzProgress
	}
	return nil
}

func (m *Clt_Msg) GetMetrics() *Clt_Msg_Metrics {
	if x, ok := m.GetMsg().(*Clt_Msg_Metrics_); ok {
		return x.Metrics
	}
	return nil
}

func (m *Clt_Msg) GetResetProgress() *Clt_Msg_ResetProgress {
	if x, ok := m.GetMsg().(*Clt_Msg_ResetProgress_); ok {
		return x.ResetProgress
	}
	return nil
}

func (m *Clt_Msg) GetCallResponseRaw() *Clt_Msg_CallResponseRaw {
	if x, ok := m.GetMsg().(*Clt_Msg_CallResponseRaw_); ok {
		return x.CallResponseRaw
	}
	return nil
}

func (m *Clt_Msg) GetCallVerifProgress() *Clt_Msg_CallVerifProgress {
	if x, ok := m.GetMsg().(*Clt_Msg_CallVerifProgress_); ok {
		return x.CallVerifProgress
	}
	return nil
}

func (m *Clt_Msg) GetCallResponse() *Clt_Msg_CallResponse {
	if x, ok := m.GetMsg().(*Clt_Msg_CallResponse_); ok {
		return x.CallResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_OneofMarshaler, _Clt_Msg_OneofUnmarshaler, _Clt_Msg_OneofSizer, []interface{}{
		(*Clt_Msg_Fuzz_)(nil),
		(*Clt_Msg_FuzzProgress_)(nil),
		(*Clt_Msg_Metrics_)(nil),
		(*Clt_Msg_ResetProgress_)(nil),
		(*Clt_Msg_CallResponseRaw_)(nil),
		(*Clt_Msg_CallVerifProgress_)(nil),
		(*Clt_Msg_CallResponse_)(nil),
	}
}

func _Clt_Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Clt_Msg_Fuzz_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fuzz); err != nil {
			return err
		}
	case *Clt_Msg_FuzzProgress_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FuzzProgress); err != nil {
			return err
		}
	case *Clt_Msg_Metrics_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Metrics); err != nil {
			return err
		}
	case *Clt_Msg_ResetProgress_:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetProgress); err != nil {
			return err
		}
	case *Clt_Msg_CallResponseRaw_:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallResponseRaw); err != nil {
			return err
		}
	case *Clt_Msg_CallVerifProgress_:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallVerifProgress); err != nil {
			return err
		}
	case *Clt_Msg_CallResponse_:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg.Msg has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg)
	switch tag {
	case 1: // msg.fuzz
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_Fuzz)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_Fuzz_{msg}
		return true, err
	case 2: // msg.fuzz_progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_FuzzProgress)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_FuzzProgress_{msg}
		return true, err
	case 3: // msg.metrics
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_Metrics)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_Metrics_{msg}
		return true, err
	case 4: // msg.reset_progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_ResetProgress)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_ResetProgress_{msg}
		return true, err
	case 5: // msg.call_response_raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallResponseRaw)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_CallResponseRaw_{msg}
		return true, err
	case 6: // msg.call_verif_progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallVerifProgress)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_CallVerifProgress_{msg}
		return true, err
	case 7: // msg.call_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallResponse)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_CallResponse_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Clt_Msg_Fuzz_:
		s := proto.Size(x.Fuzz)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_FuzzProgress_:
		s := proto.Size(x.FuzzProgress)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_Metrics_:
		s := proto.Size(x.Metrics)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_ResetProgress_:
		s := proto.Size(x.ResetProgress)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_CallResponseRaw_:
		s := proto.Size(x.CallResponseRaw)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_CallVerifProgress_:
		s := proto.Size(x.CallVerifProgress)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_CallResponse_:
		s := proto.Size(x.CallResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_Fuzz struct {
	Resetter             *Clt_Msg_Fuzz_Resetter `protobuf:"bytes,1,opt,name=resetter" json:"resetter,omitempty"`
	ModelKind            Clt_Msg_Fuzz_ModelKind `protobuf:"varint,2,opt,name=model_kind,json=modelKind,proto3,enum=fm.Clt_Msg_Fuzz_ModelKind" json:"model_kind,omitempty"`
	Model                *Clt_Msg_Fuzz_Model    `protobuf:"bytes,3,opt,name=model" json:"model,omitempty"`
	ApiKey               string                 `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Usage                []string               `protobuf:"bytes,5,rep,name=usage" json:"usage,omitempty"`
	Seed                 []byte                 `protobuf:"bytes,6,opt,name=seed,proto3" json:"seed,omitempty"`
	Intensity            uint32                 `protobuf:"varint,7,opt,name=intensity,proto3" json:"intensity,omitempty"`
	EIDs                 []uint32               `protobuf:"varint,8,rep,packed,name=EIDs" json:"EIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Clt_Msg_Fuzz) Reset()         { *m = Clt_Msg_Fuzz{} }
func (m *Clt_Msg_Fuzz) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz) ProtoMessage()    {}
func (*Clt_Msg_Fuzz) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 0}
}
func (m *Clt_Msg_Fuzz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz proto.InternalMessageInfo

func (m *Clt_Msg_Fuzz) GetResetter() *Clt_Msg_Fuzz_Resetter {
	if m != nil {
		return m.Resetter
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetModelKind() Clt_Msg_Fuzz_ModelKind {
	if m != nil {
		return m.ModelKind
	}
	return Clt_Msg_Fuzz_UNKNOWN
}

func (m *Clt_Msg_Fuzz) GetModel() *Clt_Msg_Fuzz_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *Clt_Msg_Fuzz) GetUsage() []string {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetIntensity() uint32 {
	if m != nil {
		return m.Intensity
	}
	return 0
}

func (m *Clt_Msg_Fuzz) GetEIDs() []uint32 {
	if m != nil {
		return m.EIDs
	}
	return nil
}

type Clt_Msg_Fuzz_Resetter struct {
	// Types that are valid to be assigned to Resetter:
	//	*Clt_Msg_Fuzz_Resetter_SutShell
	Resetter             isClt_Msg_Fuzz_Resetter_Resetter `protobuf_oneof:"resetter"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *Clt_Msg_Fuzz_Resetter) Reset()         { *m = Clt_Msg_Fuzz_Resetter{} }
func (m *Clt_Msg_Fuzz_Resetter) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Resetter) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Resetter) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 0, 0}
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Resetter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Resetter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Resetter proto.InternalMessageInfo

type isClt_Msg_Fuzz_Resetter_Resetter interface {
	isClt_Msg_Fuzz_Resetter_Resetter()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_Fuzz_Resetter_SutShell struct {
	SutShell *Clt_Msg_Fuzz_Resetter_SUTShell `protobuf:"bytes,1,opt,name=sut_shell,json=sutShell,oneof"`
}

func (*Clt_Msg_Fuzz_Resetter_SutShell) isClt_Msg_Fuzz_Resetter_Resetter() {}

func (m *Clt_Msg_Fuzz_Resetter) GetResetter() isClt_Msg_Fuzz_Resetter_Resetter {
	if m != nil {
		return m.Resetter
	}
	return nil
}

func (m *Clt_Msg_Fuzz_Resetter) GetSutShell() *Clt_Msg_Fuzz_Resetter_SUTShell {
	if x, ok := m.GetResetter().(*Clt_Msg_Fuzz_Resetter_SutShell); ok {
		return x.SutShell
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg_Fuzz_Resetter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_Fuzz_Resetter_OneofMarshaler, _Clt_Msg_Fuzz_Resetter_OneofUnmarshaler, _Clt_Msg_Fuzz_Resetter_OneofSizer, []interface{}{
		(*Clt_Msg_Fuzz_Resetter_SutShell)(nil),
	}
}

func _Clt_Msg_Fuzz_Resetter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg_Fuzz_Resetter)
	// resetter
	switch x := m.Resetter.(type) {
	case *Clt_Msg_Fuzz_Resetter_SutShell:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SutShell); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg_Fuzz_Resetter.Resetter has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_Fuzz_Resetter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg_Fuzz_Resetter)
	switch tag {
	case 1: // resetter.sut_shell
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_Fuzz_Resetter_SUTShell)
		err := b.DecodeMessage(msg)
		m.Resetter = &Clt_Msg_Fuzz_Resetter_SutShell{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_Fuzz_Resetter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg_Fuzz_Resetter)
	// resetter
	switch x := m.Resetter.(type) {
	case *Clt_Msg_Fuzz_Resetter_SutShell:
		s := proto.Size(x.SutShell)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_Fuzz_Resetter_SUTShell struct {
	Start                string   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Rst                  string   `protobuf:"bytes,2,opt,name=rst,proto3" json:"rst,omitempty"`
	Stop                 string   `protobuf:"bytes,3,opt,name=stop,proto3" json:"stop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_Fuzz_Resetter_SUTShell) Reset()         { *m = Clt_Msg_Fuzz_Resetter_SUTShell{} }
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Resetter_SUTShell) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Resetter_SUTShell) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 0, 0, 0}
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Resetter_SUTShell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Resetter_SUTShell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter_SUTShell.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter_SUTShell.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Resetter_SUTShell proto.InternalMessageInfo

func (m *Clt_Msg_Fuzz_Resetter_SUTShell) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Resetter_SUTShell) GetRst() string {
	if m != nil {
		return m.Rst
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Resetter_SUTShell) GetStop() string {
	if m != nil {
		return m.Stop
	}
	return ""
}

type Clt_Msg_Fuzz_Model struct {
	// Types that are valid to be assigned to Model:
	//	*Clt_Msg_Fuzz_Model_Openapiv3
	Model                isClt_Msg_Fuzz_Model_Model `protobuf_oneof:"model"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Clt_Msg_Fuzz_Model) Reset()         { *m = Clt_Msg_Fuzz_Model{} }
func (m *Clt_Msg_Fuzz_Model) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Model) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Model) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 0, 1}
}
func (m *Clt_Msg_Fuzz_Model) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Model) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Model.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Model) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Model.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Model) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Model) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Model.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Model proto.InternalMessageInfo

type isClt_Msg_Fuzz_Model_Model interface {
	isClt_Msg_Fuzz_Model_Model()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_Fuzz_Model_Openapiv3 struct {
	Openapiv3 *Clt_Msg_Fuzz_Model_OpenAPIv3 `protobuf:"bytes,1,opt,name=openapiv3,oneof"`
}

func (*Clt_Msg_Fuzz_Model_Openapiv3) isClt_Msg_Fuzz_Model_Model() {}

func (m *Clt_Msg_Fuzz_Model) GetModel() isClt_Msg_Fuzz_Model_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Clt_Msg_Fuzz_Model) GetOpenapiv3() *Clt_Msg_Fuzz_Model_OpenAPIv3 {
	if x, ok := m.GetModel().(*Clt_Msg_Fuzz_Model_Openapiv3); ok {
		return x.Openapiv3
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg_Fuzz_Model) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_Fuzz_Model_OneofMarshaler, _Clt_Msg_Fuzz_Model_OneofUnmarshaler, _Clt_Msg_Fuzz_Model_OneofSizer, []interface{}{
		(*Clt_Msg_Fuzz_Model_Openapiv3)(nil),
	}
}

func _Clt_Msg_Fuzz_Model_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg_Fuzz_Model)
	// model
	switch x := m.Model.(type) {
	case *Clt_Msg_Fuzz_Model_Openapiv3:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Openapiv3); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg_Fuzz_Model.Model has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_Fuzz_Model_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg_Fuzz_Model)
	switch tag {
	case 1: // model.openapiv3
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_Fuzz_Model_OpenAPIv3)
		err := b.DecodeMessage(msg)
		m.Model = &Clt_Msg_Fuzz_Model_Openapiv3{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_Fuzz_Model_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg_Fuzz_Model)
	// model
	switch x := m.Model.(type) {
	case *Clt_Msg_Fuzz_Model_Openapiv3:
		s := proto.Size(x.Openapiv3)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_Fuzz_Model_OpenAPIv3 struct {
	File                 string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Host                 string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	HeaderAuthorization  string   `protobuf:"bytes,3,opt,name=header_authorization,json=headerAuthorization,proto3" json:"header_authorization,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Reset()         { *m = Clt_Msg_Fuzz_Model_OpenAPIv3{} }
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Model_OpenAPIv3) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Model_OpenAPIv3) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 0, 1, 0}
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3 proto.InternalMessageInfo

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) GetHeaderAuthorization() string {
	if m != nil {
		return m.HeaderAuthorization
	}
	return ""
}

type Clt_Msg_FuzzProgress struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_FuzzProgress) Reset()         { *m = Clt_Msg_FuzzProgress{} }
func (m *Clt_Msg_FuzzProgress) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_FuzzProgress) ProtoMessage()    {}
func (*Clt_Msg_FuzzProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 1}
}
func (m *Clt_Msg_FuzzProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_FuzzProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_FuzzProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_FuzzProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_FuzzProgress.Merge(dst, src)
}
func (m *Clt_Msg_FuzzProgress) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_FuzzProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_FuzzProgress.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_FuzzProgress proto.InternalMessageInfo

type Clt_Msg_Metrics struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_Metrics) Reset()         { *m = Clt_Msg_Metrics{} }
func (m *Clt_Msg_Metrics) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Metrics) ProtoMessage()    {}
func (*Clt_Msg_Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 2}
}
func (m *Clt_Msg_Metrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Metrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Metrics.Merge(dst, src)
}
func (m *Clt_Msg_Metrics) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Metrics proto.InternalMessageInfo

type Clt_Msg_ResetProgress struct {
	Status               Clt_Msg_ResetProgress_Status `protobuf:"varint,1,opt,name=status,proto3,enum=fm.Clt_Msg_ResetProgress_Status" json:"status,omitempty"`
	TsDiff               uint64                       `protobuf:"varint,2,opt,name=ts_diff,json=tsDiff,proto3" json:"ts_diff,omitempty"`
	Reason               []string                     `protobuf:"bytes,3,rep,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Clt_Msg_ResetProgress) Reset()         { *m = Clt_Msg_ResetProgress{} }
func (m *Clt_Msg_ResetProgress) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_ResetProgress) ProtoMessage()    {}
func (*Clt_Msg_ResetProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 3}
}
func (m *Clt_Msg_ResetProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_ResetProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_ResetProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_ResetProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_ResetProgress.Merge(dst, src)
}
func (m *Clt_Msg_ResetProgress) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_ResetProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_ResetProgress.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_ResetProgress proto.InternalMessageInfo

func (m *Clt_Msg_ResetProgress) GetStatus() Clt_Msg_ResetProgress_Status {
	if m != nil {
		return m.Status
	}
	return Clt_Msg_ResetProgress_NOOP
}

func (m *Clt_Msg_ResetProgress) GetTsDiff() uint64 {
	if m != nil {
		return m.TsDiff
	}
	return 0
}

func (m *Clt_Msg_ResetProgress) GetReason() []string {
	if m != nil {
		return m.Reason
	}
	return nil
}

type Clt_Msg_CallResponseRaw struct {
	// Types that are valid to be assigned to Output:
	//	*Clt_Msg_CallResponseRaw_HttpResponse_
	Output               isClt_Msg_CallResponseRaw_Output `protobuf_oneof:"output"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *Clt_Msg_CallResponseRaw) Reset()         { *m = Clt_Msg_CallResponseRaw{} }
func (m *Clt_Msg_CallResponseRaw) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallResponseRaw) ProtoMessage()    {}
func (*Clt_Msg_CallResponseRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 4}
}
func (m *Clt_Msg_CallResponseRaw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallResponseRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallResponseRaw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallResponseRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallResponseRaw.Merge(dst, src)
}
func (m *Clt_Msg_CallResponseRaw) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallResponseRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallResponseRaw.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallResponseRaw proto.InternalMessageInfo

type isClt_Msg_CallResponseRaw_Output interface {
	isClt_Msg_CallResponseRaw_Output()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_CallResponseRaw_HttpResponse_ struct {
	HttpResponse *Clt_Msg_CallResponseRaw_HttpResponse `protobuf:"bytes,1,opt,name=http_response,json=httpResponse,oneof"`
}

func (*Clt_Msg_CallResponseRaw_HttpResponse_) isClt_Msg_CallResponseRaw_Output() {}

func (m *Clt_Msg_CallResponseRaw) GetOutput() isClt_Msg_CallResponseRaw_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Clt_Msg_CallResponseRaw) GetHttpResponse() *Clt_Msg_CallResponseRaw_HttpResponse {
	if x, ok := m.GetOutput().(*Clt_Msg_CallResponseRaw_HttpResponse_); ok {
		return x.HttpResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg_CallResponseRaw) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_CallResponseRaw_OneofMarshaler, _Clt_Msg_CallResponseRaw_OneofUnmarshaler, _Clt_Msg_CallResponseRaw_OneofSizer, []interface{}{
		(*Clt_Msg_CallResponseRaw_HttpResponse_)(nil),
	}
}

func _Clt_Msg_CallResponseRaw_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg_CallResponseRaw)
	// output
	switch x := m.Output.(type) {
	case *Clt_Msg_CallResponseRaw_HttpResponse_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg_CallResponseRaw.Output has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_CallResponseRaw_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg_CallResponseRaw)
	switch tag {
	case 1: // output.http_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallResponseRaw_HttpResponse)
		err := b.DecodeMessage(msg)
		m.Output = &Clt_Msg_CallResponseRaw_HttpResponse_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_CallResponseRaw_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg_CallResponseRaw)
	// output
	switch x := m.Output.(type) {
	case *Clt_Msg_CallResponseRaw_HttpResponse_:
		s := proto.Size(x.HttpResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_CallResponseRaw_HttpResponse struct {
	// FIXME string error
	StatusCode           uint32                                                        `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Reason               string                                                        `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Headers              map[string]*Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Body                 []byte                                                        `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                      `json:"-"`
	XXX_unrecognized     []byte                                                        `json:"-"`
	XXX_sizecache        int32                                                         `json:"-"`
}

func (m *Clt_Msg_CallResponseRaw_HttpResponse) Reset()         { *m = Clt_Msg_CallResponseRaw_HttpResponse{} }
func (m *Clt_Msg_CallResponseRaw_HttpResponse) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallResponseRaw_HttpResponse) ProtoMessage()    {}
func (*Clt_Msg_CallResponseRaw_HttpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 4, 0}
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallResponseRaw_HttpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallResponseRaw_HttpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallResponseRaw_HttpResponse.Merge(dst, src)
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallResponseRaw_HttpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallResponseRaw_HttpResponse proto.InternalMessageInfo

func (m *Clt_Msg_CallResponseRaw_HttpResponse) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *Clt_Msg_CallResponseRaw_HttpResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Clt_Msg_CallResponseRaw_HttpResponse) GetHeaders() map[string]*Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Clt_Msg_CallResponseRaw_HttpResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues struct {
	Values               []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) Reset() {
	*m = Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues{}
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) String() string {
	return proto.CompactTextString(m)
}
func (*Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) ProtoMessage() {}
func (*Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 4, 0, 0}
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues.Merge(dst, src)
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues proto.InternalMessageInfo

func (m *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Clt_Msg_CallVerifProgress struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_CallVerifProgress) Reset()         { *m = Clt_Msg_CallVerifProgress{} }
func (m *Clt_Msg_CallVerifProgress) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallVerifProgress) ProtoMessage()    {}
func (*Clt_Msg_CallVerifProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 5}
}
func (m *Clt_Msg_CallVerifProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallVerifProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallVerifProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallVerifProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallVerifProgress.Merge(dst, src)
}
func (m *Clt_Msg_CallVerifProgress) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallVerifProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallVerifProgress.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallVerifProgress proto.InternalMessageInfo

type Clt_Msg_CallResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_CallResponse) Reset()         { *m = Clt_Msg_CallResponse{} }
func (m *Clt_Msg_CallResponse) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallResponse) ProtoMessage()    {}
func (*Clt_Msg_CallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{0, 0, 6}
}
func (m *Clt_Msg_CallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallResponse.Merge(dst, src)
}
func (m *Clt_Msg_CallResponse) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallResponse proto.InternalMessageInfo

type Srv struct {
	Msg                  *Srv_Msg `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Srv) Reset()         { *m = Srv{} }
func (m *Srv) String() string { return proto.CompactTextString(m) }
func (*Srv) ProtoMessage()    {}
func (*Srv) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{1}
}
func (m *Srv) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv.Merge(dst, src)
}
func (m *Srv) XXX_Size() int {
	return m.Size()
}
func (m *Srv) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv.DiscardUnknown(m)
}

var xxx_messageInfo_Srv proto.InternalMessageInfo

func (m *Srv) GetMsg() *Srv_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Srv_Msg struct {
	// Types that are valid to be assigned to Msg:
	//	*Srv_Msg_Call_
	//	*Srv_Msg_Reset_
	Msg                  isSrv_Msg_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Srv_Msg) Reset()         { *m = Srv_Msg{} }
func (m *Srv_Msg) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg) ProtoMessage()    {}
func (*Srv_Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{1, 0}
}
func (m *Srv_Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg.Merge(dst, src)
}
func (m *Srv_Msg) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg proto.InternalMessageInfo

type isSrv_Msg_Msg interface {
	isSrv_Msg_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Srv_Msg_Call_ struct {
	Call *Srv_Msg_Call `protobuf:"bytes,1,opt,name=call,oneof"`
}
type Srv_Msg_Reset_ struct {
	Reset_ *Srv_Msg_Reset `protobuf:"bytes,2,opt,name=reset,oneof"`
}

func (*Srv_Msg_Call_) isSrv_Msg_Msg()  {}
func (*Srv_Msg_Reset_) isSrv_Msg_Msg() {}

func (m *Srv_Msg) GetMsg() isSrv_Msg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Srv_Msg) GetCall() *Srv_Msg_Call {
	if x, ok := m.GetMsg().(*Srv_Msg_Call_); ok {
		return x.Call
	}
	return nil
}

func (m *Srv_Msg) GetReset_() *Srv_Msg_Reset {
	if x, ok := m.GetMsg().(*Srv_Msg_Reset_); ok {
		return x.Reset_
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Srv_Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Srv_Msg_OneofMarshaler, _Srv_Msg_OneofUnmarshaler, _Srv_Msg_OneofSizer, []interface{}{
		(*Srv_Msg_Call_)(nil),
		(*Srv_Msg_Reset_)(nil),
	}
}

func _Srv_Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Srv_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Srv_Msg_Call_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Call); err != nil {
			return err
		}
	case *Srv_Msg_Reset_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reset_); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Srv_Msg.Msg has unexpected type %T", x)
	}
	return nil
}

func _Srv_Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Srv_Msg)
	switch tag {
	case 1: // msg.call
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Srv_Msg_Call)
		err := b.DecodeMessage(msg)
		m.Msg = &Srv_Msg_Call_{msg}
		return true, err
	case 2: // msg.reset
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Srv_Msg_Reset)
		err := b.DecodeMessage(msg)
		m.Msg = &Srv_Msg_Reset_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Srv_Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Srv_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Srv_Msg_Call_:
		s := proto.Size(x.Call)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Srv_Msg_Reset_:
		s := proto.Size(x.Reset_)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Srv_Msg_Call struct {
	EId                  uint32   `protobuf:"varint,1,opt,name=eId,proto3" json:"eId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Srv_Msg_Call) Reset()         { *m = Srv_Msg_Call{} }
func (m *Srv_Msg_Call) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg_Call) ProtoMessage()    {}
func (*Srv_Msg_Call) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{1, 0, 0}
}
func (m *Srv_Msg_Call) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Call) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Call.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Call) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Call.Merge(dst, src)
}
func (m *Srv_Msg_Call) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Call) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Call.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Call proto.InternalMessageInfo

func (m *Srv_Msg_Call) GetEId() uint32 {
	if m != nil {
		return m.EId
	}
	return 0
}

type Srv_Msg_Call_Input struct {
	// Types that are valid to be assigned to Input:
	//	*Srv_Msg_Call_Input_HttpRequest_
	Input                isSrv_Msg_Call_Input_Input `protobuf_oneof:"input"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Srv_Msg_Call_Input) Reset()         { *m = Srv_Msg_Call_Input{} }
func (m *Srv_Msg_Call_Input) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg_Call_Input) ProtoMessage()    {}
func (*Srv_Msg_Call_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{1, 0, 0, 0}
}
func (m *Srv_Msg_Call_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Call_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Call_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Call_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Call_Input.Merge(dst, src)
}
func (m *Srv_Msg_Call_Input) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Call_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Call_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Call_Input proto.InternalMessageInfo

type isSrv_Msg_Call_Input_Input interface {
	isSrv_Msg_Call_Input_Input()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Srv_Msg_Call_Input_HttpRequest_ struct {
	HttpRequest *Srv_Msg_Call_Input_HttpRequest `protobuf:"bytes,1,opt,name=http_request,json=httpRequest,oneof"`
}

func (*Srv_Msg_Call_Input_HttpRequest_) isSrv_Msg_Call_Input_Input() {}

func (m *Srv_Msg_Call_Input) GetInput() isSrv_Msg_Call_Input_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Srv_Msg_Call_Input) GetHttpRequest() *Srv_Msg_Call_Input_HttpRequest {
	if x, ok := m.GetInput().(*Srv_Msg_Call_Input_HttpRequest_); ok {
		return x.HttpRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Srv_Msg_Call_Input) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Srv_Msg_Call_Input_OneofMarshaler, _Srv_Msg_Call_Input_OneofUnmarshaler, _Srv_Msg_Call_Input_OneofSizer, []interface{}{
		(*Srv_Msg_Call_Input_HttpRequest_)(nil),
	}
}

func _Srv_Msg_Call_Input_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Srv_Msg_Call_Input)
	// input
	switch x := m.Input.(type) {
	case *Srv_Msg_Call_Input_HttpRequest_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Srv_Msg_Call_Input.Input has unexpected type %T", x)
	}
	return nil
}

func _Srv_Msg_Call_Input_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Srv_Msg_Call_Input)
	switch tag {
	case 1: // input.http_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Srv_Msg_Call_Input_HttpRequest)
		err := b.DecodeMessage(msg)
		m.Input = &Srv_Msg_Call_Input_HttpRequest_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Srv_Msg_Call_Input_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Srv_Msg_Call_Input)
	// input
	switch x := m.Input.(type) {
	case *Srv_Msg_Call_Input_HttpRequest_:
		s := proto.Size(x.HttpRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Srv_Msg_Call_Input_HttpRequest struct {
	Method               string                                                  `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Url                  string                                                  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Headers              map[string]*Srv_Msg_Call_Input_HttpRequest_HeaderValues `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Body                 []byte                                                  `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *Srv_Msg_Call_Input_HttpRequest) Reset()         { *m = Srv_Msg_Call_Input_HttpRequest{} }
func (m *Srv_Msg_Call_Input_HttpRequest) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg_Call_Input_HttpRequest) ProtoMessage()    {}
func (*Srv_Msg_Call_Input_HttpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{1, 0, 0, 0, 0}
}
func (m *Srv_Msg_Call_Input_HttpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Call_Input_HttpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Call_Input_HttpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest.Merge(dst, src)
}
func (m *Srv_Msg_Call_Input_HttpRequest) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Call_Input_HttpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest proto.InternalMessageInfo

func (m *Srv_Msg_Call_Input_HttpRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Srv_Msg_Call_Input_HttpRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Srv_Msg_Call_Input_HttpRequest) GetHeaders() map[string]*Srv_Msg_Call_Input_HttpRequest_HeaderValues {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Srv_Msg_Call_Input_HttpRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Srv_Msg_Call_Input_HttpRequest_HeaderValues struct {
	Values               []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) Reset() {
	*m = Srv_Msg_Call_Input_HttpRequest_HeaderValues{}
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) String() string {
	return proto.CompactTextString(m)
}
func (*Srv_Msg_Call_Input_HttpRequest_HeaderValues) ProtoMessage() {}
func (*Srv_Msg_Call_Input_HttpRequest_HeaderValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{1, 0, 0, 0, 0, 0}
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest_HeaderValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Call_Input_HttpRequest_HeaderValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest_HeaderValues.Merge(dst, src)
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest_HeaderValues.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Call_Input_HttpRequest_HeaderValues proto.InternalMessageInfo

func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Srv_Msg_Reset struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Srv_Msg_Reset) Reset()         { *m = Srv_Msg_Reset{} }
func (m *Srv_Msg_Reset) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg_Reset) ProtoMessage()    {}
func (*Srv_Msg_Reset) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_badf428760427721, []int{1, 0, 1}
}
func (m *Srv_Msg_Reset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Reset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Reset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Reset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Reset.Merge(dst, src)
}
func (m *Srv_Msg_Reset) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Reset) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Reset.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Reset proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Clt)(nil), "fm.Clt")
	proto.RegisterType((*Clt_Msg)(nil), "fm.Clt.Msg")
	proto.RegisterType((*Clt_Msg_Fuzz)(nil), "fm.Clt.Msg.Fuzz")
	proto.RegisterType((*Clt_Msg_Fuzz_Resetter)(nil), "fm.Clt.Msg.Fuzz.Resetter")
	proto.RegisterType((*Clt_Msg_Fuzz_Resetter_SUTShell)(nil), "fm.Clt.Msg.Fuzz.Resetter.SUTShell")
	proto.RegisterType((*Clt_Msg_Fuzz_Model)(nil), "fm.Clt.Msg.Fuzz.Model")
	proto.RegisterType((*Clt_Msg_Fuzz_Model_OpenAPIv3)(nil), "fm.Clt.Msg.Fuzz.Model.OpenAPIv3")
	proto.RegisterType((*Clt_Msg_FuzzProgress)(nil), "fm.Clt.Msg.FuzzProgress")
	proto.RegisterType((*Clt_Msg_Metrics)(nil), "fm.Clt.Msg.Metrics")
	proto.RegisterType((*Clt_Msg_ResetProgress)(nil), "fm.Clt.Msg.ResetProgress")
	proto.RegisterType((*Clt_Msg_CallResponseRaw)(nil), "fm.Clt.Msg.CallResponseRaw")
	proto.RegisterType((*Clt_Msg_CallResponseRaw_HttpResponse)(nil), "fm.Clt.Msg.CallResponseRaw.HttpResponse")
	proto.RegisterMapType((map[string]*Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues)(nil), "fm.Clt.Msg.CallResponseRaw.HttpResponse.HeadersEntry")
	proto.RegisterType((*Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues)(nil), "fm.Clt.Msg.CallResponseRaw.HttpResponse.HeaderValues")
	proto.RegisterType((*Clt_Msg_CallVerifProgress)(nil), "fm.Clt.Msg.CallVerifProgress")
	proto.RegisterType((*Clt_Msg_CallResponse)(nil), "fm.Clt.Msg.CallResponse")
	proto.RegisterType((*Srv)(nil), "fm.Srv")
	proto.RegisterType((*Srv_Msg)(nil), "fm.Srv.Msg")
	proto.RegisterType((*Srv_Msg_Call)(nil), "fm.Srv.Msg.Call")
	proto.RegisterType((*Srv_Msg_Call_Input)(nil), "fm.Srv.Msg.Call.Input")
	proto.RegisterType((*Srv_Msg_Call_Input_HttpRequest)(nil), "fm.Srv.Msg.Call.Input.HttpRequest")
	proto.RegisterMapType((map[string]*Srv_Msg_Call_Input_HttpRequest_HeaderValues)(nil), "fm.Srv.Msg.Call.Input.HttpRequest.HeadersEntry")
	proto.RegisterType((*Srv_Msg_Call_Input_HttpRequest_HeaderValues)(nil), "fm.Srv.Msg.Call.Input.HttpRequest.HeaderValues")
	proto.RegisterType((*Srv_Msg_Reset)(nil), "fm.Srv.Msg.Reset")
	proto.RegisterEnum("fm.Clt_Msg_Fuzz_ModelKind", Clt_Msg_Fuzz_ModelKind_name, Clt_Msg_Fuzz_ModelKind_value)
	proto.RegisterEnum("fm.Clt_Msg_ResetProgress_Status", Clt_Msg_ResetProgress_Status_name, Clt_Msg_ResetProgress_Status_value)
}
func (this *Clt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt)
	if !ok {
		that2, ok := that.(Clt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg)
	if !ok {
		that2, ok := that.(Clt_Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fuzz.Equal(that1.Fuzz) {
		return false
	}
	return true
}
func (this *Clt_Msg_FuzzProgress_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_FuzzProgress_)
	if !ok {
		that2, ok := that.(Clt_Msg_FuzzProgress_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FuzzProgress.Equal(that1.FuzzProgress) {
		return false
	}
	return true
}
func (this *Clt_Msg_Metrics_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Metrics_)
	if !ok {
		that2, ok := that.(Clt_Msg_Metrics_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metrics.Equal(that1.Metrics) {
		return false
	}
	return true
}
func (this *Clt_Msg_ResetProgress_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_ResetProgress_)
	if !ok {
		that2, ok := that.(Clt_Msg_ResetProgress_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResetProgress.Equal(that1.ResetProgress) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallResponseRaw.Equal(that1.CallResponseRaw) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallVerifProgress_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallVerifProgress_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallVerifProgress_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallVerifProgress.Equal(that1.CallVerifProgress) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponse_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponse_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponse_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallResponse.Equal(that1.CallResponse) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Resetter.Equal(that1.Resetter) {
		return false
	}
	if this.ModelKind != that1.ModelKind {
		return false
	}
	if !this.Model.Equal(that1.Model) {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if len(this.Usage) != len(that1.Usage) {
		return false
	}
	for i := range this.Usage {
		if this.Usage[i] != that1.Usage[i] {
			return false
		}
	}
	if !bytes.Equal(this.Seed, that1.Seed) {
		return false
	}
	if this.Intensity != that1.Intensity {
		return false
	}
	if len(this.EIDs) != len(that1.EIDs) {
		return false
	}
	for i := range this.EIDs {
		if this.EIDs[i] != that1.EIDs[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Resetter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Resetter)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Resetter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Resetter == nil {
		if this.Resetter != nil {
			return false
		}
	} else if this.Resetter == nil {
		return false
	} else if !this.Resetter.Equal(that1.Resetter) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Resetter_SutShell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Resetter_SutShell)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Resetter_SutShell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SutShell.Equal(that1.SutShell) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Resetter_SUTShell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Resetter_SUTShell)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Resetter_SUTShell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.Rst != that1.Rst {
		return false
	}
	if this.Stop != that1.Stop {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Model) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Model)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Model)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Model == nil {
		if this.Model != nil {
			return false
		}
	} else if this.Model == nil {
		return false
	} else if !this.Model.Equal(that1.Model) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Model_Openapiv3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Model_Openapiv3)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Model_Openapiv3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Openapiv3.Equal(that1.Openapiv3) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Model_OpenAPIv3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Model_OpenAPIv3)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Model_OpenAPIv3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.File != that1.File {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.HeaderAuthorization != that1.HeaderAuthorization {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_FuzzProgress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_FuzzProgress)
	if !ok {
		that2, ok := that.(Clt_Msg_FuzzProgress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Metrics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Metrics)
	if !ok {
		that2, ok := that.(Clt_Msg_Metrics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_ResetProgress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_ResetProgress)
	if !ok {
		that2, ok := that.(Clt_Msg_ResetProgress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.TsDiff != that1.TsDiff {
		return false
	}
	if len(this.Reason) != len(that1.Reason) {
		return false
	}
	for i := range this.Reason {
		if this.Reason[i] != that1.Reason[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Output == nil {
		if this.Output != nil {
			return false
		}
	} else if this.Output == nil {
		return false
	} else if !this.Output.Equal(that1.Output) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw_HttpResponse_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw_HttpResponse_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw_HttpResponse_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpResponse.Equal(that1.HttpResponse) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw_HttpResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw_HttpResponse)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw_HttpResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StatusCode != that1.StatusCode {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallVerifProgress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallVerifProgress)
	if !ok {
		that2, ok := that.(Clt_Msg_CallVerifProgress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponse)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv)
	if !ok {
		that2, ok := that.(Srv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg)
	if !ok {
		that2, ok := that.(Srv_Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call_)
	if !ok {
		that2, ok := that.(Srv_Msg_Call_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Call.Equal(that1.Call) {
		return false
	}
	return true
}
func (this *Srv_Msg_Reset_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Reset_)
	if !ok {
		that2, ok := that.(Srv_Msg_Reset_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reset_.Equal(that1.Reset_) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call)
	if !ok {
		that2, ok := that.(Srv_Msg_Call)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EId != that1.EId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call_Input) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call_Input)
	if !ok {
		that2, ok := that.(Srv_Msg_Call_Input)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Input == nil {
		if this.Input != nil {
			return false
		}
	} else if this.Input == nil {
		return false
	} else if !this.Input.Equal(that1.Input) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call_Input_HttpRequest_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call_Input_HttpRequest_)
	if !ok {
		that2, ok := that.(Srv_Msg_Call_Input_HttpRequest_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpRequest.Equal(that1.HttpRequest) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call_Input_HttpRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call_Input_HttpRequest)
	if !ok {
		that2, ok := that.(Srv_Msg_Call_Input_HttpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call_Input_HttpRequest_HeaderValues) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call_Input_HttpRequest_HeaderValues)
	if !ok {
		that2, ok := that.(Srv_Msg_Call_Input_HttpRequest_HeaderValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Reset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Reset)
	if !ok {
		that2, ok := that.(Srv_Msg_Reset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FuzzyMonkeyClient is the client API for FuzzyMonkey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FuzzyMonkeyClient interface {
	Do(ctx context.Context, opts ...grpc.CallOption) (FuzzyMonkey_DoClient, error)
}

type fuzzyMonkeyClient struct {
	cc *grpc.ClientConn
}

func NewFuzzyMonkeyClient(cc *grpc.ClientConn) FuzzyMonkeyClient {
	return &fuzzyMonkeyClient{cc}
}

func (c *fuzzyMonkeyClient) Do(ctx context.Context, opts ...grpc.CallOption) (FuzzyMonkey_DoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FuzzyMonkey_serviceDesc.Streams[0], "/fm.FuzzyMonkey/Do", opts...)
	if err != nil {
		return nil, err
	}
	x := &fuzzyMonkeyDoClient{stream}
	return x, nil
}

type FuzzyMonkey_DoClient interface {
	Send(*Clt) error
	Recv() (*Srv, error)
	grpc.ClientStream
}

type fuzzyMonkeyDoClient struct {
	grpc.ClientStream
}

func (x *fuzzyMonkeyDoClient) Send(m *Clt) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fuzzyMonkeyDoClient) Recv() (*Srv, error) {
	m := new(Srv)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FuzzyMonkeyServer is the server API for FuzzyMonkey service.
type FuzzyMonkeyServer interface {
	Do(FuzzyMonkey_DoServer) error
}

func RegisterFuzzyMonkeyServer(s *grpc.Server, srv FuzzyMonkeyServer) {
	s.RegisterService(&_FuzzyMonkey_serviceDesc, srv)
}

func _FuzzyMonkey_Do_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FuzzyMonkeyServer).Do(&fuzzyMonkeyDoServer{stream})
}

type FuzzyMonkey_DoServer interface {
	Send(*Srv) error
	Recv() (*Clt, error)
	grpc.ServerStream
}

type fuzzyMonkeyDoServer struct {
	grpc.ServerStream
}

func (x *fuzzyMonkeyDoServer) Send(m *Srv) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fuzzyMonkeyDoServer) Recv() (*Clt, error) {
	m := new(Clt)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FuzzyMonkey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fm.FuzzyMonkey",
	HandlerType: (*FuzzyMonkeyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Do",
			Handler:       _FuzzyMonkey_Do_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/internal/fm/fuzzymonkey.proto",
}

func (m *Clt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Msg.Size()))
		n1, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn2, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Fuzz != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Fuzz.Size()))
		n3, err := m.Fuzz.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Clt_Msg_FuzzProgress_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FuzzProgress != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.FuzzProgress.Size()))
		n4, err := m.FuzzProgress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Clt_Msg_Metrics_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Metrics != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Metrics.Size()))
		n5, err := m.Metrics.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Clt_Msg_ResetProgress_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetProgress != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.ResetProgress.Size()))
		n6, err := m.ResetProgress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Clt_Msg_CallResponseRaw_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CallResponseRaw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.CallResponseRaw.Size()))
		n7, err := m.CallResponseRaw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Clt_Msg_CallVerifProgress_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CallVerifProgress != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.CallVerifProgress.Size()))
		n8, err := m.CallVerifProgress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Clt_Msg_CallResponse_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CallResponse != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.CallResponse.Size()))
		n9, err := m.CallResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Clt_Msg_Fuzz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resetter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Resetter.Size()))
		n10, err := m.Resetter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ModelKind != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.ModelKind))
	}
	if m.Model != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Model.Size()))
		n11, err := m.Model.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if len(m.Usage) > 0 {
		for _, s := range m.Usage {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Seed) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Seed)))
		i += copy(dAtA[i:], m.Seed)
	}
	if m.Intensity != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Intensity))
	}
	if len(m.EIDs) > 0 {
		dAtA13 := make([]byte, len(m.EIDs)*10)
		var j12 int
		for _, num := range m.EIDs {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Resetter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Resetter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resetter != nil {
		nn14, err := m.Resetter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Resetter_SutShell) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SutShell != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.SutShell.Size()))
		n15, err := m.SutShell.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Resetter_SUTShell) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Start) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if len(m.Rst) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Rst)))
		i += copy(dAtA[i:], m.Rst)
	}
	if len(m.Stop) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Stop)))
		i += copy(dAtA[i:], m.Stop)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Model != nil {
		nn16, err := m.Model.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn16
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Model_Openapiv3) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Openapiv3 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Openapiv3.Size()))
		n17, err := m.Openapiv3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.File) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.HeaderAuthorization) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.HeaderAuthorization)))
		i += copy(dAtA[i:], m.HeaderAuthorization)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_FuzzProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_FuzzProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Metrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Metrics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_ResetProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_ResetProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Status))
	}
	if m.TsDiff != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.TsDiff))
	}
	if len(m.Reason) > 0 {
		for _, s := range m.Reason {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallResponseRaw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallResponseRaw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		nn18, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallResponseRaw_HttpResponse_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.HttpResponse.Size()))
		n19, err := m.HttpResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallResponseRaw_HttpResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			dAtA[i] = 0x1a
			i++
			v := m.Headers[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFuzzymonkey(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + msgSize
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFuzzymonkey(dAtA, i, uint64(v.Size()))
				n20, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n20
			}
		}
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallVerifProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallVerifProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Msg.Size()))
		n21, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn22, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Call_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Call != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Call.Size()))
		n23, err := m.Call.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *Srv_Msg_Reset_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Reset_ != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Reset_.Size()))
		n24, err := m.Reset_.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *Srv_Msg_Call) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Call) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.EId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Call_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Call_Input) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		nn25, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn25
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Call_Input_HttpRequest_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpRequest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.HttpRequest.Size()))
		n26, err := m.HttpRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *Srv_Msg_Call_Input_HttpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Call_Input_HttpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			dAtA[i] = 0x1a
			i++
			v := m.Headers[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFuzzymonkey(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + msgSize
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFuzzymonkey(dAtA, i, uint64(v.Size()))
				n27, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n27
			}
		}
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Reset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Reset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintFuzzymonkey(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Clt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fuzz != nil {
		l = m.Fuzz.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_FuzzProgress_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FuzzProgress != nil {
		l = m.FuzzProgress.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Metrics_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_ResetProgress_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetProgress != nil {
		l = m.ResetProgress.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallResponseRaw_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallResponseRaw != nil {
		l = m.CallResponseRaw.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallVerifProgress_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallVerifProgress != nil {
		l = m.CallVerifProgress.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallResponse_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallResponse != nil {
		l = m.CallResponse.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Fuzz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resetter != nil {
		l = m.Resetter.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.ModelKind != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.ModelKind))
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if len(m.Usage) > 0 {
		for _, s := range m.Usage {
			l = len(s)
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	l = len(m.Seed)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.Intensity != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.Intensity))
	}
	if len(m.EIDs) > 0 {
		l = 0
		for _, e := range m.EIDs {
			l += sovFuzzymonkey(uint64(e))
		}
		n += 1 + sovFuzzymonkey(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Resetter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resetter != nil {
		n += m.Resetter.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Resetter_SutShell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SutShell != nil {
		l = m.SutShell.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Rst)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Stop)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Model) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Model != nil {
		n += m.Model.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Model_Openapiv3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Openapiv3 != nil {
		l = m.Openapiv3.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.HeaderAuthorization)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_FuzzProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Metrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_ResetProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.Status))
	}
	if m.TsDiff != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.TsDiff))
	}
	if len(m.Reason) > 0 {
		for _, s := range m.Reason {
			l = len(s)
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallResponseRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		n += m.Output.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallResponseRaw_HttpResponse_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpResponse != nil {
		l = m.HttpResponse.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.StatusCode))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFuzzymonkey(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFuzzymonkey(uint64(mapEntrySize))
		}
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallVerifProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Call_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Call != nil {
		l = m.Call.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Srv_Msg_Reset_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reset_ != nil {
		l = m.Reset_.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Srv_Msg_Call) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EId != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.EId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Call_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		n += m.Input.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Call_Input_HttpRequest_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpRequest != nil {
		l = m.HttpRequest.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Srv_Msg_Call_Input_HttpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFuzzymonkey(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFuzzymonkey(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFuzzymonkey(uint64(mapEntrySize))
		}
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Reset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFuzzymonkey(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFuzzymonkey(x uint64) (n int) {
	return sovFuzzymonkey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Clt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Clt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Clt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &Clt_Msg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fuzz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_Fuzz{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_Fuzz_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuzzProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_FuzzProgress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_FuzzProgress_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_Metrics{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_Metrics_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_ResetProgress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_ResetProgress_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallResponseRaw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallResponseRaw{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_CallResponseRaw_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallVerifProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallVerifProgress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_CallVerifProgress_{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_CallResponse_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fuzz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fuzz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resetter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resetter == nil {
				m.Resetter = &Clt_Msg_Fuzz_Resetter{}
			}
			if err := m.Resetter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelKind", wireType)
			}
			m.ModelKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModelKind |= (Clt_Msg_Fuzz_ModelKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &Clt_Msg_Fuzz_Model{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usage = append(m.Usage, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seed = append(m.Seed[:0], dAtA[iNdEx:postIndex]...)
			if m.Seed == nil {
				m.Seed = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intensity", wireType)
			}
			m.Intensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Intensity |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EIDs = append(m.EIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFuzzymonkey
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EIDs) == 0 {
					m.EIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EIDs = append(m.EIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Resetter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resetter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resetter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SutShell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_Fuzz_Resetter_SUTShell{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resetter = &Clt_Msg_Fuzz_Resetter_SutShell{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SUTShell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SUTShell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rst = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openapiv3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_Fuzz_Model_OpenAPIv3{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Model = &Clt_Msg_Fuzz_Model_Openapiv3{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenAPIv3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenAPIv3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderAuthorization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderAuthorization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_FuzzProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FuzzProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FuzzProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Metrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_ResetProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Clt_Msg_ResetProgress_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsDiff", wireType)
			}
			m.TsDiff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsDiff |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = append(m.Reason, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallResponseRaw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallResponseRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallResponseRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallResponseRaw_HttpResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Output = &Clt_Msg_CallResponseRaw_HttpResponse_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]*Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues)
			}
			var mapkey string
			var mapvalue *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallResponseRaw_HttpResponse_HeaderValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallVerifProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallVerifProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallVerifProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Srv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Srv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &Srv_Msg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Srv_Msg_Call{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Srv_Msg_Call_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Srv_Msg_Reset{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Srv_Msg_Reset_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Call) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Call: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Call: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EId", wireType)
			}
			m.EId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Call_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Srv_Msg_Call_Input_HttpRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &Srv_Msg_Call_Input_HttpRequest_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Call_Input_HttpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]*Srv_Msg_Call_Input_HttpRequest_HeaderValues)
			}
			var mapkey string
			var mapvalue *Srv_Msg_Call_Input_HttpRequest_HeaderValues
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Srv_Msg_Call_Input_HttpRequest_HeaderValues{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFuzzymonkey
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Call_Input_HttpRequest_HeaderValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Reset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFuzzymonkey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFuzzymonkey
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFuzzymonkey(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFuzzymonkey = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFuzzymonkey   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("pkg/internal/fm/fuzzymonkey.proto", fileDescriptor_fuzzymonkey_badf428760427721)
}

var fileDescriptor_fuzzymonkey_badf428760427721 = []byte{
	// 1164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x7a, 0xbd, 0xb6, 0xf7, 0xf9, 0x4f, 0xdd, 0x49, 0x55, 0xdc, 0xa5, 0x0d, 0xc1, 0x87,
	0x12, 0x04, 0xac, 0x21, 0x55, 0x51, 0xe1, 0x02, 0xb1, 0xdb, 0x62, 0x2b, 0x4a, 0x5c, 0x4d, 0x68,
	0x91, 0xb8, 0x58, 0x9b, 0xec, 0xac, 0xbd, 0xca, 0x7a, 0x77, 0xbb, 0x33, 0xeb, 0xca, 0xf9, 0x02,
	0x9c, 0xf8, 0x08, 0x1c, 0x40, 0x42, 0x42, 0xe2, 0x86, 0x10, 0x07, 0xce, 0x48, 0x70, 0xe4, 0x23,
	0xa0, 0x7c, 0x12, 0x34, 0x7f, 0x1c, 0x8f, 0x93, 0x40, 0xcb, 0x81, 0xd3, 0xbe, 0x37, 0xf3, 0x7b,
	0x6f, 0x7e, 0xef, 0xcf, 0xbc, 0x59, 0x78, 0x33, 0x3d, 0x99, 0x74, 0xc3, 0x98, 0x91, 0x2c, 0xf6,
	0xa2, 0x6e, 0x30, 0xeb, 0x06, 0xf9, 0xe9, 0xe9, 0x62, 0x96, 0xc4, 0x27, 0x64, 0xe1, 0xa6, 0x59,
	0xc2, 0x12, 0x54, 0x0c, 0x66, 0xce, 0x7b, 0x93, 0x90, 0x4d, 0xf3, 0x23, 0xf7, 0x38, 0x99, 0x75,
	0x27, 0xc9, 0x24, 0xe9, 0x8a, 0xad, 0xa3, 0x3c, 0x10, 0x9a, 0x50, 0x84, 0x24, 0x4d, 0x3a, 0xbf,
	0x35, 0xc1, 0xec, 0x47, 0x0c, 0xdd, 0x01, 0x73, 0x46, 0x27, 0x6d, 0x63, 0xcb, 0xd8, 0xae, 0xed,
	0xd4, 0xdc, 0x60, 0xe6, 0xf6, 0x23, 0xe6, 0xee, 0xd3, 0x09, 0xe6, 0xeb, 0xce, 0x37, 0x4d, 0x30,
	0xf7, 0xe9, 0x04, 0xdd, 0x85, 0x12, 0x3f, 0x56, 0xe1, 0x5a, 0x1a, 0xce, 0x7d, 0x9c, 0x9f, 0x9e,
	0x0e, 0x0a, 0x58, 0xec, 0xa3, 0x4f, 0xa0, 0xc1, 0xbf, 0xe3, 0x34, 0x4b, 0x26, 0x19, 0xa1, 0xb4,
	0x5d, 0x14, 0x06, 0xed, 0x8b, 0x06, 0x4f, 0xd4, 0xfe, 0xa0, 0x80, 0xeb, 0x81, 0xa6, 0xa3, 0x2e,
	0x54, 0x66, 0x84, 0x65, 0xe1, 0x31, 0x6d, 0x9b, 0xc2, 0x74, 0x43, 0x37, 0xdd, 0x97, 0x5b, 0x83,
	0x02, 0x5e, 0xa2, 0x50, 0x0f, 0x9a, 0x19, 0xa1, 0x84, 0xad, 0x8e, 0x2c, 0x09, 0xbb, 0x5b, 0xba,
	0x1d, 0xe6, 0x08, 0xed, 0xcc, 0x46, 0xa6, 0x2f, 0xa0, 0x21, 0x5c, 0x3f, 0xf6, 0xa2, 0x68, 0x9c,
	0x11, 0x9a, 0x26, 0x31, 0x25, 0xe3, 0xcc, 0x7b, 0xd1, 0xb6, 0x84, 0x9b, 0xd7, 0x75, 0x37, 0x7d,
	0x2f, 0x8a, 0xb0, 0xc2, 0x60, 0xef, 0xc5, 0xa0, 0x80, 0xaf, 0x1d, 0xaf, 0x2f, 0xa1, 0x11, 0x6c,
	0x08, 0x57, 0x73, 0x92, 0x85, 0xc1, 0x8a, 0x53, 0x59, 0x38, 0xbb, 0x73, 0xd1, 0xd9, 0x33, 0x8e,
	0xd2, 0x78, 0x09, 0x1a, 0x6b, 0x8b, 0x3c, 0xa3, 0x6b, 0xdc, 0xda, 0x95, 0xcb, 0x19, 0xd5, 0x79,
	0xf1, 0x8c, 0xea, 0xa4, 0x9c, 0xef, 0x2d, 0x28, 0xf1, 0x94, 0xa3, 0xfb, 0x50, 0x15, 0x61, 0x33,
	0x92, 0xa9, 0x3a, 0xde, 0xba, 0x58, 0x16, 0x99, 0x28, 0x46, 0x32, 0x7c, 0x0e, 0x45, 0x1f, 0x01,
	0xcc, 0x12, 0x9f, 0x44, 0xe3, 0x93, 0x30, 0xf6, 0x45, 0x3d, 0x9b, 0x3b, 0xce, 0x25, 0xc3, 0x7d,
	0x0e, 0xd9, 0x0b, 0x63, 0x1f, 0xdb, 0xb3, 0xa5, 0x88, 0xde, 0x05, 0x4b, 0x28, 0xaa, 0x94, 0x37,
	0xaf, 0xb6, 0xc2, 0x12, 0x84, 0x5e, 0x83, 0x8a, 0x97, 0x86, 0xe3, 0x13, 0xb2, 0x10, 0x25, 0xb4,
	0x71, 0xd9, 0x4b, 0xc3, 0x3d, 0xb2, 0x40, 0x37, 0xc0, 0xca, 0xa9, 0x37, 0x21, 0x6d, 0x6b, 0xcb,
	0xdc, 0xb6, 0xb1, 0x54, 0x10, 0x82, 0x12, 0x25, 0xc4, 0x17, 0xa9, 0xad, 0x63, 0x21, 0xa3, 0xdb,
	0x60, 0xf3, 0x9b, 0x12, 0xd3, 0x90, 0x2d, 0x44, 0xa2, 0x1a, 0x78, 0xb5, 0xc0, 0x2d, 0x1e, 0x0d,
	0x1f, 0xd2, 0x76, 0x75, 0xcb, 0xdc, 0x6e, 0x60, 0x21, 0x3b, 0xdf, 0x1a, 0x50, 0x5d, 0x06, 0x8d,
	0x76, 0xc1, 0xa6, 0x39, 0x1b, 0xd3, 0x29, 0x89, 0x22, 0x95, 0xa2, 0xce, 0x3f, 0xa6, 0xc8, 0x3d,
	0x7c, 0xfa, 0xf9, 0x21, 0x47, 0x0e, 0x0a, 0xb8, 0x4a, 0x73, 0x26, 0x64, 0xe7, 0x31, 0x54, 0x97,
	0xeb, 0x9c, 0x37, 0x65, 0x5e, 0xc6, 0x84, 0x2b, 0x1b, 0x4b, 0x05, 0xb5, 0xc0, 0xcc, 0x28, 0x13,
	0x89, 0xb4, 0x31, 0x17, 0x45, 0x24, 0x2c, 0x49, 0x45, 0x96, 0x6c, 0x2c, 0xe4, 0x1e, 0xac, 0x8a,
	0xe5, 0xfc, 0x6a, 0x80, 0x25, 0x32, 0x85, 0x3e, 0x05, 0x3b, 0x49, 0x49, 0xec, 0xa5, 0xe1, 0xfc,
	0x9e, 0x22, 0xb8, 0x75, 0x75, 0x52, 0xdd, 0x51, 0x4a, 0xe2, 0xdd, 0x27, 0xc3, 0xf9, 0xbd, 0x41,
	0x01, 0xaf, 0x8c, 0x9c, 0x00, 0xec, 0xf3, 0x1d, 0x7e, 0x70, 0x10, 0x46, 0x44, 0xf1, 0x13, 0x32,
	0x5f, 0x9b, 0x26, 0xe7, 0xfc, 0x84, 0x8c, 0x3e, 0x80, 0x1b, 0x53, 0xe2, 0xf9, 0x24, 0x1b, 0x7b,
	0x39, 0x9b, 0x26, 0x59, 0x78, 0xea, 0xb1, 0x30, 0x89, 0x15, 0xe1, 0x0d, 0xb9, 0xb7, 0xab, 0x6f,
	0xf5, 0x2a, 0xaa, 0xf4, 0x9d, 0xb7, 0xc0, 0x3e, 0xef, 0x0d, 0x54, 0x83, 0xca, 0xd3, 0x83, 0xbd,
	0x83, 0xd1, 0x17, 0x07, 0xad, 0x02, 0x6a, 0x68, 0x54, 0x5a, 0x86, 0xd3, 0x84, 0xba, 0x3e, 0x19,
	0x1c, 0x1b, 0x2a, 0xea, 0xba, 0x3b, 0x3f, 0x19, 0xd0, 0x58, 0xbb, 0xc2, 0xe8, 0x01, 0x94, 0x29,
	0xf3, 0x58, 0x4e, 0x05, 0xf7, 0xe6, 0x7a, 0x16, 0xd6, 0xa0, 0xee, 0xa1, 0xc0, 0x61, 0x85, 0xe7,
	0x5d, 0xc6, 0xe8, 0xd8, 0x0f, 0x83, 0x40, 0x84, 0x58, 0xc2, 0x65, 0x46, 0x1f, 0x86, 0x41, 0x80,
	0x6e, 0x42, 0x39, 0x23, 0x1e, 0x15, 0x61, 0xf1, 0x36, 0x53, 0x5a, 0xe7, 0x43, 0x28, 0x4b, 0x17,
	0xa8, 0x0a, 0xa5, 0x83, 0xd1, 0xe8, 0x49, 0xab, 0xc0, 0xe3, 0x10, 0xc5, 0x24, 0x7e, 0xcb, 0x40,
	0x36, 0x58, 0x24, 0xf6, 0x89, 0xdf, 0x2a, 0x22, 0x80, 0x72, 0xe0, 0x85, 0x11, 0xf1, 0x5b, 0xa6,
	0xf3, 0x8b, 0x09, 0xd7, 0xfa, 0x97, 0xa6, 0x43, 0x63, 0xca, 0x58, 0xba, 0xba, 0xcc, 0xb2, 0x86,
	0xdb, 0xff, 0x32, 0x64, 0xdc, 0x01, 0x63, 0xa9, 0x7e, 0xb9, 0xa7, 0x9a, 0xee, 0xfc, 0x5e, 0x84,
	0xba, 0x0e, 0x40, 0x6f, 0x40, 0x4d, 0x06, 0x3a, 0x3e, 0x4e, 0x7c, 0xe9, 0xbf, 0x81, 0x41, 0x2e,
	0xf5, 0x13, 0x9f, 0x68, 0x61, 0xca, 0x0a, 0x2b, 0x0d, 0x8d, 0xa0, 0x22, 0xeb, 0x48, 0x45, 0xfc,
	0xb5, 0x9d, 0xfb, 0xaf, 0x4a, 0xca, 0x1d, 0x48, 0xbb, 0x47, 0x31, 0xcb, 0x16, 0x78, 0xe9, 0x85,
	0x37, 0xd2, 0x51, 0xe2, 0xcb, 0xbb, 0x5c, 0xc7, 0x42, 0x76, 0xee, 0x42, 0x5d, 0x82, 0x9f, 0x79,
	0x51, 0x4e, 0x28, 0x27, 0x33, 0x17, 0x52, 0xdb, 0x90, 0x39, 0x97, 0x9a, 0xf3, 0x7c, 0x89, 0x93,
	0x4e, 0xf9, 0x9d, 0xe1, 0x63, 0x41, 0xf6, 0x29, 0x17, 0xd1, 0x1e, 0x58, 0x02, 0xab, 0x1e, 0x98,
	0xff, 0x4a, 0x56, 0x9e, 0x8f, 0xa5, 0x8f, 0x8f, 0x8b, 0x0f, 0x8c, 0x5e, 0x15, 0xca, 0x49, 0xce,
	0xd2, 0x9c, 0x39, 0x1b, 0x70, 0xfd, 0xd2, 0x6c, 0xe6, 0xdd, 0xa9, 0xbb, 0xed, 0x59, 0xe2, 0xdd,
	0xec, 0xfc, 0x5c, 0x02, 0xf3, 0x30, 0x9b, 0x5f, 0xf1, 0x8c, 0x1e, 0x66, 0xf3, 0xd5, 0x33, 0xfa,
	0x75, 0xe9, 0xfc, 0x19, 0xe5, 0xb3, 0x59, 0x7f, 0x46, 0x15, 0x4e, 0x90, 0xe6, 0xcf, 0x28, 0xdf,
	0x47, 0x6f, 0x83, 0x25, 0x6e, 0xbf, 0x8a, 0xee, 0xba, 0x0e, 0x14, 0xdd, 0x3d, 0x28, 0x60, 0x89,
	0x70, 0xbe, 0x33, 0xa1, 0xc4, 0x6d, 0x79, 0x8e, 0xc8, 0xd0, 0x57, 0x15, 0xe7, 0xa2, 0xf3, 0x95,
	0x09, 0xd6, 0x30, 0x4e, 0x73, 0x86, 0x3e, 0x83, 0xba, 0xea, 0xbb, 0xe7, 0x39, 0xa1, 0x4c, 0x9f,
	0x6d, 0xfa, 0xf9, 0xae, 0x40, 0xab, 0x7c, 0x09, 0xe4, 0xa0, 0x80, 0x6b, 0xd3, 0x95, 0xea, 0xfc,
	0x58, 0x84, 0x9a, 0xb6, 0xcd, 0x0b, 0x38, 0x23, 0x6c, 0x9a, 0xf8, 0xaa, 0x36, 0x4a, 0xe3, 0x64,
	0xf2, 0x2c, 0x5a, 0x0e, 0xb9, 0x3c, 0x8b, 0xd0, 0xf0, 0x62, 0x7f, 0x75, 0x5f, 0x7e, 0xfa, 0xff,
	0xd0, 0x59, 0x27, 0x2f, 0xed, 0xac, 0x47, 0xeb, 0x9d, 0xf5, 0xea, 0x34, 0x2f, 0xf7, 0x54, 0x05,
	0xac, 0x90, 0x83, 0x9d, 0x0a, 0x58, 0xa2, 0x6c, 0xaa, 0x6d, 0x76, 0xde, 0x81, 0x1a, 0x9f, 0x75,
	0x8b, 0x7d, 0xf1, 0x17, 0x87, 0x6e, 0x43, 0xf1, 0x61, 0x82, 0x2a, 0xaa, 0x87, 0x9d, 0x8a, 0x3a,
	0xb2, 0x53, 0xd8, 0x36, 0xde, 0x37, 0x7a, 0xbb, 0x3f, 0x9c, 0x6d, 0x1a, 0x7f, 0x9c, 0x6d, 0x1a,
	0x7f, 0x9e, 0x6d, 0x1a, 0x7f, 0x9d, 0x6d, 0x1a, 0x5f, 0x76, 0xb5, 0x7f, 0x3d, 0xcd, 0x4f, 0x3f,
	0xe9, 0xca, 0xdf, 0xc2, 0xee, 0x85, 0x5f, 0xc6, 0xa3, 0xb2, 0xf8, 0xe9, 0xbb, 0xf7, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x36, 0x00, 0x2a, 0x29, 0x4c, 0x0a, 0x00, 0x00,
}

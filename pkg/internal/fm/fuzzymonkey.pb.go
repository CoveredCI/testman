// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/internal/fm/fuzzymonkey.proto

package fm // import "github.com/FuzzyMonkeyCo/monkey/pkg/internal/fm"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Clt struct {
	Msg                  *Clt_Msg `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt) Reset()         { *m = Clt{} }
func (m *Clt) String() string { return proto.CompactTextString(m) }
func (*Clt) ProtoMessage()    {}
func (*Clt) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0}
}
func (m *Clt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt.Merge(dst, src)
}
func (m *Clt) XXX_Size() int {
	return m.Size()
}
func (m *Clt) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt.DiscardUnknown(m)
}

var xxx_messageInfo_Clt proto.InternalMessageInfo

func (m *Clt) GetMsg() *Clt_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Clt_Msg struct {
	// Types that are valid to be assigned to Msg:
	//	*Clt_Msg_Fuzz_
	//	*Clt_Msg_FuzzProgress_
	//	*Clt_Msg_Metrics
	//	*Clt_Msg_ResetProgress_
	//	*Clt_Msg_CallResponseRaw_
	//	*Clt_Msg_CallVerifProgress_
	//	*Clt_Msg_CallResponse_
	Msg                  isClt_Msg_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Clt_Msg) Reset()         { *m = Clt_Msg{} }
func (m *Clt_Msg) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg) ProtoMessage()    {}
func (*Clt_Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0}
}
func (m *Clt_Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg.Merge(dst, src)
}
func (m *Clt_Msg) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg proto.InternalMessageInfo

type isClt_Msg_Msg interface {
	isClt_Msg_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_Fuzz_ struct {
	Fuzz *Clt_Msg_Fuzz `protobuf:"bytes,1,opt,name=fuzz,oneof"`
}
type Clt_Msg_FuzzProgress_ struct {
	FuzzProgress *Clt_Msg_FuzzProgress `protobuf:"bytes,2,opt,name=fuzz_progress,json=fuzzProgress,oneof"`
}
type Clt_Msg_Metrics struct {
	Metrics *Clt_Msg_SUTMetrics `protobuf:"bytes,3,opt,name=metrics,oneof"`
}
type Clt_Msg_ResetProgress_ struct {
	ResetProgress *Clt_Msg_ResetProgress `protobuf:"bytes,4,opt,name=reset_progress,json=resetProgress,oneof"`
}
type Clt_Msg_CallResponseRaw_ struct {
	CallResponseRaw *Clt_Msg_CallResponseRaw `protobuf:"bytes,5,opt,name=call_response_raw,json=callResponseRaw,oneof"`
}
type Clt_Msg_CallVerifProgress_ struct {
	CallVerifProgress *Clt_Msg_CallVerifProgress `protobuf:"bytes,6,opt,name=call_verif_progress,json=callVerifProgress,oneof"`
}
type Clt_Msg_CallResponse_ struct {
	CallResponse *Clt_Msg_CallResponse `protobuf:"bytes,7,opt,name=call_response,json=callResponse,oneof"`
}

func (*Clt_Msg_Fuzz_) isClt_Msg_Msg()              {}
func (*Clt_Msg_FuzzProgress_) isClt_Msg_Msg()      {}
func (*Clt_Msg_Metrics) isClt_Msg_Msg()            {}
func (*Clt_Msg_ResetProgress_) isClt_Msg_Msg()     {}
func (*Clt_Msg_CallResponseRaw_) isClt_Msg_Msg()   {}
func (*Clt_Msg_CallVerifProgress_) isClt_Msg_Msg() {}
func (*Clt_Msg_CallResponse_) isClt_Msg_Msg()      {}

func (m *Clt_Msg) GetMsg() isClt_Msg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Clt_Msg) GetFuzz() *Clt_Msg_Fuzz {
	if x, ok := m.GetMsg().(*Clt_Msg_Fuzz_); ok {
		return x.Fuzz
	}
	return nil
}

func (m *Clt_Msg) GetFuzzProgress() *Clt_Msg_FuzzProgress {
	if x, ok := m.GetMsg().(*Clt_Msg_FuzzProgress_); ok {
		return x.FuzzProgress
	}
	return nil
}

func (m *Clt_Msg) GetMetrics() *Clt_Msg_SUTMetrics {
	if x, ok := m.GetMsg().(*Clt_Msg_Metrics); ok {
		return x.Metrics
	}
	return nil
}

func (m *Clt_Msg) GetResetProgress() *Clt_Msg_ResetProgress {
	if x, ok := m.GetMsg().(*Clt_Msg_ResetProgress_); ok {
		return x.ResetProgress
	}
	return nil
}

func (m *Clt_Msg) GetCallResponseRaw() *Clt_Msg_CallResponseRaw {
	if x, ok := m.GetMsg().(*Clt_Msg_CallResponseRaw_); ok {
		return x.CallResponseRaw
	}
	return nil
}

func (m *Clt_Msg) GetCallVerifProgress() *Clt_Msg_CallVerifProgress {
	if x, ok := m.GetMsg().(*Clt_Msg_CallVerifProgress_); ok {
		return x.CallVerifProgress
	}
	return nil
}

func (m *Clt_Msg) GetCallResponse() *Clt_Msg_CallResponse {
	if x, ok := m.GetMsg().(*Clt_Msg_CallResponse_); ok {
		return x.CallResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_OneofMarshaler, _Clt_Msg_OneofUnmarshaler, _Clt_Msg_OneofSizer, []interface{}{
		(*Clt_Msg_Fuzz_)(nil),
		(*Clt_Msg_FuzzProgress_)(nil),
		(*Clt_Msg_Metrics)(nil),
		(*Clt_Msg_ResetProgress_)(nil),
		(*Clt_Msg_CallResponseRaw_)(nil),
		(*Clt_Msg_CallVerifProgress_)(nil),
		(*Clt_Msg_CallResponse_)(nil),
	}
}

func _Clt_Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Clt_Msg_Fuzz_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fuzz); err != nil {
			return err
		}
	case *Clt_Msg_FuzzProgress_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FuzzProgress); err != nil {
			return err
		}
	case *Clt_Msg_Metrics:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Metrics); err != nil {
			return err
		}
	case *Clt_Msg_ResetProgress_:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetProgress); err != nil {
			return err
		}
	case *Clt_Msg_CallResponseRaw_:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallResponseRaw); err != nil {
			return err
		}
	case *Clt_Msg_CallVerifProgress_:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallVerifProgress); err != nil {
			return err
		}
	case *Clt_Msg_CallResponse_:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg.Msg has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg)
	switch tag {
	case 1: // msg.fuzz
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_Fuzz)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_Fuzz_{msg}
		return true, err
	case 2: // msg.fuzz_progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_FuzzProgress)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_FuzzProgress_{msg}
		return true, err
	case 3: // msg.metrics
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_SUTMetrics)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_Metrics{msg}
		return true, err
	case 4: // msg.reset_progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_ResetProgress)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_ResetProgress_{msg}
		return true, err
	case 5: // msg.call_response_raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallResponseRaw)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_CallResponseRaw_{msg}
		return true, err
	case 6: // msg.call_verif_progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallVerifProgress)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_CallVerifProgress_{msg}
		return true, err
	case 7: // msg.call_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_CallResponse)
		err := b.DecodeMessage(msg)
		m.Msg = &Clt_Msg_CallResponse_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Clt_Msg_Fuzz_:
		s := proto.Size(x.Fuzz)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_FuzzProgress_:
		s := proto.Size(x.FuzzProgress)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_Metrics:
		s := proto.Size(x.Metrics)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_ResetProgress_:
		s := proto.Size(x.ResetProgress)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_CallResponseRaw_:
		s := proto.Size(x.CallResponseRaw)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_CallVerifProgress_:
		s := proto.Size(x.CallVerifProgress)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Clt_Msg_CallResponse_:
		s := proto.Size(x.CallResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_Fuzz struct {
	Resetter             *Clt_Msg_Fuzz_Resetter `protobuf:"bytes,1,opt,name=resetter" json:"resetter,omitempty"`
	Model                *Clt_Msg_Fuzz_Model    `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	ApiKey               string                 `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Usage                []string               `protobuf:"bytes,4,rep,name=usage" json:"usage,omitempty"`
	Seed                 []byte                 `protobuf:"bytes,5,opt,name=seed,proto3" json:"seed,omitempty"`
	N                    uint32                 `protobuf:"varint,6,opt,name=n,proto3" json:"n,omitempty"`
	EIDs                 []uint32               `protobuf:"varint,7,rep,packed,name=EIDs" json:"EIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Clt_Msg_Fuzz) Reset()         { *m = Clt_Msg_Fuzz{} }
func (m *Clt_Msg_Fuzz) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz) ProtoMessage()    {}
func (*Clt_Msg_Fuzz) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0, 0}
}
func (m *Clt_Msg_Fuzz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz proto.InternalMessageInfo

func (m *Clt_Msg_Fuzz) GetResetter() *Clt_Msg_Fuzz_Resetter {
	if m != nil {
		return m.Resetter
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetModel() *Clt_Msg_Fuzz_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *Clt_Msg_Fuzz) GetUsage() []string {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *Clt_Msg_Fuzz) GetN() uint32 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *Clt_Msg_Fuzz) GetEIDs() []uint32 {
	if m != nil {
		return m.EIDs
	}
	return nil
}

type Clt_Msg_Fuzz_Resetter struct {
	// Types that are valid to be assigned to Resetter:
	//	*Clt_Msg_Fuzz_Resetter_SutShell
	Resetter             isClt_Msg_Fuzz_Resetter_Resetter `protobuf_oneof:"resetter"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *Clt_Msg_Fuzz_Resetter) Reset()         { *m = Clt_Msg_Fuzz_Resetter{} }
func (m *Clt_Msg_Fuzz_Resetter) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Resetter) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Resetter) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0, 0, 0}
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Resetter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Resetter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Resetter) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Resetter proto.InternalMessageInfo

type isClt_Msg_Fuzz_Resetter_Resetter interface {
	isClt_Msg_Fuzz_Resetter_Resetter()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_Fuzz_Resetter_SutShell struct {
	SutShell *Clt_Msg_Fuzz_Resetter_SUTShell `protobuf:"bytes,1,opt,name=sut_shell,json=sutShell,oneof"`
}

func (*Clt_Msg_Fuzz_Resetter_SutShell) isClt_Msg_Fuzz_Resetter_Resetter() {}

func (m *Clt_Msg_Fuzz_Resetter) GetResetter() isClt_Msg_Fuzz_Resetter_Resetter {
	if m != nil {
		return m.Resetter
	}
	return nil
}

func (m *Clt_Msg_Fuzz_Resetter) GetSutShell() *Clt_Msg_Fuzz_Resetter_SUTShell {
	if x, ok := m.GetResetter().(*Clt_Msg_Fuzz_Resetter_SutShell); ok {
		return x.SutShell
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg_Fuzz_Resetter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_Fuzz_Resetter_OneofMarshaler, _Clt_Msg_Fuzz_Resetter_OneofUnmarshaler, _Clt_Msg_Fuzz_Resetter_OneofSizer, []interface{}{
		(*Clt_Msg_Fuzz_Resetter_SutShell)(nil),
	}
}

func _Clt_Msg_Fuzz_Resetter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg_Fuzz_Resetter)
	// resetter
	switch x := m.Resetter.(type) {
	case *Clt_Msg_Fuzz_Resetter_SutShell:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SutShell); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg_Fuzz_Resetter.Resetter has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_Fuzz_Resetter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg_Fuzz_Resetter)
	switch tag {
	case 1: // resetter.sut_shell
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_Fuzz_Resetter_SUTShell)
		err := b.DecodeMessage(msg)
		m.Resetter = &Clt_Msg_Fuzz_Resetter_SutShell{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_Fuzz_Resetter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg_Fuzz_Resetter)
	// resetter
	switch x := m.Resetter.(type) {
	case *Clt_Msg_Fuzz_Resetter_SutShell:
		s := proto.Size(x.SutShell)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_Fuzz_Resetter_SUTShell struct {
	Start                string   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Rst                  string   `protobuf:"bytes,2,opt,name=rst,proto3" json:"rst,omitempty"`
	Stop                 string   `protobuf:"bytes,3,opt,name=stop,proto3" json:"stop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_Fuzz_Resetter_SUTShell) Reset()         { *m = Clt_Msg_Fuzz_Resetter_SUTShell{} }
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Resetter_SUTShell) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Resetter_SUTShell) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0, 0, 0, 0}
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Resetter_SUTShell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Resetter_SUTShell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter_SUTShell.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Resetter_SUTShell.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Resetter_SUTShell proto.InternalMessageInfo

func (m *Clt_Msg_Fuzz_Resetter_SUTShell) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Resetter_SUTShell) GetRst() string {
	if m != nil {
		return m.Rst
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Resetter_SUTShell) GetStop() string {
	if m != nil {
		return m.Stop
	}
	return ""
}

type Clt_Msg_Fuzz_Model struct {
	// Types that are valid to be assigned to Model:
	//	*Clt_Msg_Fuzz_Model_Openapiv3
	Model                isClt_Msg_Fuzz_Model_Model `protobuf_oneof:"model"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Clt_Msg_Fuzz_Model) Reset()         { *m = Clt_Msg_Fuzz_Model{} }
func (m *Clt_Msg_Fuzz_Model) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Model) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Model) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0, 0, 1}
}
func (m *Clt_Msg_Fuzz_Model) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Model) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Model.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Model) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Model.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Model) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Model) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Model.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Model proto.InternalMessageInfo

type isClt_Msg_Fuzz_Model_Model interface {
	isClt_Msg_Fuzz_Model_Model()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Clt_Msg_Fuzz_Model_Openapiv3 struct {
	Openapiv3 *Clt_Msg_Fuzz_Model_OpenAPIv3 `protobuf:"bytes,1,opt,name=openapiv3,oneof"`
}

func (*Clt_Msg_Fuzz_Model_Openapiv3) isClt_Msg_Fuzz_Model_Model() {}

func (m *Clt_Msg_Fuzz_Model) GetModel() isClt_Msg_Fuzz_Model_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Clt_Msg_Fuzz_Model) GetOpenapiv3() *Clt_Msg_Fuzz_Model_OpenAPIv3 {
	if x, ok := m.GetModel().(*Clt_Msg_Fuzz_Model_Openapiv3); ok {
		return x.Openapiv3
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Clt_Msg_Fuzz_Model) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Clt_Msg_Fuzz_Model_OneofMarshaler, _Clt_Msg_Fuzz_Model_OneofUnmarshaler, _Clt_Msg_Fuzz_Model_OneofSizer, []interface{}{
		(*Clt_Msg_Fuzz_Model_Openapiv3)(nil),
	}
}

func _Clt_Msg_Fuzz_Model_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Clt_Msg_Fuzz_Model)
	// model
	switch x := m.Model.(type) {
	case *Clt_Msg_Fuzz_Model_Openapiv3:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Openapiv3); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Clt_Msg_Fuzz_Model.Model has unexpected type %T", x)
	}
	return nil
}

func _Clt_Msg_Fuzz_Model_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Clt_Msg_Fuzz_Model)
	switch tag {
	case 1: // model.openapiv3
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Clt_Msg_Fuzz_Model_OpenAPIv3)
		err := b.DecodeMessage(msg)
		m.Model = &Clt_Msg_Fuzz_Model_Openapiv3{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Clt_Msg_Fuzz_Model_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Clt_Msg_Fuzz_Model)
	// model
	switch x := m.Model.(type) {
	case *Clt_Msg_Fuzz_Model_Openapiv3:
		s := proto.Size(x.Openapiv3)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Clt_Msg_Fuzz_Model_OpenAPIv3 struct {
	File                 string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Host                 string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	HeaderAuthorization  string   `protobuf:"bytes,3,opt,name=header_authorization,json=headerAuthorization,proto3" json:"header_authorization,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Reset()         { *m = Clt_Msg_Fuzz_Model_OpenAPIv3{} }
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_Fuzz_Model_OpenAPIv3) ProtoMessage()    {}
func (*Clt_Msg_Fuzz_Model_OpenAPIv3) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0, 0, 1, 0}
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3.Merge(dst, src)
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_Fuzz_Model_OpenAPIv3 proto.InternalMessageInfo

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) GetHeaderAuthorization() string {
	if m != nil {
		return m.HeaderAuthorization
	}
	return ""
}

type Clt_Msg_FuzzProgress struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_FuzzProgress) Reset()         { *m = Clt_Msg_FuzzProgress{} }
func (m *Clt_Msg_FuzzProgress) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_FuzzProgress) ProtoMessage()    {}
func (*Clt_Msg_FuzzProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0, 1}
}
func (m *Clt_Msg_FuzzProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_FuzzProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_FuzzProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_FuzzProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_FuzzProgress.Merge(dst, src)
}
func (m *Clt_Msg_FuzzProgress) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_FuzzProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_FuzzProgress.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_FuzzProgress proto.InternalMessageInfo

type Clt_Msg_SUTMetrics struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_SUTMetrics) Reset()         { *m = Clt_Msg_SUTMetrics{} }
func (m *Clt_Msg_SUTMetrics) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_SUTMetrics) ProtoMessage()    {}
func (*Clt_Msg_SUTMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0, 2}
}
func (m *Clt_Msg_SUTMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_SUTMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_SUTMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_SUTMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_SUTMetrics.Merge(dst, src)
}
func (m *Clt_Msg_SUTMetrics) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_SUTMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_SUTMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_SUTMetrics proto.InternalMessageInfo

type Clt_Msg_ResetProgress struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_ResetProgress) Reset()         { *m = Clt_Msg_ResetProgress{} }
func (m *Clt_Msg_ResetProgress) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_ResetProgress) ProtoMessage()    {}
func (*Clt_Msg_ResetProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0, 3}
}
func (m *Clt_Msg_ResetProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_ResetProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_ResetProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_ResetProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_ResetProgress.Merge(dst, src)
}
func (m *Clt_Msg_ResetProgress) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_ResetProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_ResetProgress.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_ResetProgress proto.InternalMessageInfo

type Clt_Msg_CallResponseRaw struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_CallResponseRaw) Reset()         { *m = Clt_Msg_CallResponseRaw{} }
func (m *Clt_Msg_CallResponseRaw) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallResponseRaw) ProtoMessage()    {}
func (*Clt_Msg_CallResponseRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0, 4}
}
func (m *Clt_Msg_CallResponseRaw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallResponseRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallResponseRaw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallResponseRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallResponseRaw.Merge(dst, src)
}
func (m *Clt_Msg_CallResponseRaw) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallResponseRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallResponseRaw.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallResponseRaw proto.InternalMessageInfo

type Clt_Msg_CallVerifProgress struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_CallVerifProgress) Reset()         { *m = Clt_Msg_CallVerifProgress{} }
func (m *Clt_Msg_CallVerifProgress) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallVerifProgress) ProtoMessage()    {}
func (*Clt_Msg_CallVerifProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0, 5}
}
func (m *Clt_Msg_CallVerifProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallVerifProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallVerifProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallVerifProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallVerifProgress.Merge(dst, src)
}
func (m *Clt_Msg_CallVerifProgress) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallVerifProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallVerifProgress.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallVerifProgress proto.InternalMessageInfo

type Clt_Msg_CallResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clt_Msg_CallResponse) Reset()         { *m = Clt_Msg_CallResponse{} }
func (m *Clt_Msg_CallResponse) String() string { return proto.CompactTextString(m) }
func (*Clt_Msg_CallResponse) ProtoMessage()    {}
func (*Clt_Msg_CallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{0, 0, 6}
}
func (m *Clt_Msg_CallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clt_Msg_CallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clt_Msg_CallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clt_Msg_CallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clt_Msg_CallResponse.Merge(dst, src)
}
func (m *Clt_Msg_CallResponse) XXX_Size() int {
	return m.Size()
}
func (m *Clt_Msg_CallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Clt_Msg_CallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Clt_Msg_CallResponse proto.InternalMessageInfo

type Srv struct {
	Msg                  *Srv_Msg `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Srv) Reset()         { *m = Srv{} }
func (m *Srv) String() string { return proto.CompactTextString(m) }
func (*Srv) ProtoMessage()    {}
func (*Srv) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{1}
}
func (m *Srv) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv.Merge(dst, src)
}
func (m *Srv) XXX_Size() int {
	return m.Size()
}
func (m *Srv) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv.DiscardUnknown(m)
}

var xxx_messageInfo_Srv proto.InternalMessageInfo

func (m *Srv) GetMsg() *Srv_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Srv_Msg struct {
	// Types that are valid to be assigned to Msg:
	//	*Srv_Msg_Call_
	//	*Srv_Msg_Reset_
	Msg                  isSrv_Msg_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Srv_Msg) Reset()         { *m = Srv_Msg{} }
func (m *Srv_Msg) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg) ProtoMessage()    {}
func (*Srv_Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{1, 0}
}
func (m *Srv_Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg.Merge(dst, src)
}
func (m *Srv_Msg) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg proto.InternalMessageInfo

type isSrv_Msg_Msg interface {
	isSrv_Msg_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Srv_Msg_Call_ struct {
	Call *Srv_Msg_Call `protobuf:"bytes,1,opt,name=call,oneof"`
}
type Srv_Msg_Reset_ struct {
	Reset_ *Srv_Msg_Reset `protobuf:"bytes,2,opt,name=reset,oneof"`
}

func (*Srv_Msg_Call_) isSrv_Msg_Msg()  {}
func (*Srv_Msg_Reset_) isSrv_Msg_Msg() {}

func (m *Srv_Msg) GetMsg() isSrv_Msg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Srv_Msg) GetCall() *Srv_Msg_Call {
	if x, ok := m.GetMsg().(*Srv_Msg_Call_); ok {
		return x.Call
	}
	return nil
}

func (m *Srv_Msg) GetReset_() *Srv_Msg_Reset {
	if x, ok := m.GetMsg().(*Srv_Msg_Reset_); ok {
		return x.Reset_
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Srv_Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Srv_Msg_OneofMarshaler, _Srv_Msg_OneofUnmarshaler, _Srv_Msg_OneofSizer, []interface{}{
		(*Srv_Msg_Call_)(nil),
		(*Srv_Msg_Reset_)(nil),
	}
}

func _Srv_Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Srv_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Srv_Msg_Call_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Call); err != nil {
			return err
		}
	case *Srv_Msg_Reset_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reset_); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Srv_Msg.Msg has unexpected type %T", x)
	}
	return nil
}

func _Srv_Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Srv_Msg)
	switch tag {
	case 1: // msg.call
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Srv_Msg_Call)
		err := b.DecodeMessage(msg)
		m.Msg = &Srv_Msg_Call_{msg}
		return true, err
	case 2: // msg.reset
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Srv_Msg_Reset)
		err := b.DecodeMessage(msg)
		m.Msg = &Srv_Msg_Reset_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Srv_Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Srv_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Srv_Msg_Call_:
		s := proto.Size(x.Call)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Srv_Msg_Reset_:
		s := proto.Size(x.Reset_)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Srv_Msg_Call struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Srv_Msg_Call) Reset()         { *m = Srv_Msg_Call{} }
func (m *Srv_Msg_Call) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg_Call) ProtoMessage()    {}
func (*Srv_Msg_Call) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{1, 0, 0}
}
func (m *Srv_Msg_Call) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Call) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Call.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Call) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Call.Merge(dst, src)
}
func (m *Srv_Msg_Call) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Call) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Call.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Call proto.InternalMessageInfo

type Srv_Msg_Reset struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Srv_Msg_Reset) Reset()         { *m = Srv_Msg_Reset{} }
func (m *Srv_Msg_Reset) String() string { return proto.CompactTextString(m) }
func (*Srv_Msg_Reset) ProtoMessage()    {}
func (*Srv_Msg_Reset) Descriptor() ([]byte, []int) {
	return fileDescriptor_fuzzymonkey_39556a07887896d3, []int{1, 0, 1}
}
func (m *Srv_Msg_Reset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv_Msg_Reset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Srv_Msg_Reset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Srv_Msg_Reset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv_Msg_Reset.Merge(dst, src)
}
func (m *Srv_Msg_Reset) XXX_Size() int {
	return m.Size()
}
func (m *Srv_Msg_Reset) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv_Msg_Reset.DiscardUnknown(m)
}

var xxx_messageInfo_Srv_Msg_Reset proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Clt)(nil), "fm.Clt")
	proto.RegisterType((*Clt_Msg)(nil), "fm.Clt.Msg")
	proto.RegisterType((*Clt_Msg_Fuzz)(nil), "fm.Clt.Msg.Fuzz")
	proto.RegisterType((*Clt_Msg_Fuzz_Resetter)(nil), "fm.Clt.Msg.Fuzz.Resetter")
	proto.RegisterType((*Clt_Msg_Fuzz_Resetter_SUTShell)(nil), "fm.Clt.Msg.Fuzz.Resetter.SUTShell")
	proto.RegisterType((*Clt_Msg_Fuzz_Model)(nil), "fm.Clt.Msg.Fuzz.Model")
	proto.RegisterType((*Clt_Msg_Fuzz_Model_OpenAPIv3)(nil), "fm.Clt.Msg.Fuzz.Model.OpenAPIv3")
	proto.RegisterType((*Clt_Msg_FuzzProgress)(nil), "fm.Clt.Msg.FuzzProgress")
	proto.RegisterType((*Clt_Msg_SUTMetrics)(nil), "fm.Clt.Msg.SUTMetrics")
	proto.RegisterType((*Clt_Msg_ResetProgress)(nil), "fm.Clt.Msg.ResetProgress")
	proto.RegisterType((*Clt_Msg_CallResponseRaw)(nil), "fm.Clt.Msg.CallResponseRaw")
	proto.RegisterType((*Clt_Msg_CallVerifProgress)(nil), "fm.Clt.Msg.CallVerifProgress")
	proto.RegisterType((*Clt_Msg_CallResponse)(nil), "fm.Clt.Msg.CallResponse")
	proto.RegisterType((*Srv)(nil), "fm.Srv")
	proto.RegisterType((*Srv_Msg)(nil), "fm.Srv.Msg")
	proto.RegisterType((*Srv_Msg_Call)(nil), "fm.Srv.Msg.Call")
	proto.RegisterType((*Srv_Msg_Reset)(nil), "fm.Srv.Msg.Reset")
}
func (this *Clt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt)
	if !ok {
		that2, ok := that.(Clt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg)
	if !ok {
		that2, ok := that.(Clt_Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fuzz.Equal(that1.Fuzz) {
		return false
	}
	return true
}
func (this *Clt_Msg_FuzzProgress_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_FuzzProgress_)
	if !ok {
		that2, ok := that.(Clt_Msg_FuzzProgress_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FuzzProgress.Equal(that1.FuzzProgress) {
		return false
	}
	return true
}
func (this *Clt_Msg_Metrics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Metrics)
	if !ok {
		that2, ok := that.(Clt_Msg_Metrics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metrics.Equal(that1.Metrics) {
		return false
	}
	return true
}
func (this *Clt_Msg_ResetProgress_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_ResetProgress_)
	if !ok {
		that2, ok := that.(Clt_Msg_ResetProgress_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResetProgress.Equal(that1.ResetProgress) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallResponseRaw.Equal(that1.CallResponseRaw) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallVerifProgress_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallVerifProgress_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallVerifProgress_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallVerifProgress.Equal(that1.CallVerifProgress) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponse_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponse_)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponse_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallResponse.Equal(that1.CallResponse) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Resetter.Equal(that1.Resetter) {
		return false
	}
	if !this.Model.Equal(that1.Model) {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if len(this.Usage) != len(that1.Usage) {
		return false
	}
	for i := range this.Usage {
		if this.Usage[i] != that1.Usage[i] {
			return false
		}
	}
	if !bytes.Equal(this.Seed, that1.Seed) {
		return false
	}
	if this.N != that1.N {
		return false
	}
	if len(this.EIDs) != len(that1.EIDs) {
		return false
	}
	for i := range this.EIDs {
		if this.EIDs[i] != that1.EIDs[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Resetter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Resetter)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Resetter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Resetter == nil {
		if this.Resetter != nil {
			return false
		}
	} else if this.Resetter == nil {
		return false
	} else if !this.Resetter.Equal(that1.Resetter) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Resetter_SutShell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Resetter_SutShell)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Resetter_SutShell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SutShell.Equal(that1.SutShell) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Resetter_SUTShell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Resetter_SUTShell)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Resetter_SUTShell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.Rst != that1.Rst {
		return false
	}
	if this.Stop != that1.Stop {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Model) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Model)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Model)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Model == nil {
		if this.Model != nil {
			return false
		}
	} else if this.Model == nil {
		return false
	} else if !this.Model.Equal(that1.Model) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Model_Openapiv3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Model_Openapiv3)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Model_Openapiv3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Openapiv3.Equal(that1.Openapiv3) {
		return false
	}
	return true
}
func (this *Clt_Msg_Fuzz_Model_OpenAPIv3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_Fuzz_Model_OpenAPIv3)
	if !ok {
		that2, ok := that.(Clt_Msg_Fuzz_Model_OpenAPIv3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.File != that1.File {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.HeaderAuthorization != that1.HeaderAuthorization {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_FuzzProgress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_FuzzProgress)
	if !ok {
		that2, ok := that.(Clt_Msg_FuzzProgress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_SUTMetrics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_SUTMetrics)
	if !ok {
		that2, ok := that.(Clt_Msg_SUTMetrics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_ResetProgress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_ResetProgress)
	if !ok {
		that2, ok := that.(Clt_Msg_ResetProgress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponseRaw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponseRaw)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponseRaw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallVerifProgress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallVerifProgress)
	if !ok {
		that2, ok := that.(Clt_Msg_CallVerifProgress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Clt_Msg_CallResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clt_Msg_CallResponse)
	if !ok {
		that2, ok := that.(Clt_Msg_CallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv)
	if !ok {
		that2, ok := that.(Srv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg)
	if !ok {
		that2, ok := that.(Srv_Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call_)
	if !ok {
		that2, ok := that.(Srv_Msg_Call_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Call.Equal(that1.Call) {
		return false
	}
	return true
}
func (this *Srv_Msg_Reset_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Reset_)
	if !ok {
		that2, ok := that.(Srv_Msg_Reset_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reset_.Equal(that1.Reset_) {
		return false
	}
	return true
}
func (this *Srv_Msg_Call) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Call)
	if !ok {
		that2, ok := that.(Srv_Msg_Call)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Srv_Msg_Reset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv_Msg_Reset)
	if !ok {
		that2, ok := that.(Srv_Msg_Reset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *Clt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Msg.Size()))
		n1, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn2, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Fuzz != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Fuzz.Size()))
		n3, err := m.Fuzz.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Clt_Msg_FuzzProgress_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FuzzProgress != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.FuzzProgress.Size()))
		n4, err := m.FuzzProgress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Clt_Msg_Metrics) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Metrics != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Metrics.Size()))
		n5, err := m.Metrics.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Clt_Msg_ResetProgress_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetProgress != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.ResetProgress.Size()))
		n6, err := m.ResetProgress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Clt_Msg_CallResponseRaw_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CallResponseRaw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.CallResponseRaw.Size()))
		n7, err := m.CallResponseRaw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Clt_Msg_CallVerifProgress_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CallVerifProgress != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.CallVerifProgress.Size()))
		n8, err := m.CallVerifProgress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Clt_Msg_CallResponse_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CallResponse != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.CallResponse.Size()))
		n9, err := m.CallResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Clt_Msg_Fuzz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resetter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Resetter.Size()))
		n10, err := m.Resetter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Model != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Model.Size()))
		n11, err := m.Model.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if len(m.Usage) > 0 {
		for _, s := range m.Usage {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Seed) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Seed)))
		i += copy(dAtA[i:], m.Seed)
	}
	if m.N != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.N))
	}
	if len(m.EIDs) > 0 {
		dAtA13 := make([]byte, len(m.EIDs)*10)
		var j12 int
		for _, num := range m.EIDs {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Resetter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Resetter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resetter != nil {
		nn14, err := m.Resetter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Resetter_SutShell) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SutShell != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.SutShell.Size()))
		n15, err := m.SutShell.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Resetter_SUTShell) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Start) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if len(m.Rst) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Rst)))
		i += copy(dAtA[i:], m.Rst)
	}
	if len(m.Stop) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Stop)))
		i += copy(dAtA[i:], m.Stop)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Model != nil {
		nn16, err := m.Model.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn16
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_Fuzz_Model_Openapiv3) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Openapiv3 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Openapiv3.Size()))
		n17, err := m.Openapiv3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.File) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.HeaderAuthorization) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(len(m.HeaderAuthorization)))
		i += copy(dAtA[i:], m.HeaderAuthorization)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_FuzzProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_FuzzProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_SUTMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_SUTMetrics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_ResetProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_ResetProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallResponseRaw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallResponseRaw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallVerifProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallVerifProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Clt_Msg_CallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clt_Msg_CallResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Msg.Size()))
		n18, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn19, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn19
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Call_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Call != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Call.Size()))
		n20, err := m.Call.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *Srv_Msg_Reset_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Reset_ != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFuzzymonkey(dAtA, i, uint64(m.Reset_.Size()))
		n21, err := m.Reset_.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *Srv_Msg_Call) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Call) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Srv_Msg_Reset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv_Msg_Reset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintFuzzymonkey(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Clt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fuzz != nil {
		l = m.Fuzz.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_FuzzProgress_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FuzzProgress != nil {
		l = m.FuzzProgress.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Metrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_ResetProgress_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetProgress != nil {
		l = m.ResetProgress.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallResponseRaw_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallResponseRaw != nil {
		l = m.CallResponseRaw.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallVerifProgress_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallVerifProgress != nil {
		l = m.CallVerifProgress.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_CallResponse_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallResponse != nil {
		l = m.CallResponse.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Fuzz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resetter != nil {
		l = m.Resetter.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if len(m.Usage) > 0 {
		for _, s := range m.Usage {
			l = len(s)
			n += 1 + l + sovFuzzymonkey(uint64(l))
		}
	}
	l = len(m.Seed)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.N != 0 {
		n += 1 + sovFuzzymonkey(uint64(m.N))
	}
	if len(m.EIDs) > 0 {
		l = 0
		for _, e := range m.EIDs {
			l += sovFuzzymonkey(uint64(e))
		}
		n += 1 + sovFuzzymonkey(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Resetter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resetter != nil {
		n += m.Resetter.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Resetter_SutShell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SutShell != nil {
		l = m.SutShell.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Rst)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Stop)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Model) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Model != nil {
		n += m.Model.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_Fuzz_Model_Openapiv3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Openapiv3 != nil {
		l = m.Openapiv3.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	l = len(m.HeaderAuthorization)
	if l > 0 {
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_FuzzProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_SUTMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_ResetProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallResponseRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallVerifProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clt_Msg_CallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Call_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Call != nil {
		l = m.Call.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Srv_Msg_Reset_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reset_ != nil {
		l = m.Reset_.Size()
		n += 1 + l + sovFuzzymonkey(uint64(l))
	}
	return n
}
func (m *Srv_Msg_Call) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Srv_Msg_Reset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFuzzymonkey(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFuzzymonkey(x uint64) (n int) {
	return sovFuzzymonkey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Clt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Clt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Clt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &Clt_Msg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fuzz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_Fuzz{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_Fuzz_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuzzProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_FuzzProgress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_FuzzProgress_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_SUTMetrics{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_Metrics{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_ResetProgress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_ResetProgress_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallResponseRaw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallResponseRaw{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_CallResponseRaw_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallVerifProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallVerifProgress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_CallVerifProgress_{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_CallResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Clt_Msg_CallResponse_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fuzz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fuzz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resetter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resetter == nil {
				m.Resetter = &Clt_Msg_Fuzz_Resetter{}
			}
			if err := m.Resetter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &Clt_Msg_Fuzz_Model{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usage = append(m.Usage, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seed = append(m.Seed[:0], dAtA[iNdEx:postIndex]...)
			if m.Seed == nil {
				m.Seed = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EIDs = append(m.EIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFuzzymonkey
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EIDs) == 0 {
					m.EIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFuzzymonkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EIDs = append(m.EIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Resetter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resetter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resetter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SutShell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_Fuzz_Resetter_SUTShell{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resetter = &Clt_Msg_Fuzz_Resetter_SutShell{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Resetter_SUTShell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SUTShell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SUTShell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rst = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openapiv3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Clt_Msg_Fuzz_Model_OpenAPIv3{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Model = &Clt_Msg_Fuzz_Model_Openapiv3{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_Fuzz_Model_OpenAPIv3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenAPIv3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenAPIv3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderAuthorization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderAuthorization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_FuzzProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FuzzProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FuzzProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_SUTMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SUTMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SUTMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_ResetProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallResponseRaw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallResponseRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallResponseRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallVerifProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallVerifProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallVerifProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clt_Msg_CallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Srv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Srv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &Srv_Msg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Srv_Msg_Call{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Srv_Msg_Call_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Srv_Msg_Reset{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Srv_Msg_Reset_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Call) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Call: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Call: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv_Msg_Reset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFuzzymonkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuzzymonkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFuzzymonkey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFuzzymonkey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFuzzymonkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFuzzymonkey
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFuzzymonkey
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFuzzymonkey(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFuzzymonkey = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFuzzymonkey   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("pkg/internal/fm/fuzzymonkey.proto", fileDescriptor_fuzzymonkey_39556a07887896d3)
}

var fileDescriptor_fuzzymonkey_39556a07887896d3 = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xb6, 0xeb, 0xa4, 0x8e, 0x5f, 0x93, 0xed, 0x76, 0xba, 0x5a, 0xbc, 0x86, 0xad, 0x4a, 0x0f,
	0xa8, 0x08, 0x88, 0xa1, 0x15, 0x67, 0x68, 0xba, 0xac, 0x52, 0xa1, 0x68, 0x57, 0x53, 0xe0, 0xc0,
	0x25, 0x72, 0xdb, 0xb1, 0x63, 0xd5, 0xf6, 0x58, 0x33, 0xe3, 0xac, 0x92, 0xdf, 0xc0, 0x99, 0x3b,
	0x37, 0xae, 0x5c, 0xf9, 0x05, 0x1c, 0xf9, 0x09, 0xa8, 0x12, 0xff, 0x03, 0xcd, 0xf3, 0xb4, 0x99,
	0xa4, 0xcb, 0xc9, 0x6f, 0xe6, 0x7d, 0xef, 0xf9, 0x9b, 0xef, 0xcd, 0x7c, 0xf0, 0x71, 0x7d, 0x9b,
	0xc5, 0x79, 0xa5, 0x98, 0xa8, 0x92, 0x22, 0x4e, 0xcb, 0x38, 0x6d, 0x96, 0xcb, 0x45, 0xc9, 0xab,
	0x5b, 0xb6, 0x18, 0xd6, 0x82, 0x2b, 0x4e, 0xb6, 0xd2, 0x32, 0xfa, 0x22, 0xcb, 0xd5, 0xac, 0xb9,
	0x1a, 0x5e, 0xf3, 0x32, 0xce, 0x78, 0xc6, 0x63, 0x4c, 0x5d, 0x35, 0x29, 0xae, 0x70, 0x81, 0x51,
	0x5b, 0x72, 0xf4, 0x4b, 0x00, 0xde, 0x79, 0xa1, 0xc8, 0x4b, 0xf0, 0x4a, 0x99, 0x85, 0xee, 0xa1,
	0x7b, 0xbc, 0x73, 0xb2, 0x33, 0x4c, 0xcb, 0xe1, 0x79, 0xa1, 0x86, 0x13, 0x99, 0x51, 0xbd, 0x1f,
	0xfd, 0xdb, 0x03, 0x6f, 0x22, 0x33, 0xf2, 0x09, 0x74, 0xf4, 0x6f, 0x0d, 0xee, 0xa9, 0x85, 0x1b,
	0xbe, 0x6e, 0x96, 0xcb, 0xb1, 0x43, 0x31, 0x4f, 0xbe, 0x81, 0x81, 0xfe, 0x4e, 0x6b, 0xc1, 0x33,
	0xc1, 0xa4, 0x0c, 0xb7, 0xb0, 0x20, 0xdc, 0x2c, 0x78, 0x6b, 0xf2, 0x63, 0x87, 0xf6, 0x53, 0x6b,
	0x4d, 0x4e, 0xc0, 0x2f, 0x99, 0x12, 0xf9, 0xb5, 0x0c, 0x3d, 0x2c, 0x7d, 0x6e, 0x97, 0x5e, 0xfe,
	0xf8, 0xc3, 0xa4, 0xcd, 0x8e, 0x1d, 0x7a, 0x0f, 0x24, 0x23, 0x78, 0x22, 0x98, 0x64, 0x6a, 0xf5,
	0xd7, 0x0e, 0x96, 0xbe, 0xb0, 0x4b, 0xa9, 0x46, 0x58, 0xbf, 0x1d, 0x08, 0x7b, 0x83, 0x5c, 0xc0,
	0xde, 0x75, 0x52, 0x14, 0x53, 0xc1, 0x64, 0xcd, 0x2b, 0xc9, 0xa6, 0x22, 0x79, 0x17, 0x76, 0xb1,
	0xcd, 0x87, 0x76, 0x9b, 0xf3, 0xa4, 0x28, 0xa8, 0xc1, 0xd0, 0xe4, 0xdd, 0xd8, 0xa1, 0xbb, 0xd7,
	0xeb, 0x5b, 0xe4, 0x0d, 0xec, 0x63, 0xab, 0x39, 0x13, 0x79, 0xba, 0xe2, 0xb4, 0x8d, 0xcd, 0x5e,
	0x6e, 0x36, 0xfb, 0x49, 0xa3, 0x2c, 0x5e, 0x48, 0x63, 0x6d, 0x53, 0x8b, 0xba, 0xc6, 0x2d, 0xf4,
	0x1f, 0x8b, 0x6a, 0xf3, 0xd2, 0xa2, 0xda, 0xa4, 0xa2, 0x3f, 0x3a, 0xd0, 0xd1, 0xaa, 0x93, 0xaf,
	0xa1, 0x87, 0xc7, 0x56, 0x4c, 0x98, 0x51, 0xbe, 0xd8, 0x9c, 0x4c, 0x2b, 0x94, 0x62, 0x82, 0x3e,
	0x40, 0xc9, 0xe7, 0xd0, 0x2d, 0xf9, 0x0d, 0x2b, 0xcc, 0x34, 0x9f, 0x3f, 0xaa, 0x99, 0xe8, 0x2c,
	0x6d, 0x41, 0xe4, 0x03, 0xf0, 0x93, 0x3a, 0x9f, 0xde, 0xb2, 0x05, 0x8e, 0x30, 0xa0, 0xdb, 0x49,
	0x9d, 0x7f, 0xcf, 0x16, 0xe4, 0x19, 0x74, 0x1b, 0x99, 0x64, 0x2c, 0xec, 0x1c, 0x7a, 0xc7, 0x01,
	0x6d, 0x17, 0x84, 0x40, 0x47, 0x32, 0x76, 0x83, 0x62, 0xf7, 0x29, 0xc6, 0xa4, 0x0f, 0x6e, 0x85,
	0x82, 0x0d, 0xa8, 0x5b, 0x69, 0xc4, 0x77, 0x17, 0xaf, 0x64, 0xe8, 0x1f, 0x7a, 0xc7, 0x03, 0x8a,
	0x71, 0xf4, 0x9b, 0x0b, 0xbd, 0x7b, 0xa6, 0xe4, 0x0c, 0x02, 0xd9, 0xa8, 0xa9, 0x9c, 0xb1, 0xa2,
	0x30, 0xe7, 0x3a, 0xfa, 0xdf, 0x73, 0xe9, 0x4b, 0x74, 0xa9, 0x91, 0x63, 0x87, 0xf6, 0x64, 0xa3,
	0x30, 0x8e, 0x5e, 0x43, 0xef, 0x7e, 0x5f, 0xf3, 0x94, 0x2a, 0x11, 0x0a, 0x5b, 0x05, 0xb4, 0x5d,
	0x90, 0xa7, 0xe0, 0x09, 0xa9, 0x50, 0x82, 0x80, 0xea, 0x10, 0x99, 0x2b, 0x5e, 0x9b, 0x53, 0x62,
	0x3c, 0x82, 0x95, 0xc2, 0xd1, 0x9f, 0x2e, 0x74, 0x51, 0x19, 0xf2, 0x2d, 0x04, 0xbc, 0x66, 0x55,
	0x52, 0xe7, 0xf3, 0x53, 0x43, 0xf0, 0xf0, 0xfd, 0x22, 0x0e, 0xdf, 0xd4, 0xac, 0x3a, 0x7b, 0x7b,
	0x31, 0x3f, 0x1d, 0x3b, 0x74, 0x55, 0x14, 0xa5, 0x10, 0x3c, 0x64, 0xf4, 0x8f, 0xd3, 0xbc, 0x60,
	0x86, 0x1f, 0xc6, 0x7a, 0x6f, 0xc6, 0x1f, 0xf8, 0x61, 0x4c, 0xbe, 0x82, 0x67, 0x33, 0x96, 0xdc,
	0x30, 0x31, 0x4d, 0x1a, 0x35, 0xe3, 0x22, 0x5f, 0x26, 0x2a, 0xe7, 0x95, 0x21, 0xbc, 0xdf, 0xe6,
	0xce, 0xec, 0xd4, 0xc8, 0x37, 0xa3, 0x8e, 0x9e, 0x40, 0xdf, 0x7e, 0xa8, 0x51, 0x1f, 0x60, 0xf5,
	0xfa, 0xa2, 0x5d, 0x18, 0xac, 0x3d, 0xa8, 0x68, 0x0f, 0x76, 0x37, 0x9e, 0x46, 0xb4, 0x0f, 0x7b,
	0x8f, 0x2e, 0xb8, 0x6e, 0x6b, 0xe3, 0x46, 0x5d, 0xf4, 0x9f, 0xa3, 0x5f, 0x5d, 0xf0, 0x2e, 0xc5,
	0xfc, 0x3d, 0x76, 0x74, 0x29, 0xe6, 0x2b, 0x3b, 0xaa, 0x1f, 0xdc, 0x48, 0xdf, 0x6f, 0xdb, 0x8d,
	0x0c, 0x0c, 0xdf, 0x81, 0x76, 0x23, 0x9d, 0x27, 0x9f, 0x42, 0x17, 0x87, 0x61, 0xee, 0xed, 0x9e,
	0x0d, 0x44, 0xfa, 0x63, 0x87, 0xb6, 0x88, 0x68, 0x1b, 0x3a, 0xba, 0x34, 0xf2, 0xa1, 0x8b, 0x19,
	0x43, 0xec, 0xe4, 0x33, 0xd8, 0xd1, 0x32, 0x2c, 0x26, 0xe8, 0xb7, 0xe4, 0x23, 0xd8, 0x7a, 0xc5,
	0x89, 0x6f, 0x66, 0x17, 0xf9, 0xa6, 0xe3, 0x91, 0x73, 0xec, 0x7e, 0xe9, 0x8e, 0xce, 0x7e, 0xbf,
	0x3b, 0x70, 0xff, 0xba, 0x3b, 0x70, 0xff, 0xbe, 0x3b, 0x70, 0xff, 0xb9, 0x3b, 0x70, 0x7f, 0x8e,
	0x2d, 0x57, 0xb6, 0xfa, 0x9c, 0xf3, 0xb8, 0x35, 0xf0, 0x78, 0xc3, 0xdc, 0xaf, 0xb6, 0xd1, 0x9e,
	0x4f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xde, 0xd1, 0x73, 0xe9, 0xf6, 0x05, 0x00, 0x00,
}

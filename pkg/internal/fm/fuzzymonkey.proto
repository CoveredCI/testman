syntax = "proto3";
package fm;

option go_package = "github.com/FuzzyMonkeyCo/monkey/pkg/internal/fm";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// See: https://github.com/gogo/protobuf/blob/master/extensions.md
// Enable custom Size method (Required by Marshal and Unmarshal)
option (gogoproto.sizer_all) = true;
// Enable custom Marshal method
option (gogoproto.marshaler_all) = true;
// stable_marshaler
// Enable custom Unmarshal method
option (gogoproto.unmarshaler_all) = true;
//option (gogoproto.gostring_all) = true;
//option (gogoproto.goproto_stringer_all) = false;
//option (gogoproto.stringer_all) =  true;

// Generate func (this *ProtoMessage) Equal(that interface{}) bool
option (gogoproto.equal_all) = true;
// Don't generate XXX_unrecognized
//option (gogoproto.goproto_unrecognized_all) = true;
// jsontag, moretags: https://groups.google.com/forum/#!topic/gogoprotobuf/xmFnqAS6MIc

//FIXME
//option (gogoproto.goproto_testgen_all) = true;
//option (gogoproto.goproto_benchgen_all) = true;
// https://godoc.org/github.com/gogo/protobuf/plugin/populate


service FuzzyMonkey {
  rpc Do(stream Clt) returns (stream Srv) {}
}


message Clt {
  message Msg {
    message Fuzz {
      message Resetter {
        message Shell {
          string start = 1;
          string rst = 2;
          string stop = 3;
        }
        oneof resetter {
          Shell shell = 1;
        }
      }
      Resetter resetter = 1;
      enum ModelKind {
        UNKNOWN = 0;
        OpenAPIv3 = 1;
      }
      ModelKind model_kind = 2;
      message Model {
        message OpenAPIv3 {
          // File is a path within current directory pointing to a YAML spec
          string file = 1;
          // Host superseeds the spec's base URL
          string host = 2;
          // HeaderAuthorization if non-empty is added to requests as bearer token
          string header_authorization = 3;
        }
        oneof model {
          OpenAPIv3 openapiv3 = 1;
        }
      }
      Model model = 3;
      repeated string usage = 4;
      bytes seed = 5;
      uint32 intensity = 6;
      repeated uint32 EIDs = 7;
    }

    message Metrics {}

    message ResetProgress {
      enum Status {
        NOOP = 0;
        started = 1;
        ended = 2;
        failed = 3;
      }
      Status status = 1;
      uint64 ts_diff = 2;
      repeated string reason = 3;
    }

    message CallResponseRaw {
      message Output {
        message HttpResponse {
          // FIXME string error
          uint32 status_code = 1;
          string reason = 2;
          message HeaderValues {
            repeated string values = 1;
          }
          map<string,HeaderValues> headers = 3;
          bytes body = 4;
        }
        oneof output {
          HttpResponse http_response = 1;
        }
      }
      Output output = 1;
    }

    message CallVerifProgress {}

    message CallResponse {}

    oneof msg {
      // Initiates testing
      Fuzz fuzz = 1;
      // Logs & observed SUT
      Metrics metrics = 2;
      // SUT state resetting
      ResetProgress reset_progress = 3;
      // SUT call response
      CallResponseRaw call_response_raw = 4;
      // SUT call verifications
      CallVerifProgress call_verif_progress = 5;
      // SUT call response data
      CallResponse call_response = 6;
    }
  }
  Msg msg = 1;
}

message Srv {
  message Msg {
    message Call {
      message Input {
        message HttpRequest {
          string method = 1;
          string url = 2;
          message HeaderValues {
            repeated string values = 1;
          }
          map<string,HeaderValues> headers = 3;
          bytes body = 4;
        }
        oneof input {
          HttpRequest http_request = 1;
        }
      }
      Input input = 1;
      uint32 eId = 2;
    }

    message Reset {
      // bool as_final_step = 1;
    }

    message FuzzProgress {}

    oneof msg {
      // Try call to SUT
      Call call = 1;
      // Testing progress & end
      FuzzProgress fuzz_progress = 2;
      // Reset SUT state
      Reset reset = 3;
    }
  }
  Msg msg = 1;
}
